function [outData, eloc]=ep_mergeEPfiles(files,mergeName)
% ep_mergeEPfiles - [outData, eloc]=ep_mergeEPfiles(files,mergeName)
% Merge list of EP data files so that they are combined together.
% They must be either subject average or combined subject average files or single subject files from the same subject.
% Factor files are not supported.
% They must have the same set of channels and timepoints.
% If for a single subject file, must have the same trial spec names.
% The result is a combined set of cells and a combined number of subjects.
% Any subjects without the full set of cells will have zeroed data for the missing cells.
% The information about the experiment and so forth are taken from the first file in the list.
%
%Inputs
% Optional
%   files: A 2D cell array with file names to merge (including path names) in the first column.
%          the remaining columns are input arguments for the readData function.
%   mergeName: the name of the resulting merged file.
%
%Outputs:
%  EPdata         : Structured array with the data and accompanying information.  See readData.
%  eloc:    The raw eloc prior to any editing.
%
%History
%  by Joseph Dien (3/4/09)
%  jdien07@mac.com
%
% modified 5/30/09 JD
% Added cellType, subType, chanType, facName, facType, and analysis fields.  Reads in files directly rather than .mat files.
%
% modified 6/26/09 JD
% added mergeName input and dataName field.
%
%  bugfix 10/28/09 JD
%  Crash due to not encoding cell and subject labels correctly.
%  Not filling in cellType and trialSpec fields correctly for single-trial data.
%
%  bugfix 1/18/10 JD
%  Fixed crash in EP when merge operation aborted due to problem with files.
%
%  bugfix 1/23/10 JD
%  Fixed contents of analysis fields being not arranged correctly.
%
% modified 2/11/10 JD
% analysis fields no longer optional.
%
%  bugfix 4/30/10 JD
%  Fixed crash when reading single_trial data using single file mode.
%
%  bugfix 5/23/10 JD
%  Fixed crash when merging average files.
%  Added 'exact' keyword to strmatch commands to ensure that the cell and subject names are matched exactly rather than
%  based on the beginning of the names.
%
% modified 5/26/10 JD
% Added eloc to parameters passed to files to handle cases where ced is non-empty but eloc is empty so doesn't have to
% keep accessing .ced file on every pass.
% Fixed not successfully merging average files together.
%
%  bugfix 6/2/10 JD
% Only adds trial names for single trial data files.
% 
%  modified 10/17/10 JD
%  Added support for saccadeTrials and saccadeOnset fields.
% 
% modified 1/24/12 JD
% Eliminated REF channel type and added reference field to keep track of original and current reference scheme.
% 
% modified 3/25/12 JD
% Added support for frequency files.
%
% bugfix 10/18/12 JD
% Fixed subNames, subTypes, cellNames, and cellTypes fields not necessarily being column vectors, resulting in crashes in other parts of the Toolkit.
%
% bugfix 2/6/13 JD
% Fixed power field not being included in merged files, causing crashes elsewhere.
%
% bugfix 5/20/13 JD
% Fixed single file mode single-trial data files not being merged successfully.
%
% modified 5/20/13 JD
% Channels not present in the initial file, as in channels identified as being BAD in the CED file, simply dropped from succeeding files.
% Added original eloc output.
%
% modified 10/9/13 JD
% Added recTime field.
%
% modified 2/27/14 JD
% Fields output in standard order.
%
% modified 3/24/14 JD
% Added .cov field.
%
% modified 4/14/14 JD
% Added .covNum field.
%
% modified 6/1/14 JD
% Added relNames dimension to data to handle coherence and phase-locking measure, including support for complex numbers.
%
% modified 9/4/15 JD
% Added trial specs for average files.
%
% bugfix 11/4/15 JD
% Fixed crash when merging files that do not have subject specs.
%
% modified 3/8/16 JD
% Eliminated support for .power field.
%
% modified 10/16/16 JD
% Added .stims field.
%
% modified 11/14/16 JD
% No longer assumes subject specs are the same for all merged files. 
% Added .calibration field.
%
% bugfix 5/19/17 JD
% Fixed crash when merging multiple subjects.
%
% modified 6/13/17 JD
% Added .timeUnits field.
%
% modified 11/22/17 JD
% Added support for impedances field.
%
% modified 2/11/18 JD
% Added support for stdCM field.
%
% bugfix & modified 12/14/18 JD
% Added support for trial names to single file mode.
% Fixed event spec files so that when text files are read using single file mode, the events information is matched up correctly.
%
% bugfix 2/12/19 JD
% Fixed crash when merging average type files.
%
% modified 4/9/19 JD
% Added support for task level performance measures.
%
% bugfix 4/23/19 JD
% Fixed crash when merging files.
%
% bugfix 10/17/19 JD
% Will no longer keep asking for ced file in single file mode if user chooses cancel to first request.
%
% modified 11/4/19 JD
% Added sessNums sessNames fields.
%
% modified 12/24/19 JD
% Upgraded support of std information by adding .covAVE and .GAVsubs fields and eliminating .std and .stdCM fields.
%
% bugfix 1/20/20 JD
% Fixed crash when merging data that are not averages.
% Fixed putting frequency bands into different trials for single-trial data.
%
% bugfix 1/20/20 JD
% Fixed crash when there is no specSuffix or subjectSpecSuffix fields, as in when reading .study files.
%
% bugfix 5/15/20 JD
% Fixed crash when a session name is missing.
% Fixed not handling merging session information correctly, resulting in crashes.
%
% bugfix 6/8/20 JD
% Fixed crash when reading a data file failed for any reason.
%
% modified 3/9/21 JD
% Timeshifts the data via interpolation if the time points of the data going into a merged file are not the same.
%
% modified 7/24/22 JD
% Added support for reading Matlab .mat files.
%
% bugfix 10/10/22 JD
% Fixed crash when merging Matlab .mat files.
%
% modified 1/27/25 JD
% Added video field.
%
% modified 2/27/25 JD
% Added support for virtual grand averages.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     Copyright (C) 1999-2025  Joseph Dien
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

global EPtictoc

outData=[];
eloc=[];

if nargin < 1
    files=[];
end

if isempty(files)
    [files, pathname] = uigetfile('*.*','Open:','MultiSelect','on');
    activeDirectory=pathname;
    if ~iscell(files)
        temp=files;
        files=[];
        files{1}=temp;
    end
    if files{1}==0
        msg{1}='No filenames selected. You have to click on a name';
        [msg]=ep_errorMsg(msg);
        return
    end
    
    if ~iscell(files)
        temp=files;
        files=[];
        files{1}=temp;
    end
else
    for iFile=1:size(files,1)
        if ~exist(char(files{iFile,1}),'file')
            msg{1}=['Error: The file ' files{iFile,2} ' is not in the directory.'];
            [msg]=ep_errorMsg(msg);
            return
        end
    end
end

numFiles = size(files,1);

evtSpec=find(strcmp('specSuffix',files(1,:)));
if ~isempty(evtSpec)
    specSuffix=files{1,evtSpec+1};
    files(:,evtSpec:evtSpec+1)=[];
else
    specSuffix=[];
end
subSpec=find(strcmp('subjectSpecSuffix',files(1,:)));
if ~isempty(subSpec)
    subjectSpecSuffix=files{1,subSpec+1};
    files(:,subSpec:subSpec+1)=[];
else
    subjectSpecSuffix=[];
end

totalSubjectSpecs=cell(0);
totalSubjectNames=cell(0);
totalSessNames=cell(0);
totalSessNames{1}='';
totalSessNums=[];
totalCellNames=cell(0);
totalTrialNames=[];
uniqueCellNames=cell(0);
uniqueFreqNames=[];
uniqueRelNames=[];
ced=[];
eloc=[];
videoSize=[0; 0; 0];

%compile data from each file
for iFile=1:numFiles
    thisFile=files{iFile,1};
    temp=[];
    temp{1}='file';
    temp(2:size(files,2)+1)=files(iFile,:);
    if ~isempty(ced) && ~any(strcmp('ced',files(iFile,:)))
        temp{end+1}='ced';
        temp{end+1}=ced;
    end

    if iFile >1
        temp{end+1}='silent';
        temp{end+1}='on';
    end
    if any(strcmp('format',files(iFile,:)))
        if strcmp(files(iFile,find(strcmp('format',files(iFile,:)))+1),'matlab_mat') && (iFile >1)
            temp{end+1}='matlabDims';
            temp{end+1}=outInfo.matlabDims;
        end
    end

    disp(thisFile)
    [data, origEloc, outInfo]=ep_readData(temp);

    if isempty(data) || isempty(data.data)
        outData=[];
        msg{1}='File not read successfully.  Aborting effort to merge data files.';
        [msg]=ep_errorMsg(msg);
        return
    end
    
    subList=unique(data.subNames);
    if ~isempty(subList)
        disp('Subjects:')
        for iSub=1:length(subList)
            disp(subList{iSub});
        end
    end
    cellList=unique(data.cellNames);
    if ~isempty(cellList)
        disp('Cells:')
        for iCell=1:length(cellList)
            disp(cellList{iCell});
        end
    end
    
    disp('--------------------------');
    
    if isempty(ced)
        ced='none';
    end
    
    if strcmp(data.dataType,'single_trial')
        if iFile==1
            theSingleSubject=data.subNames{1};
        else
            if ~strcmp(data.subNames{1},theSingleSubject)
                outData=[];
                msg{1}=['Error: When merging single trial data, all must be from the same subject (' theSingleSubject ').'];
                [msg]=ep_errorMsg(msg);
                return
            end
        end
    elseif ~any(strcmp(data.dataType,{'average'}))
        outData=[];
        msg{1}=['Error: The file ' thisFile ' is the ' data.dataType ' data type.'];
        [msg]=ep_errorMsg(msg);
        return
    end
    
    %information that is assumed to be identical between all the files and is culled from the first such file
    if iFile ==1
        outData.dataType=data.dataType;
        outData.fileFormat = data.fileFormat;
        outData.montage = data.montage;
        outData.chanNames = data.chanNames;
        outData.timeNames = data.timeNames;
        outData.subNames = data.subNames;
        outData.chanTypes= data.chanTypes;
        outData.timeUnits= data.timeUnits;
        outData.cellTypes = data.cellTypes;
        outData.subjectSpecNames = data.subjectSpecNames;
        outData.taskNames = data.taskNames;
        outData.taskMeasNames = data.taskMeasNames;
        outData.taskSpecs = data.taskSpecs;
        outData.facNames= data.facNames;
        outData.facTypes = data.facTypes;
        outData.freqNames = data.freqNames;
        outData.relNames = data.relNames;
        outData.sessNames = data.sessNames;
        outData.sessNums = data.sessNums;
        try
            EPver=ver('EP_Toolkit');
        catch
            EPver='unavailable'; %workaround for bug in earlier version of Matlab
        end
        outData.EPver = EPver;
        outData.ver = ver;
        outData.date = date;
        outData.Fs = data.Fs;
        outData.baseline = data.baseline;
        outData.ename = data.ename;
        outData.dataName = mergeName;
        outData.trialSpecNames = data.trialSpecNames;
        outData.trialNames = [];
        outData.trialSpecs = [];
        outData.fileName = data.fileName;
        outData.ced = data.ced;
        outData.eloc = data.eloc;
        outData.reference = data.reference;
        outData.implicit = data.implicit;
        outData.facVecS = data.facVecS;
        outData.facVecT = data.facVecT;
        outData.facVecF = data.facVecF;
        outData.facVar = data.facVar;
        outData.facVarQ = data.facVarQ;
        outData.pca = data.pca;
        outData.stims = data.stims;
        outData.calibration = data.calibration;
        outData.impedances = data.impedances;
        outData.video(1) = struct('times',[],'frames',[]);
        outData.video(1)=[];
        outData.history = data.history;
        ced = data.ced;
        if isempty(ced)
            ced='none';
        end
        numChans = size(data.data,1);
        numPoints = size(data.data,2);
        numEvents = length(data.events);
        
        newBlinkTrial=[];
        newMoveTrial=[];
        newBadTrials=[];
        newBadChans=[];
    else
        chanDiff=setxor(outData.chanNames,data.chanNames);
        if ~isempty(chanDiff)
            if isempty(setdiff(outData.chanNames,data.chanNames))
                keepChans=[];
                for i=1:length(data.chanNames)
                    if any(strcmp(data.chanNames{i},outData.chanNames))
                        keepChans(end+1)=i;
                    end
                end
                data=ep_selectData(data,{keepChans,[],[],[],[],[]});
                disp(['Dropping channels in ' thisFile ' that are not in the initial file, including those marked as BAD in the CED file.']);
            else
                outData=[];
                msg{1}=['Error: The file ' thisFile ' has different channels from the first file.'];
                [msg]=ep_errorMsg(msg);
                for iChan=1:length(chanDiff)
                    disp(chanDiff{iChan});
                end
                return
            end
        end
        if ~isempty(outData.timeNames) && ~isempty(setxor(outData.timeNames,data.timeNames))
            disp(['Adjusting timing for ' thisFile ' to match that of the first file.']);
            [data]=ep_interpTime(data,outData.timeNames);
            ep_tictoc;if EPtictoc.stop;return;end
            if isempty(data)
                outData=[];
                msg{1}=['Error: The file ' thisFile ' was unable to be time shifted.'];
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        if ~isempty(setxor(outData.trialSpecNames,data.trialSpecNames)) && strcmp(data.dataType,'single_trial')
            outData=[];
            msg{1}=['Error: The file ' thisFile ' has different trial specs from the first file.'];
            [msg]=ep_errorMsg(msg);
            return
        end
        if ~isempty(data.stims)
            for iStim=1:length(data.stims)
                if ~any(strcmp(data.stims(iStim).name,{outData.stims.name}))
                    outData.stims(end+1)=data.stims(iStim);
                end
            end
        end
    end
    
    newTrialNames{iFile}= data.trialNames;
    newTrialSpecs{iFile}= data.trialSpecs;
    
    newCellNames{iFile}= data.cellNames;
    newData{iFile}= data.data;
    newNoise{iFile}= data.noise;
    newCovAVE{iFile}= data.covAVE;
    newGAVsubs{iFile}= data.GAVsubs;
    newCov{iFile}= data.cov;
    newSubNames{iFile}= data.subNames;
    newSubTypes{iFile}= data.subTypes;
    newSessNames{iFile}= data.sessNames;
    newSessNums{iFile}= data.sessNums;
    newCellTypes{iFile}= data.cellTypes;
    newSubjectSpecs{iFile}= data.subjectSpecs;
    newEvents{iFile}= data.events;
    newAvgNum{iFile}= data.avgNum;
    newCovNum{iFile}= data.covNum;
    newSubNum{iFile}= data.subNum;
    newFreqNames{iFile}=data.freqNames;
    newRelNames{iFile}=data.relNames;
    newVideo{iFile}=data.video;
    
    newBlinkTrial{iFile}= data.analysis.blinkTrial;
    newSaccadeTrial{iFile}= data.analysis.saccadeTrial;
    newSaccadeOnset{iFile}= data.analysis.saccadeOnset;
    newMoveTrial{iFile}= data.analysis.moveTrial;
    newBadTrials{iFile}= data.analysis.badTrials;
    newBadChans{iFile}= data.analysis.badChans;
    
    for i=1:length(data.cellNames)
        totalCellNames(end+1)=data.cellNames(i);
        if ~any(strcmp(data.cellNames{i},uniqueCellNames))
            uniqueCellNames{end+1}=char(data.cellNames{i});
        end
    end
    
    for i=1:length(data.trialNames)
        totalTrialNames(end+1,1)=data.trialNames(i);
    end

    for i=1:length(data.freqNames)
        if ~isempty(setdiff(data.freqNames(i),uniqueFreqNames))
            uniqueFreqNames(end+1)=data.freqNames(i);
        end
    end

    for i=1:length(data.relNames)
        if ~isempty(setdiff(data.relNames(i),uniqueRelNames))
            uniqueRelNames(end+1)=data.relNames(i);
        end
    end
    
    numNewSubs=length(data.subNames);
    lastOldSub=length(outData.subNames);
    if isempty(lastOldSub)
        lastOldSub=0;
    end
    for iSpec=1:length(data.subjectSpecs)
        theSpec=find(strcmp(data.subjectSpecNames{iSpec},outData.subjectSpecNames));
        if ~isempty(theSpec)
            outData.subjectSpecs{lastOldSub+1:lastOldSub+numNewSubs,theSpec}=data.subjectSpecs{:,iSpec};
        else
            outData.subjectSpecNames{end+1}=data.subjectSpecNames{iSpec};
            outData.subjectSpecs{lastOldSub+1:lastOldSub+numNewSubs,end+1}=data.subjectSpecs{:,iSpec};
        end
    end
    
    for iTask=1:length(data.taskNames)
        theTask=find(strcmp(data.taskNames{iTask},outData.taskNames));
        if isempty(theTask)
            outData.taskNames{end+1}=data.taskNames{iTask};
            theTask=find(strcmp(data.taskNames{iTask},outData.taskNames));
        end
        for iMeas=1:length(data.taskMeasNames)
            theMeas=find(strcmp(data.taskMeasNames{iMeas},outData.taskMeasNames));
            if ~isempty(theMeas)
                outData.taskSpecs(lastOldSub+1:lastOldSub+numNewSubs,theTask,theMeas)=data.taskSpecs(:,iTask,iMeas);
            else
                outData.taskMeasNames{end+1}=data.taskMeasNames{iMeas};
                outData.taskSpecs(lastOldSub+1:lastOldSub+numNewSubs,theTask,end+1)=data.taskSpecs(:,iTask,iMeas);
            end
        end
    end
    
    %compile list of sessNames in the dataset
    if ~isempty(data.sessNames)
        for iSessName=1:length(data.sessNames)
            theSessName=find(strcmp(data.sessNames{iSessName},totalSessNames));
            if isempty(theSessName)
                totalSessNames{end+1,1}=data.sessNames{iSessName};
            end
        end
    end
    
    %compile list of subjectNames in the dataset.  There can be multiple instances if they are from different sessions
    for iSub=1:length(data.subNames)
        subList=find(strcmp(data.subNames{iSub},totalSubjectNames));
        if ~isempty(data.sessNames)
            theSess=find(strcmp(data.sessNames{data.sessNums(iSub)},totalSessNames));
        else
            theSess=find(strcmp('',totalSessNames)); %empty can itself be an entry in the list of sessNames.
        end
        sessList=find(ismember(totalSessNums,theSess)); %There can be multiple instances if they are from different subjects
        if isempty(intersect(subList,sessList)) %if this is the first instance of a new subject-session combo, then add a new entry to the total lists that will end up being a new subject in the output file.
            totalSubjectNames(end+1,1)=data.subNames(iSub);
            totalSessNums(end+1,1)=theSess;
            if ~isempty(outData.subjectSpecNames)
                totalSubjectSpecs{end+1,1}=[];
                if ~isempty(data.subjectSpecs)
                    totalSubjectSpecs(end,1:size(data.subjectSpecs,2))=data.subjectSpecs(iSub,:);
                end
            end
        end
    end
end

if (isscalar(totalSessNames)) && (isempty(totalSessNames{1})) %if no session data
    totalSessNums=[];
    totalSessNames=cell(0);
else
    %eliminate the blank sess name.  A sessnum of zero indicates that it is missing.
    totalSessNums=totalSessNums-1;
    totalSessNames(1)=[];
end

numCells=length(uniqueCellNames);
numSubs=length(totalSubjectNames);
numFreqs=length(uniqueFreqNames);
numRels=length(uniqueRelNames);

if strcmp(outData.dataType,'average')
    numWaves=numCells;
elseif strcmp(data.dataType,'single_trial')
    numWaves=length(totalCellNames);
end

if ~isempty(uniqueFreqNames)
    if any(uniqueFreqNames==0)
        disp('Warning: there are frequency data being given a label of zero Hz.')
    end
end

outData.data=zeros(numChans,numPoints,numWaves,numSubs,1,max(1,numFreqs),max(1,numRels));
outData.noise=zeros(numChans,numPoints,numWaves,numSubs,1);
outData.covAVE=zeros(numChans,numPoints,numWaves,numSubs,1,max(1,numFreqs),1);
outData.GAVsubs=cell(0);
outData.cov.covMatrix=NaN(numSubs,numChans,numChans);
outData.cov.Nq=NaN;
outData.facData=[];
outData.avgNum=zeros(numSubs,numCells);
outData.covNum=zeros(numSubs,numCells);
outData.subNum=zeros(numSubs,numCells);
outData.events=cell(numSubs,numCells);
outData.analysis.blinkTrial=zeros(numSubs,numWaves);
outData.analysis.saccadeTrial=zeros(numSubs,numWaves);
outData.analysis.saccadeOnset=zeros(numSubs,numWaves);
outData.analysis.moveTrial=zeros(numSubs,numWaves);
outData.analysis.badTrials=zeros(numSubs,numWaves);
outData.analysis.badChans=zeros(numSubs,numWaves,numChans);
outData.cellNames=cell(0);

outData.subNames=totalSubjectNames;
outData.sessNums=totalSessNums;
outData.sessNames=totalSessNames;
outData.subjectSpecs=totalSubjectSpecs;

outData.recTime=[1:outData.Fs:outData.Fs*(numWaves-1)+1];

%merge the data from the files together
trialCount=zeros(numCells,1);
outCount=0;
for iFile=1:numFiles
    GAVsubsList=[];%translation list of old GAVsubs numbers to new ones.
    for iSub=1:length(newSubNames{iFile})
        subList=find(strcmp(newSubNames{iFile}{iSub},totalSubjectNames));
        if ~isempty(totalSessNames)
            if ~isempty(newSessNums{iFile}) && (newSessNums{iFile}~=0) && ~isempty(newSessNames{iFile}(newSessNums{iFile}))
                theSess=find(strcmp(newSessNames{iFile}(newSessNums{iFile}),totalSessNames));
            else
                theSess=0;
            end
            sessList=find(ismember(totalSessNums,theSess));
            newSub=intersect(subList,sessList);
        else
            if length(subList)>1
                disp('Error in merging data files.');
            end
            newSub=subList(1);
        end
        outData.subTypes(newSub,1)=newSubTypes{iFile}(iSub);
        
        for iCell=1:length(newCellNames{iFile})
            newCell=strcmp(newCellNames{iFile}{iCell},uniqueCellNames);
            newWave=newCell;
            if strcmp(data.dataType,'single_trial')
                theTrialName=newTrialNames{iFile}(iCell);
                if isempty(newFreqNames{iFile}) %if frequency data, then a new instance of a cell is not necessarily a new trial
                    newWave=outCount+iCell;
                    trialCount(newCell)=trialCount(newCell)+1;
                    if ismember(theTrialName,outData.trialNames(strcmp(newCellNames{iFile}{iCell},outData.cellNames)))
                        theTrialName=trialCount(newCell);
                    end
                end
                outData.trialNames(newWave,1)=theTrialName;
            else
                if ~isempty(newGAVsubs{iFile}) && ~isempty(newGAVsubs{iFile}(iSub+1,max(1,iCell-numRcells+1),end))
                    outData.GAVsubs(newSub,max(1,iCell-numRcells+1))=newGAVsubs{iFile}(iSub+1,max(1,iCell-numRcells+1),end);
                end
                GAVsubsList(iSub)=newSub;
            end
            for theSpec=1:size(newTrialSpecs{iFile},2)
                outData.trialSpecs{newWave,theSpec,newSub}=newTrialSpecs{iFile}{iCell,theSpec,iSub};
            end
            outData.analysis.blinkTrial(newSub,newWave)=newBlinkTrial{iFile}(iSub,iCell);
            outData.analysis.saccadeTrial(newSub,newWave)=newSaccadeTrial{iFile}(iSub,iCell);
            outData.analysis.saccadeOnset(newSub,newWave)=newSaccadeOnset{iFile}(iSub,iCell);
            outData.analysis.moveTrial(newSub,newWave)=newMoveTrial{iFile}(iSub,iCell);
            outData.analysis.badTrials(newSub,newWave)=newBadTrials{iFile}(iSub,iCell);
            outData.analysis.badChans(newSub,newWave,:)=newBadChans{iFile}(iSub,iCell,:);
            outData.cellNames(newWave,1)=uniqueCellNames(newCell);
            outData.cellTypes(newWave,1)=newCellTypes{iFile}(iCell);
            
            if ~isempty(newVideo{iFile})
                outData.video(end+1:end+length(newVideo{iFile}))=newVideo{iFile};
            end
            
            for theFreq=1:max(1,length(newFreqNames{iFile}))
                if ~isempty(newFreqNames{iFile})
                    newFreq=find(newFreqNames{iFile}(theFreq) == uniqueFreqNames);
                    outData.freqNames(newFreq,1)=uniqueFreqNames(newFreq);
                else
                    newFreq=1;
                end
                
                for theRel=1:max(1,length(newRelNames{iFile}))
                    if ~isempty(newRelNames{iFile})
                        newRel=find(newRelNames{iFile}(theFreq) == uniqueRelNames);
                        outData.relNames(newRel,1)=uniqueRelNames(newRel);
                    else
                        newRel=1;
                    end
                    
                    if any(any(squeeze(outData.data(:,:,newWave,newSub,1,newFreq,newRel))))
                        if isempty(totalSessNums)
                            theSess='';
                        else
                            theSess=[' and session ' num2str(totalSessNums(newSub))];
                        end
                        disp(' ');
                        disp('**************************************************************');
                        disp(['Warning: The file ' thisFile ' duplicated the data for subject ' totalSubjectNames{newSub} theSess ' for cell ' totalCellNames{newCell} '.']);
                        disp('**************************************************************');
                        disp(' ');
                    end
                    outData.data(:,:,newWave,newSub,1,newFreq)=newData{iFile}(:,:,iCell,iSub,1,theFreq,newRel);
                end
                if ~isempty(newNoise{iFile})
                    outData.noise(:,:,newWave,newSub,1)=newNoise{iFile}(:,:,iCell,iSub,1);
                end
                if ~isempty(newCovAVE{iFile})
                    outData.covAVE(:,:,newWave,newSub,1,newFreq,:)=newCovAVE{iFile}(:,:,iCell,iSub,1,theFreq,:);
                end
                if ~isempty(newCov{iFile})
                    outData.cov.covMatrix(newSub,:,:)=newCov{iFile}.covMatrix(iSub,:,:);
                    outData.cov.Nq(Nq)=newCov{iFile}.Nq(iSub);
                end
            end
            outData.avgNum(newSub,newWave)=newAvgNum{iFile}(iSub,iCell);
            outData.covNum(newSub,newWave)=newCovNum{iFile}(iSub,iCell);
            outData.subNum(newSub,newWave)=newSubNum{iFile}(iSub,iCell);
            outData.events(newSub,newWave)=newEvents{iFile}(iSub,iCell);
        end
        outCount=outCount+length(newCellNames{iFile});
    end
    if ~isempty(outData.GAVsubs)
        %Not trying very hard because I can't see this GAVsubs code ever getting used.
        for iGAVsub=2:size(outData.GAVsubs,1)
            for iCell=1:size(outData.GAVsubs,2)
                for iRow=1:size(outData.GAVsubs{iGAVsub,iCell,end},1)
                    outData.GAVsubs{iGAVsub,iCell,end}(iRow,1)=GAVsubsList(outData.GAVsubs(outData.GAVsubs{iGAVsub,iCell,end}(iRow,1)));
                end
            end
        end
    end
end

if size(outData.GAVsubs,2)==length(outData.cellNames)
    %Not trying very hard because I can't see this GAVsubs code ever getting used.
    outData.GAVsubs(1,end+1,end)=cell(0);
    for iGAVsub=2:size(outData.GAVsubs,1)
        for iCell=1:size(outData.GAVsubs,2)
            for iRow=1:size(outData.GAVsubs{iGAVsub,iCell,end},1)
                theRow=find(EPdataOut.GAVsubs{theSub,iCell,end}(iRow,1)==EPdataOut.GAVsubs{theSub,end,end}(:,1));
                if ~isempty(theRow)
                    EPdataOut.GAVsubs{theSub,end,end}(theRow,2)=EPdataOut.GAVsubs{theSub,end,end}(theRow,2)+EPdataOut.GAVsubs{theSub,theCell,end}(iRow,2);
                else
                    EPdataOut.GAVsubs{theSub,end,end}(end+1,1)=EPdataOut.GAVsubs{theSub,iCell,end}(:,1);
                    EPdataOut.GAVsubs{theSub,end,end}(end,2)=EPdataOut.GAVsubs{theSub,iCell,end}(:,2);
                end
            end
        end
    end
end

if isempty(totalSessNames)
    outData.sessNames=cell(0);
    outData.sessNums=[];
else
    outData.sessNames=totalSessNames;
    outData.sessNums=totalSessNums;
end

try
    EPver=ver('EP_Toolkit');
catch
    EPver='unavailable'; %workaround for bug in earlier version of Matlab
end
outData.EPver=EPver;
outData.ver=ver;
outData.date=date;
% outData.history={'mergeEPfiles',files};
outData.facData=[]; %factor files not supported so assumed no such data.
if isempty(outData.trialSpecs)
    outData.trialSpecs=cell(size(outData.data,3),0,size(outData.data,4));
end
outData.pca=[];

if ~any(any(any(any(any(any(any(outData.covAVE)))))))
    outData.covAVE=[];
end

if ~any(any(any(any(any(outData.noise)))))
    outData.noise=[];
end

if all(all(all(isnan(outData.cov.covMatrix))))
    outData.cov=[];
end

%ensure fields are in standard order.
[EPfieldNames]=fieldnames(ep_newFile);

modelEPdata=[];
for i=1:length(EPfieldNames)
    modelEPdata.(EPfieldNames{i})=[];
end

if ~isequal(EPfieldNames,fieldnames(outData))
    outData = orderfields(outData, modelEPdata);
end

if strcmp(data.dataType,'single_trial')
    [B, sortOrder]=sortrows([outData.cellNames cellfun(@num2str,num2cell(outData.trialNames),'UniformOutput',false)]);
    [outData]=ep_reorderData(outData,'cells',sortOrder);
elseif strcmp(data.dataType,'average')
    [B, sortOrder]=sortrows(outData.cellNames);
    [outData]=ep_reorderData(outData,'cells',sortOrder);
    [B, sortOrder]=sortrows(outData.subNames);
    [outData]=ep_reorderData(outData,'subjects',sortOrder);
end

if isempty(outData)
    return
end

%Add secondary files to the data file if present.
for iFile=1:numFiles
    if ~isempty(specSuffix) %add in trial events information if desired
        [pathstr, name, fileSuffix] = fileparts(files{iFile,1});
        specFileName=[pathstr filesep name specSuffix];
        if exist(specFileName,'file')
            outData2 = ep_readEventText(outData, specFileName);
            if ~isempty(outData2)
                outData=outData2;
            end
        end
    end
    
    if ~isempty(subjectSpecSuffix) %add in subject specs information if desired
        [pathstr, name, fileSuffix] = fileparts(files{iFile,1});
        specFileName=[pathstr filesep name subjectSpecSuffix];
        if exist(specFileName,'file')
            tempData=ep_readSubjectSpecText(outData, specFileName);
            if ~isempty(tempData)
                outData = tempData;
            end
        end
    end
end

[err]=ep_checkEPfile(outData);

if err
    outData=[];
    msg{1}='Defective file will not be loaded.  File can be fixed by loading manually into Matlab and editing, as in load(''filename.ept'',''-mat''); and then save(''filename.ept'',''-mat'');';
    [msg]=ep_errorMsg(msg);
    return
end
