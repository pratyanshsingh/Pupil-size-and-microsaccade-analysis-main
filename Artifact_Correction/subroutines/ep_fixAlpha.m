function [outputLog graphCounter] = ep_fixAlpha(inFile, startChunk, endChunk, badDataCriteria, badChans, refChan, butterflyFig, graphCounter, numGraphs, theSubject)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% [outputLog graphCounter] = ep_fixAlpha(inFile, startChunk, endChunk, badDataCriteria, badChans, refChan, butterflyFig, graphCounter, numGraphs, theSubject)%%	Reads in file chunks generated by chunkInputFile function.  It runs a continuous wavelet transform followed by a PCA%   in the frequency-domain, followed by an ICA to identify spatially coherent alpha, then an inverse cwt to regenerate%   the isolated alpha activity and subtracts it from the data.%	Function runs through all the files given and outputs them as fixed chunks.  chunks will still need to be rejoined.%% Reference: Torrence, C. and G. P. Compo, 1998: A Practical Guide to%            Wavelet Analysis. <I>Bull. Amer. Meteor. Soc.</I>, 79, 61-78.%Inputs%	inFile:     filename (not including the .mat suffix or chunk number.  e.g., "NT5") and sourcepath.%	startChunk: starting chunk (usually 1)%   endChunk:   ending chunk%   badDataCriteria:  Criteria for detecting bad data.%   badChans:   list of bad channels to exclude from blink detection process.  Will be set to a flat line.%   refChan:    Array of current reference channels.%   butterflyFig:  the handle for the output figure.  Otherwise, will open a new figure.%   graphCounter: the current subplot for the summary figure.%   numGraphs: the total number of subgraphs in the summary figure.%   theSubject: which subject of the file is being processed.%%   The input chunks are EP format data files.%%Outputs%	Saves files with alpha artifact mitigated, replacing the original chunked files.%   outputLog: output messages from noise fixing process%   graphCounter: the current subplot for the summary figure.% History:%% by Joseph Dien (12/11/17)% jdien07@mac.com%% modified 2/4/18 JD% Made subplot specification for summary figure output more flexible.%% modified 4/8/18 JD% Consolidated summary figure for average files so no longer one per subject.% % modified 6/24/19 JD% Accelerates artifact correction by adding option to keep chunks in RAM.% Now excludes global bad channels from summary subplot.% % bugfix 9/13/19 JD% Fixed crash when selecting alpha correction.% Fixed not working correctly when sampling rate not 1000 Hz.% Fixed figure of removed alpha.% % bugfix 3/27/20 JD% Fixed crash.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     Copyright (C) 1999-2025  Joseph Dien%%     This program is free software: you can redistribute it and/or modify%     it under the terms of the GNU General Public License as published by%     the Free Software Foundation, either version 3 of the License, or%     (at your option) any later version.%%     This program is distributed in the hope that it will be useful,%     but WITHOUT ANY WARRANTY; without even the implied warranty of%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the%     GNU General Public License for more details.%%     You should have received a copy of the GNU General Public License%     along with this program.  If not, see <http://www.gnu.org/licenses/>.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%global EPchunk EPtictocoutputLog=[];msg='Removing alpha contamination using CWT-PCA. Wavelet software was provided by C. Torrence and G. Compo, and is available at URL: http://paos.colorado.edu/research/wavelets/';disp(msg);outputLog{1}=msg;badChans = badChans(find(badChans));	%drop out bad channels set as being zerowarning off GLREN:doubleBufferSlow; %Turn off warning message about doublebuffer not available.if ~exist('butterflyFig','var')    butterflyFig=figure('Name','Alpha Contamination Correction','NumberTitle','off');    colormap jet;    standAlone=1;else    standAlone=0;endfor iChunk = startChunk:endChunk    disp([deblank(inFile) '-' num2str(iChunk)]);    if exist('EPchunk','var') && ~isempty(EPchunk)        dataChunk=EPchunk{iChunk};    else        ep_tictoc('ioStart');        eval(['load ''' deblank(inFile) '-' num2str(iChunk) '.mat''']);        ep_tictoc('ioFinish');    end        if length(dataChunk.facNames) > 1        disp('This function is not intended for application to factor data.');        return    end        if length(dataChunk.freqNames) > 1        disp('This function is not intended for application to frequency data.');        return    end    if strcmp(dataChunk.dataType,'continuous')        theSegment = 'one second epoch';    else        theSegment = 'trial';    end        numChans=length(dataChunk.chanNames);    numSubs=length(dataChunk.subNames);    EEGchans=find(strcmp('EEG',dataChunk.chanTypes));    chans = setdiff(EEGchans,badChans);    trialData=dataChunk.data(:,:,:,theSubject);        if strcmp(dataChunk.dataType,'continuous')        displayPeriod=size(dataChunk.data,2);    %Number of timepoints to graph in display.    else        displayPeriod=size(dataChunk.data,2)*size(dataChunk.data,3);    end    decimateSamples=ceil(max(1,displayPeriod/10000));    totalDisplayPeriod=displayPeriod*size(dataChunk.data,4);        if displayPeriod == 1        msg='There is only one time point and so the data cannot be alpha corrected.';        outputLog{end+1}=msg;        disp(' ');        disp('**************************************************************');        disp(msg);        disp('**************************************************************');        disp(' ');        return;    end        if strcmp(dataChunk.dataType,'continuous')        numTrials=1;        trialSize = length(dataChunk.timeNames);    else        trialSize = length(dataChunk.timeNames);        numTrials = length(dataChunk.cellNames);    end        [czChan, theOrder] = ep_findChan(dataChunk.eloc, dataChunk.implicit, dataChunk.chanNames, dataChunk.ced, badChans, 'Cz', dataChunk.montage);    if (czChan ==0) || isempty(czChan)        msg='No good chans so aborting alpha correction.';        outputLog{end+1}=msg;        disp(' ');        disp('**************************************************************');        disp(msg);        disp('**************************************************************');        disp(' ');        return    end    if theOrder > 1        msg=['Cz is a bad channel so instead using channel ' dataChunk.eloc(czChan).labels '.'];    elseif strcmpi(dataChunk.eloc(czChan).labels,'cz')        msg=['Channel Cz identified.'];    else        msg=['Channel ' dataChunk.eloc(czChan).labels ' is assumed to be Cz.'];    end    disp(msg);    outputLog{end+1}=msg;        %rereference to Cz to standardize procedure and since it'll emphasize alpha along the top of the head, where it is of most concern.    refData=zeros(trialSize,numTrials);    for iTrial=1:numTrials        trialData(chans,:,iTrial) = squeeze(trialData(chans,:,iTrial))-repmat(squeeze(trialData(czChan,:,iTrial)),length(chans),1);        refData(:,iTrial)=-squeeze(trialData(czChan,:,iTrial));    end        if standAlone        subplot(3,1,1), plot([1:decimateSamples:displayPeriod],reshape(trialData(chans,1:decimateSamples:displayPeriod,:),chans,[]));        axis([1 displayPeriod -200 200])        set(gca,'XTickLabel','','XTick',[]);        title([deblank(inFile) '-' num2str(iChunk)],'Interpreter','none');    end        N = trialSize;    t = linspace(0,N,N);    dt = round(1000/dataChunk.Fs); %units are in ms        %CWT options    pad = 1; %pad    dj = 0.25; %smaller number gives better resolution, default = 0.25;    so = dt; %default    Jfac = 1; %Sets the maximum scale to compute at (therefore number of scales). 1 is equiv to default.    j1 =  round(Jfac*(log2(N*dt/so))/dj); %default: (log2(N*dt/so))/dj    mother = 'MORLET';    param = 6; %wave number for morlet, see >> help wave_bases for more details        scale=cell(numTrials,length(chans));    paramout=zeros(numTrials,length(chans));    k=cell(numTrials,length(chans));        %compute the CWT    cwtWave=zeros(length(chans),trialSize,numTrials,j1+1);    for iTrial=1:numTrials        ep_tictoc;if EPtictoc.stop;return;end        for iChan=1:length(chans)            theChan=chans(iChan);            [wave, period, scale{iTrial,iChan}, coi, djout, paramout(iTrial,iChan), k{iTrial,iChan}] = contwt(trialData(theChan,:,iTrial),dt, pad, dj, so, j1, mother, param);            cwtWave(iChan,:,iTrial,:)=wave';        end    end        freqs=1000./period; %period is independent of the trial length.  So in terms of dt.        EPdataCWT=dataChunk;    EPdataCWT.data(chans,:,:,1,1,1:j1+1)=cwtWave;    EPdataCWT.freqNames=freqs;        [FactorResults] = ep_doPCA('freq', 'Promax', 3, 'SVD', 'COV', 10, ep_stripAdds(EPdataCWT), 'K');    if isempty(FactorResults)        msg='Alpha extraction failed.';        outputLog{end+1}=msg;        disp(' ');        disp('**************************************************************');        disp(msg);        disp('**************************************************************');        disp(' ');        return    end        clear EPdataCWT;        [M maxFreq]=max(abs(FactorResults.FacPat));        alphaFac = find(ismember(maxFreq,find((freqs>=7.5)&(freqs<=12.5)))); %find freq factors with peak in alpha band        if ~isempty(alphaFac)                [FactorResultsST] = ep_doPCAst(FactorResults, 'Infomax', [], 'SVD', 'COV', 10, 'K', 'spat');        if isempty(FactorResultsST)            msg='Alpha extraction failed.';            outputLog{end+1}=msg;            disp(' ');            disp('**************************************************************');            disp(msg);            disp('**************************************************************');            disp(' ');            return        end                clear FactorResults;                [EPdataPCA] = ep_PCAoutput(FactorResultsST, [], [], 0);                        alphaFac2=kron(alphaFac-1,ones(1,10))*10+repmat([1:10],1,length(alphaFac)); %find spectral-spatial factors with peak in alpha band        alphaWave=zeros(length(chans),trialSize);        alphaCWT=zeros(length(EEGchans),trialSize,j1+1);        subtractedAlpha=zeros(size(trialData));        for iFac=1:length(alphaFac2)            theFac=alphaFac2(iFac);            for iTrial=1:numTrials                for iPoint=1:trialSize                    %alphaCWT(:,iPoint,:)=squeeze(EPdata4.data(:,iPoint,iTrial,1,theFac,1))*EPdata4.facVecF(:,theFac)';                    alphaCWT(:,iPoint,:)=EPdataPCA.facVecS(:,theFac)*squeeze(EPdataPCA.data(1,iPoint,iTrial,1,theFac,1))*EPdataPCA.facVecF(:,theFac)';                end                for iChan=1:length(chans)                    theChan=chans(iChan);                    alphaWave(iChan,:) = squeeze(invcwt(squeeze(alphaCWT(theChan,:,:))', 'Morlet', scale{iTrial,iChan}, paramout(iTrial,iChan), k{iTrial,iChan}));                end                trialData(chans,:,iTrial)=trialData(chans,:,iTrial)-alphaWave;                subtractedAlpha(chans,:,iTrial)=subtractedAlpha(chans,:,iTrial)+alphaWave;            end        end                        %rereference the data.        for iTrial = 1:numTrials            epochTrialData=trialData(:,(iTrial-1)*trialSize+1:iTrial*trialSize);            epochSubtractedAlpha=subtractedAlpha(:,(iTrial-1)*trialSize+1:iTrial*trialSize);            if ~isempty(refChan)                referenceTrialData=mean(epochTrialData(refChan,:),1);                referenceSubtractedAlpha=mean(epochSubtractedAlpha(refChan,:),1);            else                referenceTrialData=refData(:,iTrial)';                referenceSubtractedAlpha=refData(:,iTrial)';            end            for iChan=1:length(chans)                theChan=chans(iChan);                trialData(theChan,(iTrial-1)*trialSize+1:iTrial*trialSize)=epochTrialData(theChan,:)-referenceTrialData;                subtractedAlpha(theChan,(iTrial-1)*trialSize+1:iTrial*trialSize)=epochSubtractedAlpha(theChan,:)-referenceSubtractedAlpha;            end        end                if ~isempty(butterflyFig)            if standAlone                figure(butterflyFig{iChunk});                subplot(3,1,2), plot([1:decimateSamples:displayPeriod],reshape(subtractedAlpha(chans,1:decimateSamples:displayPeriod),length(chans),[]));                title('subtracted alpha','Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);                                subplot(3,1,3), plot([1:decimateSamples:displayPeriod],reshape(trialData(chans,1:decimateSamples:displayPeriod),length(chans),[]));                title('with alpha subtracted','Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);            else                %workaround for weird Matlab 2017b causing it to not recognize the reshape command.                temp=zeros(size(subtractedAlpha,1),size(subtractedAlpha,2)*size(subtractedAlpha,3));                for iTrial=1:numTrials                    temp(:,(iTrial-1)*trialSize+1:iTrial*trialSize)=subtractedAlpha(:,:,iTrial);                end                figure(butterflyFig{iChunk});                theTitle='subtracted alpha';                plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,temp,chans,theSubject);                subplot(numGraphs,1,graphCounter), plot([1:decimateSamples:totalDisplayPeriod],plotData);                title(theTitle,'Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);                                %workaround for weird Matlab 2017b causing it to not recognize the reshape command.                temp2=zeros(size(trialData,1),size(trialData,2)*size(trialData,3));                for iTrial=1:numTrials                    temp2(:,(iTrial-1)*trialSize+1:iTrial*trialSize)=trialData(:,:,iTrial);                end                theTitle='with alpha subtracted';                plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,temp2,chans,theSubject);                subplot(numGraphs,1,graphCounter+1), plot([1:decimateSamples:totalDisplayPeriod],plotData);                title(theTitle,'Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);            end        end                dataChunk.data(:,:,:,theSubject)=trialData;                if exist('EPchunk','var') && ~isempty(EPchunk)            EPchunk{iChunk}=dataChunk;        else            ep_tictoc('ioStart');            eval (['save ''' inFile '-' num2str(iChunk) '.mat'' dataChunk']);            ep_tictoc('ioFinish');        end    else        msg='No components met threshold so no correction performed.';        disp(msg);        outputLog{end+1}=msg;                if ~isempty(butterflyFig)            if standAlone                figure(butterflyFig{iChunk});                subplot(3,1,2), plot([1:decimateSamples:displayPeriod],ones(1,ceil(displayPeriod/decimateSamples)));                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);                subplot(3,1,3), plot([1:decimateSamples:displayPeriod],trialData(chans,1:displayPeriod));                title('no alpha subtracted','Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);            else                figure(butterflyFig{iChunk});                if numSubs > 1                    theTitle='subtracted alpha';                else                    theTitle='no alpha to subtract that were detected';                end                plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,zeros(size(trialData,1),size(trialData,2)*size(trialData,3)),EEGchans,theSubject);                subplot(numGraphs,1,graphCounter), plot([1:decimateSamples:totalDisplayPeriod],plotData);                title(theTitle,'Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);                               if numSubs > 1                    theTitle='with alpha subtracted';                else                    theTitle='no alpha subtracted';                end                temp2=zeros(size(trialData,1),size(trialData,2)*size(trialData,3));                for iTrial=1:numTrials                    temp2(:,(iTrial-1)*trialSize+1:iTrial*trialSize)=trialData(:,:,iTrial);                end                plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,temp2,chans,theSubject);                subplot(numGraphs,1,graphCounter+1), plot([1:decimateSamples:totalDisplayPeriod],plotData);                title(theTitle,'Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);            end        end    end        drawnow        if standAlone        try            MATLABver=ver('MATLAB');            [a b]=strtok(MATLABver.Version,'.');            b=b(2:end);            if ~isprop(butterflyFig,'Number')                eval (['print -f' num2str(butterflyFig{iChunk}) ' -djpeg ''' inFile '''-' num2str(iChunk) 'alpha.jpg']);            else                eval (['print -f' num2str(butterflyFig{iChunk}.Number) ' -djpeg ''' inFile '''-' num2str(iChunk) 'alpha.jpg']);            end        catch            disp('Couldn''t save a copy of the alpha correction figure.  Perhaps your version of Matlab is not current.');        end    endendif standAlone    close(butterflyFig);endif ~isempty(butterflyFig)    graphCounter=graphCounter+2;end