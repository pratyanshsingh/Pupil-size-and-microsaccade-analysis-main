function [outputLog, graphCounter] = ep_fixEMG(inFile, startChunk, endChunk, badDataCriteria, badChans, refChan, butterflyFig, graphCounter, numGraphs, theSubject)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% [outputLog, graphCounter] = ep_fixEMG(inFile, startChunk, endChunk, badDataCriteria, badChans, refChan, butterflyFig, graphCounter, numGraphs, theSubject)%%	Reads in file chunks generated by chunkInputFile function.  It runs a canonical correlation-based%   correction procedure to eliminate EMG activity, basically by identifying activity that is not auto-correlated%   across adjacent time points.%	Function runs through all the files given and outputs them as fixed chunks.%	chunks will still need to be rejoined.%%   De Vos, M., Vos, D. M., Riès, S., Vanderperren, K., Vanrumste, B., Alario, F. X., Van Huffel, S., Huffel, V. S., & Burle, B. (2010). %   Removal of muscle artifacts from EEG recordings of spoken language production. Neuroinformatics, 8(2), 135-150.%%Inputs%	inFile:     filename (not including the .mat suffix or chunk number.  e.g., "NT5") and sourcepath.%	startChunk: starting chunk (usually 1)%   endChunk:   ending chunk%   badDataCriteria:  Criteria for detecting bad data.%       .EMGratio: "ratio of average power (per unit of frequency) in EEG%                    band to average power in the EMG band below which a%                    component will be considered to be EMG-related.%                    Increasing/decreasing this value increases/decreases%                    the amount of correction." (default 9)%       .EMGthresh: "frequency aproximately separating the EEG and EMG bands" (default 15)%   badChans:   list of bad channels to exclude from blink detection process.  Will be set to a flat line.%   refChan:    Array of current reference channels.%   butterflyFig:  the handle for the output figure.  Otherwise, will open a new figure.%   graphCounter: the current subplot for the summary figure.%   numGraphs: the total number of subgraphs in the summary figure.%   theSubject: which subject of the file is being processed.%%   The input chunks are EP format data files.%%Outputs%	Saves files with EMG artifact removed, replacing the original chunked files.%   outputLog: output messages from noise fixing process%   graphCounter: the current subplot for the summary figure.%% History:%% by Joseph Dien (10/4/17)% jdien07@mac.com%% modified 12/15/17 JD% Rereferences to Cz to standardize procedure and then restores original reference afterwards.% Adds an EMG channel to record mean absolute EMG activity removed by the procedure.%% modified 2/4/18 JD% Made subplot specification for summary figure output more flexible.%% bugfix 3/1/18 JD% Fixed EMG correction not creating EMG channel when saccade correction performed and crashing when not performed.%% modified 4/8/18 JD% Consolidated summary figure for average files so no longer one per subject.% % modified 6/24/19 JD% Accelerates artifact correction by adding option to keep chunks in RAM.% Now excludes global bad channels from summary subplot.% % bugfix 3/27/20 JD% Fixed crash.% % bugfix 5/18/20 JD% Modified to accommodate NaN values.% % bugfix 8/24/20 JD% Fixed crash when there are no good time points in a trial.% % bugfix 10/5/20 JD% Fixed crash when there are not enough good time points in a trial.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     Copyright (C) 1999-2025  Joseph Dien%%     This program is free software: you can redistribute it and/or modify%     it under the terms of the GNU General Public License as published by%     the Free Software Foundation, either version 3 of the License, or%     (at your option) any later version.%%     This program is distributed in the hope that it will be useful,%     but WITHOUT ANY WARRANTY; without even the implied warranty of%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the%     GNU General Public License for more details.%%     You should have received a copy of the GNU General Public License%     along with this program.  If not, see <http://www.gnu.org/licenses/>.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%global EPchunk EPtictocmsg='Fixing EMG artifacts using the De Vos et al (2010) BSS-CCA algorithm.';disp(msg);outputLog{1}=msg;badChans = badChans(find(badChans));	%drop out bad channels set as being zerooutputLog=[];count=0;warning off GLREN:doubleBufferSlow; %Turn off warning message about doublebuffer not available.if ~exist('butterflyFig','var')    butterflyFig=figure('Name','EMG Artifact Correction','NumberTitle','off');    colormap jet;    standAlone=1;else    standAlone=0;endfor iChunk = startChunk:endChunk    disp([deblank(inFile) '-' num2str(iChunk)]);    if exist('EPchunk','var') && ~isempty(EPchunk)        dataChunk=EPchunk{iChunk};    else        ep_tictoc('ioStart');        eval(['load ''' deblank(inFile) '-' num2str(iChunk) '.mat''']);        ep_tictoc('ioFinish');    end        if length(dataChunk.facNames) > 1        disp('This function is not intended for application to factor data.');        return    end        if strcmp(dataChunk.dataType,'continuous')        theSegment = 'one second epoch';    else        theSegment = 'trial';    end        numChans=length(dataChunk.chanNames);    numSubs=length(dataChunk.subNames);    EEGchans=find(strcmp('EEG',dataChunk.chanTypes));    chans = setdiff(EEGchans,badChans);    if strcmp(dataChunk.dataType,'continuous')        numTrials=floor(size(dataChunk.data,2)/ceil(dataChunk.Fs)); %excess time points are tacked onto final epoch        contData=dataChunk.data(:,:,:,theSubject);        trialSize = min(ceil(dataChunk.Fs),size(dataChunk.data,2)); %one second epochs    else        numTrials = length(dataChunk.cellNames);        contData=reshape(dataChunk.data(:,:,:,theSubject),numChans,[]);        trialSize = length(dataChunk.timeNames);    end        %rereference to Cz to standardize procedure and since EMG is less likely at the top of the head I think and my intuition suggests EMG at the reference site may not correct as well.    [czChan, theOrder] = ep_findChan(dataChunk.eloc, dataChunk.implicit, dataChunk.chanNames, dataChunk.ced, badChans, 'Cz', dataChunk.montage);    if (czChan ==0) || isempty(czChan)        msg='No good chans so aborting EMG correction.';        outputLog{end+1}=msg;        disp(' ');        disp('**************************************************************');        disp(msg);        disp('**************************************************************');        disp(' ');        return    end    if theOrder > 1        msg=['Cz is a bad channel so instead using channel ' dataChunk.eloc(czChan).labels '.'];    elseif strcmpi(dataChunk.eloc(czChan).labels,'cz')        msg=['Channel Cz identified.'];    else        msg=['Channel ' dataChunk.eloc(czChan).labels ' is assumed to be Cz.'];    end        refData=zeros(1,size(contData,2));    contData(chans,:) = squeeze(contData(chans,:))-repmat(squeeze(contData(czChan,:)),length(chans),1);    refData(1,:)=-squeeze(contData(czChan,:));        subtractedEMG = zeros(size(contData));    if strcmp(dataChunk.dataType,'continuous')        displayPeriod=size(dataChunk.data,2);    %Number of timepoints to graph in display.    else        displayPeriod=size(dataChunk.data,2)*size(dataChunk.data,3);    end    decimateSamples=ceil(max(1,displayPeriod/10000));    totalDisplayPeriod=displayPeriod*size(dataChunk.data,4);        opt.femg=badDataCriteria.EMGthresh;    opt.fs=dataChunk.Fs;    opt.range=[0 floor(size(contData,2)/2)];    opt.ratio=badDataCriteria.EMGratio;        if standAlone        subplot(3,1,1), plot([1:displayPeriod],contData(chans,1:displayPeriod));        axis([1 displayPeriod -200 200])        set(gca,'XTickLabel','','XTick',[]);        title([deblank(inFile) '-' num2str(iChunk)],'Interpreter','none');    end        fprintf('%60s\n',' ' );    for trial =1:numTrials        ep_tictoc;if EPtictoc.stop;return;end        fprintf('%s%-60s',repmat(sprintf('\b'),1,60),sprintf('%s%4d of %4d',['Working on ' theSegment '# '], trial, numTrials))        theData=contData(chans,(trial-1)*trialSize+1:trial*trialSize);        if strcmp(dataChunk.dataType,'continuous') && trial == numTrials            theData=contData(chans,(trial-1)*trialSize+1:end); %excess time points are tacked onto final epoch        end        theData2=theData+(-.001+(.001+.001)*rand(size(theData))); %condition the data        goodPoints=all(~isnan(theData2)); %data needs to be good for all the channels of a sample in chans space.        nonoisedata=nan(size(theData2));        if length(find(goodPoints)) > 2            try                evalc('[ccdata]= compute_cca(theData2(:,goodPoints),opt);');                nonoisedata(:,goodPoints)=ccdata;            catch            end        end        if any(goodPoints) && isreal(nonoisedata)            noisedata=nan(size(theData2));            noisedata(:,goodPoints) = theData(:,goodPoints)-nonoisedata(:,goodPoints);            if any(noisedata)                if strcmp(dataChunk.dataType,'continuous') && trial == numTrials                    contData(chans,(trial-1)*trialSize+1:end) = nonoisedata;                    subtractedEMG(chans,(trial-1)*trialSize+1:end) = noisedata;                else                    contData(chans,(trial-1)*trialSize+1:trial*trialSize) = nonoisedata;                    subtractedEMG(chans,(trial-1)*trialSize+1:trial*trialSize) = noisedata;                end                count=count+1;            end        end    end    fprintf('%60s\n',' ' );        %rereference the data back to what it originally was.    if ~isempty(refChan)        referenceContData=mean(contData(refChan,:),1);        referenceSubtractedEMG=mean(subtractedEMG(refChan,:),1);    else        referenceContData=refData(1,:);        referenceSubtractedEMG=refData(1,:);    end    for iChan=1:length(chans)        theChan=chans(iChan);        contData(theChan,:)=contData(theChan,:)-referenceContData;        subtractedEMG(theChan,:)=subtractedEMG(theChan,:)-referenceSubtractedEMG;    end        if count == 1        msg=['1 ' theSegment ' corrected for EMG activity.'];    else        msg=[num2str(count) ' ' theSegment 's corrected for EMG activity.'];    end    disp(msg);    outputLog{end+1}=msg;        decimateSamples=ceil(max(1,displayPeriod/10000));    if ~isempty(butterflyFig) && ishandle(butterflyFig{iChunk})        if standAlone            figure(butterflyFig{iChunk});            subplot(3,1,2), plot([1:decimateSamples:displayPeriod],subtractedEMG(chans,1:decimateSamples:displayPeriod));            title('subtracted EMG artifacts','Interpreter','none');            axis([1 totalDisplayPeriod -200 200])            set(gca,'XTickLabel','','XTick',[]);                        subplot(3,1,3), plot([1:decimateSamples:displayPeriod],contData(chans,1:decimateSamples:displayPeriod));            title('with EMG artifacts subtracted','Interpreter','none');            axis([1 totalDisplayPeriod -200 200])            set(gca,'XTickLabel','','XTick',[]);        else            figure(butterflyFig{iChunk});            theTitle='subtracted EMG artifacts';            plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,subtractedEMG,chans,theSubject);            subplot(numGraphs,1,graphCounter), plot([1:decimateSamples:totalDisplayPeriod],plotData);            title(theTitle,'Interpreter','none');            axis([1 totalDisplayPeriod -200 200])            set(gca,'XTickLabel','','XTick',[]);                        theTitle='with EMG artifacts subtracted';            plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,contData,chans,theSubject);            subplot(numGraphs,1,graphCounter+1), plot([1:decimateSamples:totalDisplayPeriod],plotData);            title(theTitle,'Interpreter','none');            axis([1 totalDisplayPeriod -200 200])            set(gca,'XTickLabel','','XTick',[]);        end    end        if count == 0        msg='No components met threshold so no correction performed.';        disp(msg);        outputLog{end+1}=msg;                if ~isempty(butterflyFig) && ishandle(butterflyFig{iChunk})            if standAlone                figure(butterflyFig{iChunk});                subplot(3,1,2), plot([1:decimateSamples:displayPeriod],ones(1,ceil(displayPeriod/decimateSamples)));                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);                subplot(3,1,3), plot([1:decimateSamples:displayPeriod],contData(chans,1:decimateSamples:displayPeriod));                title('no EMG artifacts subtracted','Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);            else                figure(butterflyFig{iChunk});                if numSubs > 1                    theTitle='subtracted EMG artifacts';                else                    theTitle='no EMG to subtract that were detected';                end                plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,zeros(size(contData)),chans,theSubject);                subplot(numGraphs,1,graphCounter), plot([1:decimateSamples:totalDisplayPeriod],plotData);                title(theTitle,'Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);                                if numSubs > 1                    theTitle='with EMG artifacts subtracted';                else                    theTitle='no EMG artifacts subtracted';                end                plotData=ep_makePlotData(butterflyFig{iChunk},displayPeriod,totalDisplayPeriod,decimateSamples,theTitle,contData,chans,theSubject);                subplot(numGraphs,1,graphCounter+1), plot([1:decimateSamples:totalDisplayPeriod],plotData);                title(theTitle,'Interpreter','none');                axis([1 totalDisplayPeriod -200 200])                set(gca,'XTickLabel','','XTick',[]);            end        end    end        drawnow        if strcmp(dataChunk.dataType,'continuous')        dataChunk.data(:,:,:,theSubject)=contData;    else        dataChunk.data(:,:,:,theSubject)=reshape(contData,numChans,trialSize,numTrials);    end        EMGChan=find(strcmp('EMG',dataChunk.chanNames));    if isempty(EMGChan)        EPadd.chanNames{1}='EMG';        EPadd.chanTypes{1}='REG';        EPadd.data=zeros(length(EPadd.chanNames),length(dataChunk.timeNames),length(dataChunk.cellNames),length(dataChunk.subNames));        EPadd.data(:,:,:,theSubject)=reshape(mean(abs(subtractedEMG)),1,size(dataChunk.data,2),[]);        if isfield(dataChunk,'interpChans')            interpChans=dataChunk.interpChans;            dataChunk=rmfield(dataChunk,'interpChans'); %remove interpChans temporarily so it doesn't trigger error by checkEPfile.            [dataChunk]=ep_addData(dataChunk,EPadd,'channels');            dataChunk.interpChans=interpChans;        else            [dataChunk]=ep_addData(dataChunk,EPadd,'channels');        end    else        dataChunk.data(EMGChan,:,:,theSubject)=reshape(mean(abs(subtractedEMG)),1,size(dataChunk.data,2),[]);    end    if exist('EPchunk','var') && ~isempty(EPchunk)        EPchunk{iChunk}=dataChunk;    else        ep_tictoc('ioStart');        eval (['save ''' inFile '-' num2str(iChunk) '.mat'' dataChunk']);        ep_tictoc('ioFinish');    end    if standAlone        try            MATLABver=ver('MATLAB');            [a b]=strtok(MATLABver.Version,'.');            b=b(2:end);            if ~isprop(butterflyFig,'Number')                eval (['print -f' num2str(butterflyFig{iChunk}) ' -djpeg ''' inFile '''-' num2str(iChunk) 'EMG.jpg']);            else                eval (['print -f' num2str(butterflyFig{iChunk}.Number) ' -djpeg ''' inFile '''-' num2str(iChunk) 'EMG.jpg']);            end        catch            disp('Couldn''t save a copy of the EMG correction figure.  Perhaps your version of Matlab is not current.');        end    endendif standAlone    close(butterflyFig);endif ~isempty(butterflyFig)    graphCounter=graphCounter+2;end