function EPdataOut=ep_filterData(EPdataIn,cfgFilter, chans)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EPdataOut=ep_filterData(EPdataIn,cfgFilter,chans)% Filters the data according to the provided settings.%%Inputs%   EPdataIn        : Structured array with the data and accompanying information in EP file format.  See readData.%   cfgFilter:  configuration settings%   chans   : Which channels to apply the filtering to.%%Outputs%   EPdataOut        : Structured array with the filtered data and accompanying information in EP file format.  See readData.%% History:%% by Joseph Dien (6/9/14)% jdien07@mac.com%%% modified 7/8/14 JD% Changed filter parameters to allow for full range of FieldTrip filter% settings by using using config as the input variable.%% bugfix 12/12/14 JD% Fixed crash when there is a boundary event at the start of the file.%% bugfix 1/7/14 JD% Fixed crash when there are no boundary events.%% modified 3/16/17 JD% Temporarily mean-center data prior to filtering to minimize filter edge artifact.%% bugfix 6/21/17 JD% Fixed crash when filtering continuous data.%% bugfix 10/18/19 JD% Fixed crash when filter parameters result in unstable filter coefficients.%% bugfix 4/9/23 JD% Fixed returning data unchanged when a data segment is bad and consists of all NaN.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     Copyright (C) 1999-2018  Joseph Dien%%     This program is free software: you can redistribute it and/or modify%     it under the terms of the GNU General Public License as published by%     the Free Software Foundation, either version 3 of the License, or%     (at your option) any later version.%%     This program is distributed in the hope that it will be useful,%     but WITHOUT ANY WARRANTY; without even the implied warranty of%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the%     GNU General Public License for more details.%%     You should have received a copy of the GNU General Public License%     along with this program.  If not, see <http://www.gnu.org/licenses/>.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%EPdataOut=EPdataIn;numChans=length(chans);numPoints=length(EPdataIn.timeNames);numCells=length(unique(EPdataIn.cellNames));numWaves=length(EPdataIn.cellNames);numSubs=length(EPdataIn.subNames);numFreqs=length(EPdataIn.freqNames);numFacs=size(EPdataIn.data,5);if strcmp(EPdataIn.dataType,'continuous')    theSegment = 'continuous segment';else    theSegment = 'trial';end%filter dataif ~isempty(cfgFilter)     if ~isempty(EPdataIn.freqNames)        msg{1}=['Error: The file ' fileName ' is already an FFT file.  Frequency filtering cannot be performed upon it'];        [msg]=ep_errorMsg(msg);        return    end       if strcmp(EPdataIn.dataType,'continuous')        boundaryIndex=find(strcmp('boundary',{EPdataIn.events{1}.value}));        boundarySamples=[EPdataIn.events{1}(boundaryIndex).sample];        if ~isempty(boundarySamples) && boundarySamples(1)==1            boundarySamples=boundarySamples(2:end);            boundaryIndex=boundaryIndex(2:end);        end        numSegments=length(boundaryIndex)+1;        segmentPoints=cell(numSegments,1);        if ~isempty(boundaryIndex)            for iSegment=0:length(boundaryIndex)                if iSegment==0                    segmentPoints{1}=[1:boundarySamples(1)-1];                elseif iSegment==length(boundaryIndex)                    segmentPoints{iSegment+1}=[boundarySamples(end):length(EPdataIn.timeNames)];                else                    segmentPoints{iSegment+1}=[boundarySamples(iSegment):boundarySamples(iSegment+1)-1];                end            end        else            for iSegment=1:numSegments                segmentPoints{iSegment}=[1:length(EPdataIn.timeNames)];            end        end    else        numSegments=numWaves;    end        outputData=zeros(numChans,numPoints,numWaves,numSubs,numFacs);    disp('Using FieldTrip function ft_preprocessing to perform frequency filtering.');    fprintf('%60s\n',' ' );    for iTrial=1:numSegments        fprintf('%s%-60s',repmat(sprintf('\b'),1,60),sprintf('%s%4d of %4d',['Applying FFT to ' theSegment '# '], iTrial, numSegments))        for theSubject=1:numSubs            for theFactor = 1:numFacs                if strcmp(EPdataIn.dataType,'continuous')                    baselineData=mean(EPdataIn.data(chans,segmentPoints{iTrial},1,theSubject,theFactor),2); %filter edge artifacts are exacerbated if the data is not mean centered                    EPdataIn.data(chans,segmentPoints{iTrial},1,theSubject,theFactor)=EPdataIn.data(chans,segmentPoints{iTrial},1,theSubject,theFactor)-repmat(baselineData,1,length(segmentPoints{iTrial}));                    if ~all(isnan(EPdataIn.data(chans,segmentPoints{iTrial},1,theSubject,theFactor)),'all')                        try                            evalc('[filtered] = ft_preprocessing(cfgFilter, ep_ep2ft(ep_selectData(EPdataIn,{chans,segmentPoints{iTrial},[],theSubject,theFactor,[]})));');                        catch                            errmsg=lasterr;                            [msg]=ep_errorMsg(errmsg);                            return                        end                        outputData(:,segmentPoints{iTrial},1,theSubject,theFactor,:) = filtered.trial{1};                        outputData(:,segmentPoints{iTrial},1,theSubject,theFactor)=outputData(:,segmentPoints{iTrial},1,theSubject,theFactor)+repmat(baselineData,1,length(segmentPoints{iTrial})); %undo mean centering                    else                        outputData(:,segmentPoints{iTrial},1,theSubject,theFactor,:) = NaN;                    end                elseif strcmp(EPdataIn.dataType,'average')                    baselineData=mean(EPdataIn.data(chans,:,iTrial,theSubject,theFactor),2); %filter edge artifacts are exacerbated if the data is not mean centered                    EPdataIn.data(chans,:,iTrial,theSubject,theFactor)=EPdataIn.data(chans,:,iTrial,theSubject,theFactor)-repmat(baselineData,1,numPoints);                    EPdataTrial=EPdataIn;                    EPdataTrial.dataType='single_trial'; %kludge since FT preprocessing won't operate on averaged data                    EPdataTrial.trialSpecs=cell(length(EPdataTrial.cellNames),0,0);                    EPdataTrial.trialSpecNames=[];                    EPdataTrial.trialNames=[1:length(EPdataTrial.cellNames)];                    EPselectData=ep_selectData(EPdataTrial,{chans,[],iTrial,theSubject,theFactor,[]});                    if ~all(isnan(EPselectData.data),'all')                        try                            evalc('[filtered] = ft_preprocessing(cfgFilter, ep_ep2ft(EPselectData));');                        catch                            errmsg=lasterr;                            [msg]=ep_errorMsg(errmsg);                            return                        end                        outputData(:,:,iTrial,theSubject,theFactor,:) = filtered.trial{1};                        outputData(:,:,iTrial,theSubject,theFactor)=outputData(:,:,iTrial,theSubject,theFactor)+repmat(baselineData,1,numPoints); %undo mean centering                    else                        outputData(:,:,iTrial,theSubject,theFactor,:) = NaN;                    end                else                    baselineData=mean(EPdataIn.data(chans,:,iTrial,theSubject,theFactor),2); %filter edge artifacts are exacerbated if the data is not mean centered                    EPdataIn.data(chans,:,iTrial,theSubject,theFactor)=EPdataIn.data(chans,:,iTrial,theSubject,theFactor)-repmat(baselineData,1,numPoints);                    if ~all(isnan(EPdataIn.data(chans,:,iTrial,theSubject,theFactor)),'all')                        try                            evalc('[filtered] = ft_preprocessing(cfgFilter, ep_ep2ft(ep_selectData(EPdataIn,{chans,[],iTrial,theSubject,theFactor,[]})));');                        catch                            errmsg=lasterr;                            [msg]=ep_errorMsg(errmsg);                            return                        end                        outputData(:,:,iTrial,theSubject,theFactor,:) = filtered.trial{1};                        outputData(:,:,iTrial,theSubject,theFactor)=outputData(:,:,iTrial,theSubject,theFactor)+repmat(baselineData,1,numPoints); %undo mean centering                    else                        outputData(:,:,iTrial,theSubject,theFactor,:) = NaN;                    end                end            end        end    end    fprintf('%60s\n',' ' );    EPdataOut.data(chans,:,:,:,:)=outputData;end