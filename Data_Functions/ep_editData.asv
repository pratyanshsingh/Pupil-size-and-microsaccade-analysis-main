function ep_editData(varargin)
% ep_editData - ep_editData(varargin) -
% Allows one to examine and edit the structure of the data.
%
%Input:
%  EPdata         : Structured array with the data and accompanying information.  See readData.
%
%   EPoverview     : Structured array with the information for the current overview.
%     .lastData: data prior to last change.  To permit undo.  Structure same as for data.
%     .workData: current working copy of data.  Only made permanent if "save" is chosen.
%     .handles: handles for GUI objects
%        cells.hCellName    :Names of cells (cells)
%        cells.hDeleteCell  :delete button for each cell (cells)
%        cells.hPlusCell    :plus button for each cell (cells)
%        cells.hSubtractCell  :subtract button for each cell (cells)
%        cells.hCombinedCells :The text window for listing the cells to be combined.
%     .combineWeight   :The +/- for each unique cell.
%     .newCellName     :The name for the new cell.
%     .subjects.select  :The subjects that are currently selected.
%
%Output:
%  EPdataset      : Structured array with the data and accompanying information.
%                   See Input.
%  EPoverview     : Structured array with the information for the current analysis.
%                   See Input.

%History
%  by Joseph Dien (3/23/09)
%  jdien07@mac.com
%
%  modified 7/20/09 JD
%  Added ability to reorder cells and to rename cells.
%  Added pages for file overview, subjects, trials, channels, samples, event, and factors.  Most of the data can be edited.
%  Changed global data name from data to EPdataset
%
%  bugfix 9/5/09 JD
%  Location of windows appearing partly off screen on some systems due to offset from having Dock (on Mac) or Task Bar
%  (on PC) at the bottom of the screen.
%
%  bugfix 10/29/09 JD
%  Crash when editing single_trial data with the cells subpane.
%
%  modified 11/6/09 JD
%  Shortened the edit window so that it'll it into smaller monitors.
%
%  bugfix 11/9/09 JD
%  Crash when exporting data from QC and PCA subpanes when using a Matlab version predating 2008.
%
%  bugfix 1/15/10 JD
%  Error when changing ced field in overview subpane of edit pane.
%
%  bugfix 1/29/10 JD
%  Fixed crash when examining QC data on bad channels and trials.
%  Refreshes Edit pane when Done button is pressed so when Data Name is changed, the name in the list of datasets is updated.
%  Fixed crash when adding a cell in the edit pane whose type is 'SGL'.
%
% modified & bugfix 2/27/10 JD
% Changed bad channel field to negative numbers for still bad channels.  Divided QC subpane badChan into badChan and repChan
% subpanes.  Bad channel and rep channel QC figures no longer include bad trials.
% BadChans numbers of QC subpane will now use number of subjects to calculate proportion for grand averages.
% analysis fields no longer optional.
% Fixed crash when adding subject spec.
% Eliminated chantype field for implicit channels.
% Export file dialogs now correctly indicate that the file with be of type .txt.
% Fixed crash when examining factors that include a combined factor add.
%
% modified 5/16/10 JD
% Added summary page to the PCA subpane of the Edit function, including the total variance accounted for information.
%
% bugfix 5/17/10 JD
% Fixed location of the variance accounted for table for old versions of Matlab for two-step PCAs in the Summary
% subpane of the PCA pane.
% Fixed crash when reordering cells.
%
% bugfix 5/23/10 JD
% Fixed assumption that appended files will be in EGIS format.
%
% bugfix 5/27/10 JD
% Fixed baseline control on Samples subpane failing to change baseline value.
%
% modified 6/15/10 JD
% Marks when a file isn't saved yet.
%
% bugfix 7/2/10 JD
% In order fix crash due to Matlab bug on Windows, put in brief pause after spec name requestor diaglog box.
%
% bugfix 8/27/10 JD
% Fixed append cells and append subjects functions not working due to fallacious error messages.
% Fixed append cells and append subjects and append chans crashing when averaged data (typically ept files) contain noise or std information from having run
% the averaging with the Toolkit and the new file is not a factor file.
% Fixed append cells and append subjects and append chans not adding std and noise information from the new file.
% Fixed append cells failing if the files contained trial specs, as in EGIS files.
% Fixed not allowing subject rows to be changeable even when exceeding limits of subject subpane when using a Matlab
% version predating 2008.
%
% bugfix 10/5/10 JD
% Fixed not able to append subjects or cells to data with same names by generating new name.
% Fixed crash when appending cells to non-single trial data.
%
%  modified 10/12/10 JD
%  For continuous files, data now divided into one second epochs and can be artifact rejected in an epochwise fashion
%  in same fashion as segmented data.  Analysis fields reset to zero if sampling rate is changed.
%
%  modified 10/17/10 JD
%  Added support for saccadeTrials and saccadeOnset fields.
%
%  modified 1/17/11 JD
%  When adding combinations of cells or subjects, the name of the new addition describes what went into it.
%
% modified 1/24/12 JD
% Eliminated REF channel type and added reference field to keep track of original and current reference scheme.
%
% bugfix 1/30/12 JD
% Changing Fs also changes time names.
%
% modified 2/22/12 JD
% Noise and std fields no longer optional.  Now set to empty if not used.
%
% modified 4/11/12 JD
% Added support for 6th dimension of frequency. Unlogs frequency data for mean computation.
%
% modified 5/24/12 JD
% Added support for missing data when adding channels, cells, or subjects.
%
% bugfix 5/30/12 JD
% Fixed crash when appending files to data each with just one entry (e.g., appending cells, resulting in two cells)
% and then trying to append additional files.
%
% bugfix 6/1/12 JD
% Fixed QC numbers not being computed correctly.
%
% bugfix 6/6/12 JD
% Fixed changing prestimulus period modified timepoint names relative to prior values rather than absolutely.
%
% modified 7/17/12 JD
% Added option to weight cell combinations by number of trials in averages.
%
% bugfix 8/4/12 JD
% Fixed crash when examining std table of the QC subpane for frequency data.
%
% modified 9/15/12 JD
% Changed Factors tab so not stripping out adds prior to displaying summary table to allow for datasets consisting only of adds.
%
% bugfix 10/16/12 JD
% Fixed crash when changing the sampling rate in the samples subpane.
%
% bugfix 10/18/12 JD
% Fixed timeNames field not being a column vector after changing baseline.
%
% bugfix 10/18/12 JD
% Fixed crash when trimming low end Hz of spectral data.
%
% modified 1/29/13 JD
% Added controls to narrow range in time or frequency domain via ms and freq respectively.
%
% bugfix 2/5/13 JD
% Fixed time names not being calculated correctly when sampling rate changed using Edit function.
%
% bugfix 2/6/13 JD
% Fixed %age of blink, saccade, move, and bad trials in QC subpane being computed incorrectly for average data.
%
% modified 5/9/13 JD
% Added option to the Trials subpane to load a text file to rename the cell names of all the trials.
%
% bugfix 5/23/13 JD
% Fixed Export button on Factors tab not working.
%
% modified 9/16/13 JD
% Modified display to work with 640 pixels high screen.
%
% bugfix 9/17/13 JD
% Fixed overview pane graying out number of factors.
%
% modified 10/9/13 JD
% Added recTime field.  Eliminated offset field from events structure.
%
% bugfix 11/1/13 JD
% Fixes font sizes on Windows.
%
% bugfix 11/7/13 JD
% When channel type is changed to REG, ANS, or ECG, electrode coordinates are set to missing.
%
% bugfix 11/21/13 JD
% Fixed latency of events in Edit function off by 4ms.
%
% bugfix 11/28/13 JD
% Fixed added new subject or cell duplicating existing name resulted in corrupted file.
%
% bugfix 12/24/13 JD
% Fixed crash when adding factors together.
%
% bugfix 1/12/14 JD
% Workaround for Matlab bug periodically causing screen size to register as having zero size.
%
% modified 1/15/14 JD
% Added option to load in new electrode coordinates from Overview subpane.
%
% bugfix 2/27/14 JD
% Fixed subjects subpane of Edit function specifying average subject type as being AVE rather than AVG.
%
% bufix 3/11/14 JD
% Handles decimal sampling rates gracefully.
%
% modified 3/12/14 JD
% Changed MEG channel type to MGA (axial gradiometer) and MGP (planar gradiometer) and MGM (magnetometer)
%
% modified 3/19/14 JD
% Changed uses of "temp" as a variable name to "tempVar" due to other Matlab programmers often using it as a function
% name, resulting in collisions.
% Eliminated noTable option for old versions of Matlab.
%
% bufix 3/19/14 JD
% Fixed crash when editing cells.
% Combining of factors now done as simple addition rather than as averaging and no error if add a factor combination to a PCA file with no combined factors.
% Fixed crash when appending channels.
%
% modified 3/24/14 JD
% Added .cov field.
%
% modified 3/28/14 JD
% When the dataset name has been changed on the Overview page, Edit will ask if the unedited dataset should be kept in addition to the edited version when Done is pressed.
%
% modified 4/14/14 JD
% Added .covNum field.
%
% modified 4/16/14 JD
% Added relNames dimension to data to handle coherence and phase-locking measure.
%
% bufix 5/4/14 JD
% Fixed peak latency of factors expressed as one sample too late.
%
% modified 6/1/14 JD
% Added STS cell type.
%
% bufix 6/22/14 JD
% Fixed Edit function reordering cells in single-trial data when anything clicked or changed in the Cells table and they were not already in alphabetical order.
% Fixed deleting wrong cell of single-trial data when cells were not in alphabetical order.
%
% modified 7/16/14 JD
% Simplified keys code field structure.
%
% bufix 7/30/14 JD
% Fixed crash when reordering subjects.
%
% modified 9/18/14 JD
% Improved exported events text file.
%
% bufix 9/29/14 JD
% Fixed appending subjects not working.
%
% modified 10/16/14 JD
% Passes screen size to ep_readData call.
%
% bufix 10/21/14 JD
% Fixed appending cells really slow.
%
% bufix 10/24/14 JD
% Fixed crash when adding ced electrode coordinates info.
%
% modified 12/4/14 JD
% Added Import Events button to the Events subpane.
%
% bufix 12/9/14 JD
% Fixed crash when changing channel type and not staying changed when
% changing cell type.
%
% bufix 8/17/15 JD
% Fixed choosing Cancel after pressing Overview>Channel Coordinates
% automatically erased channel coordinates.
%
% modified 8/25/15 JD
% Added feature that when electrode coordinates are replaced with new ones,
% the EEG channels will be remapped via interpolation.
%
% bufix & modified 9/4/15 JD
% Fixed channel weight sum not updating when weights changed.
% Tables rearrangeable.
%
% modified 9/4/15 JD
% Added trial specs for average files and averages their contents.
%
% bufix 10/9/15 JD
% Fixed crash in cells tab for single subject average files with no trial
% specs.
%
% modified 11/3/15 JD
% Added Factors subpane now provides both negative and positive peak chans.
%
% bufix 11/3/15 JD
% Fixed crash when changing order of cells.
%
% bufix 1/22/16 JD
% Now doubles amplitude of spectral data when halving the bin size to correct for what it would have been
% and to ensure that subsequent spectral density scaling will be correct.
%
% bufix 2/19/16 JD
% Fixed computation of peak pos and neg channels and peak channel polarity
% in Factors subpane.
%
% bufix 5/5/16 JD
% New button inactive.
%
% modified 8/18/16 JD
% Append subjects can now select multiple files for appending.
%
% modified 11/5/16 JD
% Added support for reading and writing subject spec text files.
%
% bufix 5/19/17 JD
% Fixed cannot delete FID channels using the Edit function.
%
% modified 11/5/16 JD
% Added support for flexible segments.
%
% modified 11/22/17 JD
% Eliminated restrictions on location of CED files.
% Added support for impedances field.
%
% modified 2/11/18 JD
% Added support for stdCM field.
%
% modified 3/13/18 JD
% Added option to double sampling rate in the Samples subpane.
%
% bufix 3/26/18 JD
% Fixed adding erroneous sph field to the eloc structure when making certain types of edits to the channels using the Edit function.
%
% bufix 4/26/18 JD
% Fixed crash when reordering cells of PCA data.
%
% bufix & modified 6/13/18 JD
% Added sort popupmenu for subjects, cells, and trials subpanes.
% Fixed crash when editing contents of trials subpane.
%
% bufix 6/22/18 JD
% When weight value is left empty, defaults to zero rather than NaN.
%
% bufix 7/24/18 JD
% Fixed BadChan QC including regional channels in its computation.
%
% bufix & modified 12/16/18 JD
% Added support for specifying sample rate for text data.
% Fixed crash in trials tab of Edit function.
% Fixed Append subjects only adding the last selected file rather than all of them.
%
% modified 1/14/19 JD
% Added Sort button to Factors subpane.
% Now treats CMB factors like SGL factors on the Factors subpane.
% FacVar and FacVarQ now include CMB factors.
% Various fixes to the Factors table.
% Added Grand button to the Subjects and Cells subpanes.
%
% bufix 3/17/19 JD
% Fixed crash when selecting an event in the Events subpane.
% Added delete button and select and order columns to the Trials subpane.
%
% bufix & modified 4/15/19 JD
% Added support for task level performance measures.
% When appending subjects and renaming duplicate subject names, now uses original name as the stem.
% When editing data, select and weight values are updated appropriately on all the subpanes.  Also a variety of glitches were fixed.
%
% bufix 4/21/19 JD
% Fixed setting weights in Subjects subpane changing them for the Cells subpane instead.
%
% bufix & modified 5/9/19 JD
% Fixed crash when editing subject specs or task names.
% Added support for three-step PCA to PCA pane.
% Added scaled FacPat subpanes.
%
% bugfix 6/6/19 JD
% Fixed crash after adding combined cell and then deleting cells.
%
% modified 7/19/19 JD
% Added column names to the output of export QC info.
%
% bugfix 8/19/19 JD
% Fixed dropping all combined factors when deleting any factors.
% Fixed crash when sorting single-trial data on the cells subpane.
% Fixed export trials including the selection column.
%
% bugfix 10/17/19 JD
% Fixed cannot undo grand function in subjects subpane.
%
% modified 10/19/19 JD
% Added append button to sample subpane.
%
% modified 11/4/19 JD
% Clicking a Select checkbox also changes the weight.
%
% modified 11/4/19 JD
% Added sessNums sessNames fields.
%
% modified 11/29/19 JD
% Enabled reading in Import Trials function of text files with a greater range of variations in character encoding, end-of-line markers, and field separation markers.
%
% modified 12/23/19 JD
% Upgraded support of std information by adding .covAVE and .GAVsubs fields and eliminating .std and .stdCM fields.
%
% bugfix & modified 3/13/20 JD
% Fixed having to reset EPeeg cache after editing dataset in working set that is cached in EPeeg.
% Overview subpane now accommodates files with unknown reference.
% Overview subpane change ced button now properly accomodates channels that have no coordinates or are not EEG data.
% Added new options to the Channels subpane of the Edit function for setting the electrode coordinates of channels and displaying them on a 3D head to assess accuracy.
% The CED button of the Edit function (on both the Overview and the Channels subpanes) has the option to obtain default electode locations for canonical 10-05 channels if no ced file is chosen (with non-matches left blank).
%   If that too is declined, then there is the option to simply delete the electrode information.  If that too is declined then the action is cancelled.
% Uses improved method for co-registering eloc coordinates, based on Oostenveld's Standard-10-5-Cap385.sfp file.
% Added support for BOSC data.
% Fixed problems with selecting and averaging and deleting cells of single-trial data using the Edit function's Cell pane.
% Fixed crash when halving sampling rate and the data includes standard deviations and covariances.
% Fixed weights in Subjects pane not reflecting changes in Sessions pane.
%
% modified 4/13/20 JD
% ep_saveEPdataset now handles replacing existing EPdataset entries.
%
% bugfix & modified 7/25/20 JD
% Fixed crash when using 10-05 column in Channels subpane to add electrode coordinates and there are no implicit channels.
% Fixed crash when using 10-05 column in Channels subpane to add electrode coordinates and there are implicit channels.
% Fixed Save CED button using eloc labels rather than channel names.
% Fixed modifying electrode coordinates instead blanks them.
% Fixed head button displaying eloc labels instead of chanNames for electrode names.
% Removed preference option to rotate electrode coordinates when importing mff or eeglab files that have internal coordinates as no longer needed.
% Fixed crash when using Append Subjects.
%
% bugfix & modified 10/14/20 JD
% Added labels to the factor score table in the PCA subpane of the Edit function.
% Fixed "grand" button of Edit>Subjects subpane not working.
%
% bugfix & modified 10/21/20 JD
% Fixed crash when using the "grand" button of Edit>Subjects subpane and there are missing values in the selected column.
%
% bugfix 12/21/20 JD
% Fixed crash when using the Factors subpane with one-channel data.
%
% bugfix 2/2/21 JD
% Fixed crash when changing channel types.
% Fixed crash in std subpane of QC pane.
%
% modified 2/13/21 JD
% May now resize the Edit Window.
%
% bugfix & modified 3/9/21 JD
% When adding adds, automatic naming not allowing for more than two with the same name stem.
% PCA data can now be represented without factor vector compression.
% Actually fixed crash when using the "grand" button of Edit>Subjects subpane and there are missing values in the selected column.
% Added option to resample data to any arbitrary sampling rate on Samples subpane.
%
% bugfix 3/19/21 JD
% Fixed resampling option not generating quite the right number of samples.
%
% bugfix 5/12/21 JD
% Fixed labels for Factor Scores in PCA subpane in wrong order and added labels to Export function of PCA pane.
%
% bugfix & modified 8/8/21 JD
% Fixed Edit function's CED button on the Overview pane not handling case where remapping all the channels to a new montage.
% Fixed crash when selecting checkbox in Edit function's Cells pane and there are no events in the data.
% Added Specs pane to Edit function.
% Fixed grand popupmenu not working properly for Cells pane of Edit function when the level names have the same length
%   but they do not represent a set of fully-crossed one letter-long level names.
% Added support for canonical 10-05 coordinates in eloc structure.
% Added montage popupmenu to enable specification of montages. 
% 
% modified 10/19/21 JD
% Upgraded history field to provide more information on changes.
% 
% modified 2/22/22 JD
% Added Memory tab
%
% bugfix 3/6/22 JD
% Fixed crash when editing trial specs.
% 
% modified 5/7/22 JD
% Added edit fields to the Trials subpane.
%
% bugfix & modified 7/25/22 JD
% Added support for reading Matlab .mat files.
% Fixed crash when renaming an implicit channel.
% Fixed crash when plotting electrode positions with the Head button and there is a fiducial with the name of Nz or T9 or T10.
% Fixed weights not being reinitialized after deleting channels.
% Fixed names of fiducial channels not being included when saving a CED file.
%
% modified 8/6/22 JD
% Added option to run either SAS or SPSS versions of the Varimax and Promax algorithms.
%
% bugfix 11/29/23 JD
% Fixed crash when clicking New button.
%
% modified & bugfix 5/19/24 JD
% Improved newCED functions to better accommodate different use cases.
% Added Clear and All buttons to the Trials subpane.
% Fixed crash when using the Delete button in the Trials subpane.
% Added color coding for QC and Specs subpanes.
%
% bugfix 7/3/24 JD
% Fixed crash when using 10-05 column.
%
% modified 8/27/24 JD
% Moved files list of History pane to a popupmenu so that the contents can be better inspected.
% Edit pane only asks for closing confirmation when there are unsaved changes.
%
% bugfix 10/4/24 JD
% Fixed crash when opening up older files that have empty History fields.
% Fixed crash when opening up older PCA files that do not have Algorithm fields.
%
% bugfix 11/14/24 JD
% Fixed Edit window going into infinite loop when appearing in a secondary window shorter than the primary one.
% Fixed Edit window immediately opening after Done when just a single file in active set.
% Disabled minimum size for Edit window to accommodate smaller monitors.
%
% modified 12/22/24 JD
% Added option to save channel coordinate files in .sfp format to Save CED button.
% Add Channels can now add an empty channel if none are selected to combine.
% Can now change a normal channel to a fiducial or vice-versa using the Channels pane.
% Added video field.
%
% bugfix 1/27/25 JD
% Fixed crash when editing empty eloc coordinates.
% Fixed crash when making changes in Edit mode and then going to the History tab.
%
% bugfix & modified 4/16/25 JD
% May now select subjects via QC and Specs panes.
% Fixed crash when making deleting subject in Edit mode and then going to the Events tab.
% Added support for virtual grand averages.
% Fixed crash when deleting subject spec and it was the last one.
% Fixed Grand popup menu not handling interspersed grand averages properly.
% Improved Grand popupmenu of Cells pane of Edit function.
% Added Swap button to the Channels subpane of the Edit function.
% Fixed unable to close Edit pane when there is only one dataset in the working set.
%
% bugfix 4/30/25 JD
% Fixed crash when abort button hit and Edit window was not yet open.
% Fixed abort button returning user to the Edit pane instead of the Edit window, resulting in an unstable user interface state.
%
% bugfix 5/26/25 JD
% Fixed virtual cell information bug resulting in later crashes.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     Copyright (C) 1999-2025  Joseph Dien
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

global EPdataset EPoverview EPmain EPtictoc EPeeg

EPtictoc.stop=0;

if isempty(EPoverview) || isempty(EPoverview.mode)
    EPoverview.done=0;
    EPoverview.lastData=[];
    EPoverview.lastGAVsubs=[];
    EPoverview.theLastSpec=1;
    EPoverview.theSpec=1;
    ep_tictoc('begin');
    EPoverview.workData=ep_loadEPdataset(EPoverview.dataset);
    EPoverview.workMeta.GAVsubs=EPoverview.workData.GAVsubs; %save the GAVsubs info so it can be restored and to keep track of which ones are virtual.
    numSubs=length(EPoverview.workData.subNames);
    numVsubs=size(EPoverview.workMeta.GAVsubs,1)-1;
    numRsubs=numSubs-numVsubs;
    %convert virtual GAVEs to normal form so subject specs etc are available.
    try
        EPoverview.workData=ep_combineData(EPoverview.workData,'convert',{[],[],[],[],[],[]},[],[],[]);
    catch ME
        EPoverview.workData=[];
        msg{1}=['Dataset failed to open due to error:' ME.identifier];
        msg{2}=ME.message;
        msg{3}='Please report error to developer.';
        [msg]=ep_errorMsg(msg);
    end
    if EPtictoc.stop;EPtictoc.stop=0;ep_editData('cancel');end
    ep_tictoc('end');
    if isempty(EPoverview) || isempty(EPoverview.workData)
        ep_disableGUI(EPmain.handles.hMainWindow,EPmain.handleList);
        return
    end
    EPoverview.handles = [];
    EPoverview.handles.hEditWindow =[];
    EPoverview.mode='overview';
    EPoverview.QC.mode='avgNum';
    EPoverview.PCA.mode='Summary';
    EPoverview.workMeta.cells.TrlWgts=0;
    EPoverview.highValue='';
    EPoverview.highSign='<=';
    EPoverview.QC.greenComp=1;
    EPoverview.QC.redComp=1;
    EPoverview.QC.greenVal='';
    EPoverview.QC.redVal='';
    EPoverview.specs.greenComp=1;
    EPoverview.specs.redComp=1;
    EPoverview.specs.greenVal='';
    EPoverview.specs.redVal='';
    EPoverview.CEDmenu.montage=EPmain.montageList{end};
    EPoverview.history.fileNames=cell(0);
    if ~isempty(EPoverview.workData.history)
        EPoverview.lastChange=EPoverview.workData.history{end,1}.time;
    else
        EPoverview.lastChange=cell(0);
    end
    EPoverview.coords=[0 0 0 0];
end

numPoints=length(EPoverview.workData.timeNames);
numChans=length(EPoverview.workData.chanNames);
numCells=length(unique(EPoverview.workData.cellNames));
numWaves=length(EPoverview.workData.cellNames);
numSubs=length(EPoverview.workData.subNames);
numVsubs=max(0,size(EPoverview.workMeta.GAVsubs,1)-1);
numRsubs=numSubs-numVsubs;
numVcells=max(0,size(EPoverview.workMeta.GAVsubs,2)-1);
numRcells=numCells-numVcells;
numSubSpecs=length(EPoverview.workData.subjectSpecNames);
numTaskNames=length(EPoverview.workData.taskNames);
numTaskMeas=length(EPoverview.workData.taskMeasNames);
numImplicit=length(EPoverview.workData.implicit);
numFacs=length(EPoverview.workData.facNames);
numFreqs=length(EPoverview.workData.freqNames);
numRels=length(EPoverview.workData.relNames);
numSess=length(EPoverview.workData.sessNames);
numHistory=size(EPoverview.workData.history,1);
if ~isempty(EPoverview.workData.facData)
    numCMBfacs=size(EPoverview.workData.facData,5);
else
    numCMBfacs=0;
end
numSGLfacs=numFacs-numCMBfacs;
refTypes={'REG','AVG','CSD','unknown'};
refLabels={'regular reference','average reference','current source density','unknown'};

if nargin < 1
    numEvents=0;
    EPoverview.workMeta.events.eventIndex=[];
    for iSub=1:numRsubs
        for iWave=1:numWaves
            priorEvents=numEvents;
            eventTrials=length(EPoverview.workData.events{iSub,iWave});
            numEvents=numEvents+eventTrials;
            EPoverview.workMeta.events.eventIndex(priorEvents+1:priorEvents+eventTrials,1)=iSub;
            EPoverview.workMeta.events.eventIndex(priorEvents+1:priorEvents+eventTrials,2)=iWave;
        end
    end
    EPoverview.workMeta.subjects.select=false(numSubs,1);
    EPoverview.workMeta.subjects.weights=zeros(numSubs,1);
    EPoverview.workMeta.channels.select=false(numChans+numImplicit,1);
    EPoverview.workMeta.channels.weights=zeros(numChans+numImplicit,1);
    EPoverview.workMeta.cells.select=false(numCells,1);
    EPoverview.workMeta.cells.weights=zeros(numCells,1);
    EPoverview.workMeta.trials.select=false(numWaves,1);
    EPoverview.workMeta.events.select=false(numEvents,1);
    EPoverview.workMeta.events.weights=zeros(numEvents,1);
    EPoverview.workMeta.factors.select=false(numFacs,1);
    EPoverview.workMeta.factors.weights=zeros(numFacs,1);
    EPoverview.workMeta.sessions.select=false(numSess+1,1);
    EPoverview.workMeta.history.select=false(numHistory,1);
end

if isempty(varargin)
    varargin{1}='start';
end

scrsz = EPmain.scrsz;

topMargin=0;
if isunix && ~ismac
    topMargin=20;
end
if ~isfield(EPoverview,'handles')
    %should not happen but apparently can under unusual circumstances.
    disp('Note: Edit function aborting due to problematic state.')
    ep_editData('cancel');
end
if ~isempty(EPoverview.handles.hEditWindow)
    coords=get(EPoverview.handles.hEditWindow,'Position');
    windowWidth=coords(3);
    windowHeight=coords(4);
else
    windowHeight=min(scrsz(4)-40,700+topMargin);
    windowWidth=min(scrsz(3)-EPmain.panesize(1),700);
end

switch varargin{1}
    case 'start'
        if ~isempty(EPoverview.handles.hEditWindow)
            clf(EPoverview.handles.hEditWindow)
            figure(EPoverview.handles.hEditWindow)
        else
            [err]=ep_checkEPfile(EPoverview.workData);
            if err
                disp('File corrupted or out-of-date');
                return
            end
            % if isempty(findobj('name','editData'))
            h=findobj('name','EditData');
            for i=1:length(h)
                close(h(i))
            end
            % end
            EPoverview.handles.hEditWindow = figure('Name', 'EditData', 'NumberTitle', 'off', 'Position',[scrsz(1)+EPmain.panesize(1) scrsz(4)-windowHeight 700 windowHeight], 'MenuBar', 'none', 'CloseRequestFcn',@closeEdit);
            colormap jet;
            set(EPoverview.handles.hEditWindow,'SizeChangedFcn',@resizeEdit)
        end
        
        
        EPoverview.handles.pane.undo = uicontrol('Style', 'pushbutton', 'String', 'Undo','FontSize',EPmain.fontsize,...
            'Tag','undo',...
            'Position', [20 windowHeight-100-topMargin 60 30], 'Callback', 'ep_editData(''undo'');');
        
        EPoverview.handles.pane.done = uicontrol('Style', 'pushbutton', 'String', 'Done','FontSize',EPmain.fontsize,...
            'Tag','done',...
            'Position', [20 windowHeight-130-topMargin 60 30], 'Callback', 'ep_editData(''done'');');
        
        EPoverview.handles.pane.cancel = uicontrol('Style', 'pushbutton', 'String', 'Cancel','FontSize',EPmain.fontsize,...
            'Tag','cancel',...
            'Position', [20 windowHeight-160-topMargin 60 30], 'Callback', 'ep_editData(''cancel'');');
        
        EPoverview.handles.pane.new = uicontrol('Style', 'pushbutton', 'String', 'New','FontSize',EPmain.fontsize,...
            'Tag','new',...
            'Position', [20 windowHeight-190-topMargin 60 30], 'Callback', 'ep_editData(''new'');');
        
        
        
        EPoverview.handles.pane.overview = uicontrol('Style', 'pushbutton', 'String', 'Overview','FontSize',EPmain.fontsize,...
            'Tag','overview',...
            'Position', [100 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''overview'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.subjects = uicontrol('Style', 'pushbutton', 'String', 'Subjects','FontSize',EPmain.fontsize,...
            'Tag','subjects',...
            'Position', [160 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''subjects'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.cells = uicontrol('Style', 'pushbutton', 'String', 'Cells','FontSize',EPmain.fontsize,...
            'Tag','cells',...
            'Position', [220 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''cells'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.trials = uicontrol('Style', 'pushbutton', 'String', 'Trials','FontSize',EPmain.fontsize,...
            'Tag','trials',...
            'Position', [280 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''trials'';','ep_editData(''start'');']);
        
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            set(EPoverview.handles.pane.trials,'enable','off');
        end
        
        EPoverview.handles.pane.channels = uicontrol('Style', 'pushbutton', 'String', 'Channels','FontSize',EPmain.fontsize,...
            'Tag','channels',...
            'Position', [340 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''channels'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.samples = uicontrol('Style', 'pushbutton', 'String', 'Samples','FontSize',EPmain.fontsize,...
            'Tag','samples',...
            'Position', [400 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''samples'';','ep_editData(''start'');']);
        
        if isempty(EPoverview.workData.timeNames)
            set(EPoverview.handles.pane.samples,'enable','off');
        end
        
        EPoverview.handles.pane.freqs = uicontrol('Style', 'pushbutton', 'String', 'Hz','FontSize',EPmain.fontsize,...
            'Tag','freqs',...
            'Position', [460 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''freqs'';','ep_editData(''start'');']);
        
        if isempty(EPoverview.workData.freqNames)
            set(EPoverview.handles.pane.freqs,'enable','off');
        end
        
        EPoverview.handles.pane.events = uicontrol('Style', 'pushbutton', 'String', 'Events','FontSize',EPmain.fontsize,...
            'Tag','events',...
            'Position', [520 windowHeight-40-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''events'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.factors = uicontrol('Style', 'pushbutton', 'String', 'Factors','FontSize',EPmain.fontsize,...
            'Tag','factors',...
            'Position', [100 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''factors'';','ep_editData(''start'');']);
        
        if isempty(EPoverview.workData.facNames)
            set(EPoverview.handles.pane.factors,'enable','off');
        end
        
        EPoverview.handles.pane.QC = uicontrol('Style', 'pushbutton', 'String', 'QC','FontSize',EPmain.fontsize,...
            'Tag','QC',...
            'Position', [160 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''QC'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.PCA = uicontrol('Style', 'pushbutton', 'String', 'PCA','FontSize',EPmain.fontsize,...
            'Tag','PCA',...
            'Position', [220 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''PCA'';','ep_editData(''start'');']);
        
        if ~isfield(EPoverview.workData.pca,'PCAmode')
            set(EPoverview.handles.pane.PCA,'enable','off');
        end
        
        EPoverview.handles.pane.sessions = uicontrol('Style', 'pushbutton', 'String', 'Sessions','FontSize',EPmain.fontsize,...
            'Tag','sessions',...
            'Position', [280 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''sessions'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.specs = uicontrol('Style', 'pushbutton', 'String', 'Specs','FontSize',EPmain.fontsize,...
            'Tag','specs',...
            'Position', [340 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''specs'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.history = uicontrol('Style', 'pushbutton', 'String', 'History','FontSize',EPmain.fontsize,...
            'Tag','history',...
            'Position', [400 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''history'';','ep_editData(''start'');']);
        
        EPoverview.handles.pane.memory = uicontrol('Style', 'pushbutton', 'String', 'Memory','FontSize',EPmain.fontsize,...
            'Tag','history',...
            'Position', [460 windowHeight-80-topMargin 60 30], 'Callback', ['global EPoverview;','EPoverview.mode=''memory'';','ep_editData(''start'');']);
        
        switch EPoverview.mode
            case 'overview'
                set(EPoverview.handles.pane.overview,'ForegroundColor','blue');
                ep_editData('startOverview');
                
            case 'subjects'
                set(EPoverview.handles.pane.subjects,'ForegroundColor','blue');
                ep_editData('startSubs');
                
            case 'cells'
                set(EPoverview.handles.pane.cells,'ForegroundColor','blue');
                ep_editData('startCells');
                
            case 'trials'
                set(EPoverview.handles.pane.trials,'ForegroundColor','blue');
                ep_editData('startTrials');
                
            case 'channels'
                set(EPoverview.handles.pane.channels,'ForegroundColor','blue');
                ep_editData('startChannels');
                
            case 'samples'
                set(EPoverview.handles.pane.samples,'ForegroundColor','blue');
                ep_editData('startSamples');
                
            case 'freqs'
                set(EPoverview.handles.pane.freqs,'ForegroundColor','blue');
                ep_editData('startFreqs');
                
            case 'events'
                set(EPoverview.handles.pane.events,'ForegroundColor','blue');
                ep_editData('startEvents');
                
            case 'factors'
                set(EPoverview.handles.pane.factors,'ForegroundColor','blue');
                ep_editData('startFactors');
                
            case 'QC'
                set(EPoverview.handles.pane.QC,'ForegroundColor','blue');
                ep_editData('startQC');
                
            case 'PCA'
                set(EPoverview.handles.pane.PCA,'ForegroundColor','blue');
                ep_editData('startPCA');
                
            case 'sessions'
                set(EPoverview.handles.pane.sessions,'ForegroundColor','blue');
                ep_editData('startSess');
                
            case 'specs'
                set(EPoverview.handles.pane.specs,'ForegroundColor','blue');
                ep_editData('startSpecs');
                
            case 'history'
                set(EPoverview.handles.pane.history,'ForegroundColor','blue');
                ep_editData('startHistory');
                
            case 'memory'
                set(EPoverview.handles.pane.memory,'ForegroundColor','blue');
                ep_editData('startMemory');
                
            otherwise
                error('Not a valid mode.');
        end
        
    case 'startOverview'
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Data Name'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-120 150 20]);
        EPoverview.handles.overview.dataName = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.dataName),'FontSize',EPmain.fontsize,...
            'Tag','dataName',...
            'Position',[100 windowHeight-140 150 20],'Callback', ['ep_editData(''renameDataName'');']);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Experiment Name'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-170 150 20]);
        EPoverview.handles.overview.ename = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.ename),'FontSize',EPmain.fontsize,...
            'Tag','ename',...
            'Position',[100 windowHeight-190 150 20],'Callback', ['ep_editData(''renameExp'');']);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Montage'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-220 150 20]);
        theString=ep_montage;
        EPoverview.handles.overview.montage = uicontrol('Style','popupmenu','HorizontalAlignment','left','String', theString,'Value',find(strcmp(EPoverview.workData.montage,theString)),'FontSize',EPmain.fontsize,...
            'Tag','montage',...
            'Position',[100 windowHeight-240 150 20],'Callback', ['ep_editData(''montage'');']);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'File Format'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-270 150 20]);
        EPoverview.handles.overview.fileFormat = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.fileFormat),'FontSize',EPmain.fontsize,...
            'Tag','fileFormat',...
            'Position',[100 windowHeight-290 150 20]);
        
        if strcmp(EPoverview.workData.timeUnits,'per')
            uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of flexible samples'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-320 150 20]);
            EPoverview.handles.overview.Fs = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%g', round(EPoverview.workData.Fs/10)),'FontSize',EPmain.fontsize,...
                'Tag','Fs',...
                'Position',[100 windowHeight-340 150 20],'Callback', ['ep_editData(''Fs'');'],'TooltipString','Changes recorded sampling rate without changing the data by just changing the labels.');
            
            uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Prestimulus Period (percentage)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-370 150 20]);
            EPoverview.handles.overview.baseline = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%g', (100/EPoverview.workData.Fs)*EPoverview.workData.baseline),'FontSize',EPmain.fontsize,...
                'Tag','baseline',...
                'TooltipString','Length of prestimulus recording.  Negative denotes stimulus was prior to start of the epoch.','Position',[100 windowHeight-390 150 20],'Callback', ['ep_editData(''baseline'');']);
        else
            uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Nominal Sampling Rate (Hz)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-320 160 20]);
            EPoverview.handles.overview.Fs = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%g', EPoverview.workData.Fs),'FontSize',EPmain.fontsize,...
                'Tag','Fs',...
                'Position',[100 windowHeight-340 150 20],'Callback', ['ep_editData(''Fs'');'],'TooltipString','Changes recorded sampling rate without changing the data by just changing the labels.');
            
            uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Prestimulus Period (msec)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-370 200 20]);
            EPoverview.handles.overview.baseline = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%g', (1000/EPoverview.workData.Fs)*EPoverview.workData.baseline),'FontSize',EPmain.fontsize,...
                'Tag','baseline',...
                'TooltipString','Length of prestimulus recording.  Negative denotes stimulus was prior to start of the epoch.','Position',[100 windowHeight-390 150 20],'Callback', ['ep_editData(''baseline'');']);
        end
        
        [pathstr, name, ext] = fileparts(EPoverview.workData.fileName);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Original File Name'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-420 150 20]);
        EPoverview.handles.overview.fileName = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', name),'FontSize',EPmain.fontsize,...
            'Tag','fileName',...
            'Position',[100 windowHeight-460 150 40]);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Channels'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-480 150 20]);
        EPoverview.handles.overview.channelsNum= uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.chanNames)),'FontSize',EPmain.fontsize,...
            'Tag','channelsNum',...
            'Position',[100 windowHeight-500 150 20]);
        
        EPoverview.handles.overview.samplesNumLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Samples'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-520 150 20]);
        EPoverview.handles.overview.samplesNum = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.timeNames)),'FontSize',EPmain.fontsize,...
            'Tag','samplesNum',...
            'Position',[100 windowHeight-540 150 20]);
        if isempty(EPoverview.workData.timeNames)
            set(EPoverview.handles.overview.samplesNum,'enable','off');
            set(EPoverview.handles.overview.samplesNumLabel,'enable','off');
        end
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Cells'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-560 150 20]);
        EPoverview.handles.overview.cellsNum = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(unique(EPoverview.workData.cellNames))),'FontSize',EPmain.fontsize,...
            'Tag','cellsNum',...
            'Position',[100 windowHeight-580 150 20]);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Subjects'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-520 150 20]);
        EPoverview.handles.overview.subjectsNum = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.subNames)),'FontSize',EPmain.fontsize,...
            'Tag','subjectsNum',...
            'Position',[300 windowHeight-540 150 20]);
        
        EPoverview.handles.overview.freqsNumLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Hz bands'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-470 150 20]);
        EPoverview.handles.overview.freqsNum = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.freqNames)),'FontSize',EPmain.fontsize,...
            'Tag','freqsNum',...
            'Position',[300 windowHeight-490 150 20]);
        if isempty(EPoverview.workData.freqNames)
            set(EPoverview.handles.overview.freqsNum,'enable','off');
            set(EPoverview.handles.overview.freqsNumLabel,'enable','off');
        end
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Channel Coordinates'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-120 150 20]);
        EPoverview.handles.overview.ced = uicontrol('Style','pushbutton','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.ced),'FontSize',EPmain.fontsize,...
            'Tag','ced',...
            'Position',[300 windowHeight-140 150 20],'Callback', ['ep_editData(''cedmenu'');']);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Data Type'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-170 150 20]);
        EPoverview.handles.overview.dataType = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.dataType),'FontSize',EPmain.fontsize,...
            'Tag','dataType',...
            'Position',[300 windowHeight-190 150 20]);
        
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Reference Type'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-220 150 20]);
        if isempty(EPoverview.workData.reference.type)
            theRef='unknown';
        else
            theRef=EPoverview.workData.reference.type;
        end
        EPoverview.handles.overview.refType = uicontrol('Style','popupmenu','HorizontalAlignment','left','String', refLabels,'Value',find(strcmp(theRef,refTypes)),'FontSize',EPmain.fontsize,...
            'Tag','refType',...
            'Position',[300 windowHeight-240 150 20],'Callback', ['ep_editData(''refType'');']);
        
        refchan1=[];
        refchan2=[];
        if length(EPoverview.workData.reference.original)>0
            refchan1=EPoverview.workData.reference.original(1);
        end
        if length(EPoverview.workData.reference.original)>1
            refchan2=EPoverview.workData.reference.original(2);
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Original Reference Chans'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-270 150 20]);
        EPoverview.handles.overview.origRefChans1 = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', refchan1),'FontSize',EPmain.fontsize,...
            'Tag','origRefChans1',...
            'Position',[300 windowHeight-290 50 20],'Callback', ['ep_editData(''origRefChans1'');']);
        EPoverview.handles.overview.origRefChans2 = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', refchan2),'FontSize',EPmain.fontsize,...
            'Tag','origRefChans2',...
            'Position',[370 windowHeight-290 50 20],'Callback', ['ep_editData(''origRefChans2'');']);
        
        if strcmp(EPoverview.workData.reference.type,'REG')
            refchan1=[];
            refchan2=[];
            if length(EPoverview.workData.reference.current)>0
                refchan1=EPoverview.workData.reference.current(1);
            end
            if length(EPoverview.workData.reference.current)>1
                refchan2=EPoverview.workData.reference.current(2);
            end
            uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Current Reference Chans'),'FontSize',EPmain.fontsize,...
                'Position',[300 windowHeight-320 150 20]);
            EPoverview.handles.overview.currRefChans1 = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', refchan1),'FontSize',EPmain.fontsize,...
                'Tag','currRefChans1',...
                'Position',[300 windowHeight-340 50 20],'Callback', ['ep_editData(''currRefChans1'');']);
            EPoverview.handles.overview.currRefChans2 = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', refchan2),'FontSize',EPmain.fontsize,...
                'Tag','currRefChans2',...
                'Position',[370 windowHeight-340 50 20],'Callback', ['ep_editData(''currRefChans2'');']);
        end
        
        EPoverview.handles.overview.numFacsLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Factors'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-370 150 20]);
        EPoverview.handles.overview.numFacs = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.facNames)),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-390 150 20]);
        if isempty(EPoverview.workData.facNames)
            set(EPoverview.handles.overview.numFacs,'enable','off');
            set(EPoverview.handles.overview.numFacsLabel,'enable','off');
        end
        
        EPoverview.handles.overview.numTrialsLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of Trials'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-420 150 20]);
        EPoverview.handles.overview.numTrials = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.cellNames)),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-440 150 20]);
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            set(EPoverview.handles.overview.numTrials,'enable','off');
            set(EPoverview.handles.overview.numTrialsLabel,'enable','off');
        end
        
        EPoverview.handles.overview.numTrialsLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Type of Data'),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-570 150 20]);
        
        if numFreqs > 1
            if numRels > 1
                if numPoints > 1
                    dataType='Phase Locking';
                else
                    dataType='Coherence';
                end
            else
                if numPoints > 1
                    dataType='Wavelet';
                else
                    dataType='Spectral';
                end
            end
        else
            dataType='voltage';
        end
        
        EPoverview.handles.overview.numTrials = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', dataType),'FontSize',EPmain.fontsize,...
            'Position',[300 windowHeight-590 150 20]);
        
        
    case 'startSubs'
        
        for iSub=1:numSubs
            tableData{iSub,1}=iSub;
            tableData{iSub,2}=EPoverview.workMeta.subjects.select(iSub);
            if ~strcmp(EPoverview.workData.dataType,'single_trial')
                tableData{iSub,3}=EPoverview.workMeta.subjects.weights(iSub);
            end
            tableData{iSub,4}=char(EPoverview.workData.subNames(iSub));
            if ~isempty(EPoverview.workData.sessNums)
                sessNum=EPoverview.workData.sessNums(iSub);
                if sessNum==0
                    theSess='n/a';
                else
                    theSess=EPoverview.workData.sessNames{sessNum};
                end
            else
                theSess='n/a';
            end
            tableData{iSub,5}=theSess;
            tableData{iSub,6}=char(EPoverview.workData.subTypes(iSub));
            if numSubSpecs
                tableData(iSub,7:numSubSpecs+6)=EPoverview.workData.subjectSpecs(iSub,:);
            end
            for iMeas=1:numTaskMeas
                for iTask=1:numTaskNames
                    tableData{iSub,numSubSpecs+6+iTask+((iMeas-1)*numTaskNames)}=num2str(EPoverview.workData.taskSpecs(iSub,iTask,iMeas));
                end
            end
        end
        
        tableNames{1}='order';
        tableNames{2}='select';
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            tableNames{3}='weights';
        end
        tableNames{4}='names';
        tableNames{5}='sessions';
        tableNames{6}='type';
        tableNames(7:length(EPoverview.workData.subjectSpecNames)+6)=EPoverview.workData.subjectSpecNames;
        
        for iMeas=1:numTaskMeas
            for iTask=1:numTaskNames
                tableNames{end+1}=[EPoverview.workData.taskMeasNames{iMeas} '-' EPoverview.workData.taskNames{iTask}];
            end
        end
        
        numNames=size(tableNames,2);
        
        columnEditable =  repmat(true,1,numNames);
        if strcmp(EPoverview.workData.dataType,'single_trial')
            columnEditable(3)=false;
        end
        
        ColumnFormat{1}='numeric';
        ColumnFormat{2}='logical';
        ColumnFormat{3}='numeric';
        ColumnFormat{4}=[];
        if ~isempty(EPoverview.workData.sessNames)
            theFormat={'n/a'};
            theFormat(2:length(EPoverview.workData.sessNames)+1)=EPoverview.workData.sessNames;
        else
            theFormat={'n/a'};
        end
        ColumnFormat{5}=theFormat;
        ColumnFormat{6}={'RAW','AVG','GAV'};
        
        EPoverview.handles.subjects.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
            'RearrangeableColumns','on',...
            'Tag','dataTable',...
            'CellEditCallback',@editSubs,'Position',[100 100 windowWidth-200 windowHeight-220]);

        colorScheme=EPoverview.handles.subjects.dataTable.BackgroundColor;
        for iRow=1:numSubs
            if iRow>numRsubs
                EPoverview.handles.subjects.dataTable.BackgroundColor(iRow,:) = [0 1 1];
            else
                EPoverview.handles.subjects.dataTable.BackgroundColor(iRow,:) = colorScheme(rem(iRow,size(colorScheme,1))+1,:);
            end
        end

        EPoverview.handles.subjects.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','add',...
            'Position', [20 windowHeight-250 60 30], 'Callback', 'ep_editData(''deleteSubs'');');
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            EPoverview.handles.subjects.add = uicontrol('Style', 'pushbutton', 'String', 'Add','FontSize',EPmain.fontsize,...
                'Tag','add',...
                'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''addSubs'');');
        end
        
        tableData=get(EPoverview.handles.subjects.dataTable,'Data');
        weights=cell2mat(tableData([tableData{:,2}],3));
        
        EPoverview.handles.subjects.weightsSum = uicontrol('Style', 'text', 'String', sprintf('%3d',sum(weights)),'FontSize',EPmain.fontsize,...
            'Tag','weightsSum',...
            'Position', [20 windowHeight-310 60 30]);
        EPoverview.handles.subjects.clear = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
            'Tag','clear',...
            'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearSubWeights'');');
        EPoverview.handles.subjects.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
            'Tag','all',...
            'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allSubs'');');
        EPoverview.handles.subjects.append = uicontrol('Style', 'pushbutton', 'String', 'Append','FontSize',EPmain.fontsize,...
            'Tag','append',...
            'Position', [20 windowHeight-430 60 30], 'Callback', 'ep_editData(''appendSubs'');');
        EPoverview.handles.subjects.import = uicontrol('Style', 'pushbutton', 'String', 'Import','FontSize',EPmain.fontsize,...
            'Tag','import',...
            'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''importSubs'');');
        EPoverview.handles.subjects.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
            'Tag','export',...
            'Position', [20 windowHeight-490 60 30], 'Callback', 'ep_editData(''exportSubs'');');
        EPoverview.handles.subjects.addSpec = uicontrol('Style', 'pushbutton', 'String', '+ Spec','FontSize',EPmain.fontsize,...
            'Tag','addSpec',...
            'Position', [20 windowHeight-520 60 30], 'Callback', 'ep_editData(''addSubSpec'');');
        EPoverview.handles.subjects.minusSpec = uicontrol('Style', 'pushbutton', 'String', '- Spec','FontSize',EPmain.fontsize,...
            'Tag','minusSpec',...
            'Position', [20 windowHeight-550 60 30], 'Callback', 'ep_editData(''minusSubSpec'');');
        if isempty(EPoverview.workData.subjectSpecNames)
            set(EPoverview.handles.subjects.minusSpec,'enable','off');
        end
        
        if strcmp(EPoverview.workData.dataType,'average')
            sortString=[tableNames(4:end)';'Sort'];
            EPoverview.handles.subjects.sort = uicontrol('Style', 'popupmenu', 'Value', length(sortString), 'String', sortString, 'FontSize',EPmain.fontsize,...
                'Tag','sort',...
                'Position', [20 windowHeight-580 80 30], 'Callback', 'ep_editData(''sortSubs'');','TooltipString','Sorts the subjects by this spec.');
            
            grandString=[tableNames(4:end)';'Grand'];
            EPoverview.handles.subjects.grand = uicontrol('Style', 'popupmenu', 'Value', length(grandString), 'String', grandString, 'FontSize',EPmain.fontsize,...
                'Tag','grand',...
                'Position', [20 windowHeight-600 80 30], 'Callback', 'ep_editData(''grandSubs'');','TooltipString','Generates grand average subsets based on the values of this spec.');
            
            cellString=[EPoverview.workData.cellNames;'-Cell'];
            EPoverview.handles.subjects.negCell = uicontrol('Style', 'popupmenu', 'Value', length(cellString), 'String', cellString, 'FontSize',EPmain.fontsize,...
                'Tag','negCell',...
                'Position', [20 windowHeight-620 80 30],'TooltipString','When making subject difference waves, subtract this cell of the negative subjects from all the cells of the positive ones.');
             
            cellString=[EPoverview.workData.cellNames;'+Cell'];
            EPoverview.handles.subjects.posCell = uicontrol('Style', 'popupmenu', 'Value', length(cellString), 'String', cellString, 'FontSize',EPmain.fontsize,...
                'Tag','posCell',...
                'Position', [20 windowHeight-640 80 30],'TooltipString','When making subject difference waves, subtract this cell of the positive subjects from all the cells of the negative ones.');
       end
        
    case 'startCells'
        
        [uniqueCells waveOrder m]=unique(EPoverview.workData.cellNames,'stable');
        [nTrials xout] = hist(m,length(uniqueCells));
        
        for iCell=1:numCells %where iCell is the display order
            tableData{iCell,2}=EPoverview.workMeta.cells.select(iCell);
            if ~strcmp(EPoverview.workData.dataType,'single_trial')
                tableData{iCell,1}=iCell;
                tableData{iCell,3}=EPoverview.workMeta.cells.weights(iCell);
            end
            tableData{iCell,4}=char(uniqueCells{iCell});
            if strcmp(EPoverview.workData.dataType,'single_trial')
                tableData{iCell,5}=nTrials(iCell);
            else
                tableData{iCell,5}=char(EPoverview.workData.cellTypes(iCell));
                %if length(EPoverview.workData.subNames)==1
                %if ~isempty(EPoverview.workData.trialSpecs)
                for iSpec=1:length(EPoverview.workData.trialSpecNames)
                    if any(cellfun(@isnumeric,EPoverview.workData.trialSpecs(iCell,iSpec,:)))
                        theNums=[];
                        for iSub=1:numSubs
                            if isnumeric(EPoverview.workData.trialSpecs{iCell,iSpec,iSub}) && ~isempty(EPoverview.workData.trialSpecs{iCell,iSpec,iSub})&& ~isnan(EPoverview.workData.trialSpecs{iCell,iSpec,iSub})
                                theNums(end+1,1)=EPoverview.workData.trialSpecs{iCell,iSpec,iSub};
                            end
                        end
                        tableData{iCell,iSpec+5}=mean(theNums);
                    elseif all(strcmp(EPoverview.workData.trialSpecs(iCell,iSpec,1),EPoverview.workData.trialSpecs(iCell,iSpec,:)))
                        tableData(iCell,iSpec+5)=EPoverview.workData.trialSpecs(iCell,iSpec,1);
                    else
                        tableData{iCell,iSpec+5}='';
                    end
                end
                %end
                %end
            end
        end
        
        tableNames{2}='select';
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            tableNames{1}='order';
            tableNames{3}='weights';
        end
        tableNames{4}='names';
        if strcmp(EPoverview.workData.dataType,'single_trial')
            tableNames{5}='trials';
        else
            tableNames{5}='types';
            tableNames(6:length(EPoverview.workData.trialSpecNames)+5)=EPoverview.workData.trialSpecNames;
        end
        
        columnEditable =  true(1,5);
        ColumnFormat{1}='numeric';
        ColumnFormat{2}='logical';
        ColumnFormat{3}='numeric';
        ColumnFormat{4}=[];
        if strcmp(EPoverview.workData.dataType,'single_trial')
            ColumnFormat{5}=[];
            columnEditable(1)=false;
            columnEditable(3)=false;
            columnEditable(5)=false;
        else
            ColumnFormat{5}={'SGL','CMB','STS'};
            columnEditable(5)=true;
            ColumnFormat(6:length(EPoverview.workData.trialSpecNames)+5)=cell(1,length(EPoverview.workData.trialSpecNames));
            if isscalar(EPoverview.workData.subNames)
                columnEditable(6:length(EPoverview.workData.trialSpecNames)+5)=true;
            else
                columnEditable(6:length(EPoverview.workData.trialSpecNames)+5)=false;
            end
        end
        
        EPoverview.handles.cells.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
            'RearrangeableColumns','on',...
            'Tag','dataTable',...
            'CellEditCallback',@editCells,'Position',[100 100 windowWidth-200 windowHeight-220]);

        colorScheme=EPoverview.handles.cells.dataTable.BackgroundColor;
        for iRow=1:numCells
            if iRow>numRcells
                EPoverview.handles.cells.dataTable.BackgroundColor(iRow,:) = [0 1 1];
            else
                EPoverview.handles.cells.dataTable.BackgroundColor(iRow,:) = colorScheme(rem(iRow,size(colorScheme,1))+1,:);
            end
        end

        
        EPoverview.handles.cells.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-250 60 30], 'Callback', 'ep_editData(''deleteCells'');');
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            EPoverview.handles.cells.add = uicontrol('Style', 'pushbutton', 'String', 'Add','FontSize',EPmain.fontsize,...
                'Tag','add',...
                'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''addCells'');');
            
            tableData=get(EPoverview.handles.cells.dataTable,'Data');
            weights=cell2mat(tableData([tableData{:,2}],3));
            
            EPoverview.handles.cells.hWeights = uicontrol('Style', 'text', 'String', sprintf('%3.2f',sum(weights)),'FontSize',EPmain.fontsize,...
                'Position', [20 windowHeight-310 60 30]);
            EPoverview.handles.cells.trialWeights = uicontrol('Style', 'checkbox', 'String', 'TrlWgts', 'Value',EPoverview.workMeta.cells.TrlWgts,'FontSize',EPmain.fontsize,...
                'Tag','trialWeights',...
                'Position', [20 windowHeight-340 70 30], 'Callback', 'EPoverview.workMeta.cells.TrlWgts=get(EPoverview.handles.cells.hTrialWeights,''Value'');','FontSize',EPmain.fontsize,...
                'TooltipString','Weight by number of trials in average if available.');
        else
            EPoverview.handles.cells.add = uicontrol('Style', 'pushbutton', 'String', 'Average','FontSize',EPmain.fontsize,...
                'Tag','add',...
                'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''addTrials'');');
        end
        EPoverview.handles.cells.delete = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearCellWeights'');');
        EPoverview.handles.cells.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
            'Tag','all',...
            'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allCells'');');
        EPoverview.handles.cells.append = uicontrol('Style', 'pushbutton', 'String', 'Append','FontSize',EPmain.fontsize,...
            'Tag','append',...
            'Position', [20 windowHeight-430 60 30], 'Callback', 'ep_editData(''appendCells'');');
        
%         if strcmp(EPoverview.workData.dataType,'average')
%             EPoverview.handles.cells.hImport = uicontrol('Style', 'pushbutton', 'String', 'Import','FontSize',EPmain.fontsize,...
%                 'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''importCells'');');
%             EPoverview.handles.cells.hExport = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
%                 'Position', [20 windowHeight-490 60 30], 'Callback', 'ep_editData(''exportCells'');');
%             EPoverview.handles.cells.addSpec = uicontrol('Style', 'pushbutton', 'String', '+ Spec','FontSize',EPmain.fontsize,...
%                 'Position', [20 windowHeight-520 60 30], 'Callback', 'ep_editData(''addCellSpec'');');
%             EPoverview.handles.cells.minusSpec = uicontrol('Style', 'pushbutton', 'String', '- Spec','FontSize',EPmain.fontsize,...
%                 'Position', [20 windowHeight-550 60 30], 'Callback', 'ep_editData(''minusCellSpec'');');
%         end
        
        if strcmp(EPoverview.workData.dataType,'average')
            if strcmp(EPoverview.workData.dataType,'average') && (isscalar(EPoverview.workData.subNames)) && ~isempty(EPoverview.workData.trialSpecNames)
                sortString=[EPoverview.workData.trialSpecNames;'Names';'Sort'];
            else
                sortString={'Names';'Sort'};
            end
            EPoverview.handles.cells.sort = uicontrol('Style', 'popupmenu', 'Value', length(sortString), 'String', sortString, 'FontSize',EPmain.fontsize,...
                'Tag','sort',...
                'Position', [20 windowHeight-580 80 30], 'Callback', 'ep_editData(''sortCells'');');

            grandString=[tableNames(4:end)';'Grand'];
            EPoverview.handles.cells.grand = uicontrol('Style', 'popupmenu', 'Value', length(grandString), 'String', grandString, 'FontSize',EPmain.fontsize,...
                'Tag','grand',...
                'Position', [20 windowHeight-600 80 30], 'Callback', 'ep_editData(''grandCells'');');
        end

    case 'startTrials'
        
        tableData=cell(numWaves,length(EPoverview.workData.trialSpecNames)+10);
        for iTrial=1:numWaves
            tableData{iTrial,1}=iTrial;
            tableData{iTrial,2}=EPoverview.workMeta.trials.select(iTrial);
        end
        tableData(:,3)=EPoverview.workData.cellNames;
        tableData(:,4)=num2cell(EPoverview.workData.trialNames);
        tableData(:,5)=num2cell(EPoverview.workData.recTime);
        tableData(:,6)=num2cell(EPoverview.workData.analysis.blinkTrial);
        tableData(:,7)=num2cell(EPoverview.workData.analysis.saccadeTrial);
        tableData(:,8)=num2cell(EPoverview.workData.analysis.saccadeOnset);
        tableData(:,9)=num2cell(EPoverview.workData.analysis.moveTrial);
        tableData(:,10)=num2cell(EPoverview.workData.analysis.badTrials);
        tableData(:,11:length(EPoverview.workData.trialSpecNames)+10)=EPoverview.workData.trialSpecs;
        
        tableNames{1}='order';
        tableNames{2}='select';
        tableNames{3}='cell';
        tableNames{4}='trial';
        tableNames{5}='time';
        tableNames{6}='blink';
        tableNames{7}='saccade';
        tableNames{8}='sacOnset';
        tableNames{9}='move';
        tableNames{10}='bad';
        tableNames(11:length(EPoverview.workData.trialSpecNames)+10)=EPoverview.workData.trialSpecNames;
        
        columneditable =  repmat(true,1,length(EPoverview.workData.trialSpecNames)+10);
        
        EPoverview.handles.trials.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columneditable,...
            'RearrangeableColumns','on',...
            'Tag','dataTable',...
            'CellEditCallback',@editTrials,'Position',[100 100 windowWidth-200 windowHeight-220]);
        
        colorScheme=EPoverview.handles.trials.dataTable.BackgroundColor;
        for iRow=1:numWaves
            if iRow>numWaves-numVcells
                EPoverview.handles.trials.dataTable.BackgroundColor(iRow,:) = [0 1 1];
            else
                EPoverview.handles.trials.dataTable.BackgroundColor(iRow,:) = colorScheme(rem(iRow,size(colorScheme,1))+1,:);
            end
        end

        EPoverview.handles.trials.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-250 60 30], 'Callback', 'ep_editData(''deleteTrials'');');
        
        EPoverview.handles.trials.clear = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
            'Tag','clear',...
            'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearTrials'');');

        EPoverview.handles.trials.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
            'Tag','all',...
            'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allTrials'');');

        EPoverview.handles.trials.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
            'Tag','export',...
            'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''exportTrials'');');
        
        EPoverview.handles.trials.import = uicontrol('Style', 'pushbutton', 'String', 'Import','FontSize',EPmain.fontsize,...
            'Position', [20 windowHeight-490 60 30], 'Callback', 'ep_editData(''importTrials'');',...
            'Tag','import',...
            'TooltipString','Load in text file with new  cell names for trials');
        
        sortString=[tableNames';'Sort'];
        EPoverview.handles.trials.sort = uicontrol('Style', 'popupmenu', 'Value', length(sortString), 'String', sortString, 'FontSize',EPmain.fontsize,...
            'Tag','sort',...
            'Position', [20 windowHeight-580 80 30], 'Callback', 'ep_editData(''sortTrials'');');
        
    case 'startChannels'
        tableData=cell(numChans+numImplicit,9);
        for iChan=1:numChans
            tableData{iChan,1}=iChan;
            tableData{iChan,2}=EPoverview.workMeta.channels.select(iChan);
            tableData{iChan,3}=EPoverview.workMeta.channels.weights(iChan);
            tableData{iChan,4}=char(EPoverview.workData.chanNames{iChan});
            tableData{iChan,5}=char(EPoverview.workData.chanTypes{iChan});
            if ~isempty(EPoverview.workData.eloc)
                tableData{iChan,6}=EPoverview.workData.eloc(iChan).X;
                tableData{iChan,7}=EPoverview.workData.eloc(iChan).Y;
                tableData{iChan,8}=EPoverview.workData.eloc(iChan).Z;
            end
            tableData{iChan,9}='--';
        end
        
        for iChan=1:numImplicit
            tableData{iChan+numChans,1}=iChan+numChans;
            tableData{iChan+numChans,2}=EPoverview.workMeta.channels.select(iChan+numChans);
            tableData{iChan+numChans,3}=EPoverview.workMeta.channels.weights(iChan+numChans);
            tableData{iChan+numChans,4}=char(EPoverview.workData.implicit(iChan).labels);
            tableData{iChan+numChans,5}=char(EPoverview.workData.implicit(iChan).type);
            if ~isempty(EPoverview.workData.eloc)
                tableData{iChan+numChans,6}=EPoverview.workData.implicit(iChan).X;
                tableData{iChan+numChans,7}=EPoverview.workData.implicit(iChan).Y;
                tableData{iChan+numChans,8}=EPoverview.workData.implicit(iChan).Z;
            end
            tableData{iChan+numChans,9}='--';
        end
        
        tableNames{1}='order';
        tableNames{2}='select';
        tableNames{3}='weights';
        tableNames{4}='Name';
        tableNames{5}='Type';
        tableNames{6}='elocX';
        tableNames{7}='elocY';
        tableNames{8}='elocZ';
        tableNames{9}='10-05';
        
        [chanTypes, chanModes, chanRegs]=ep_chanTypes;
        chanTypes=[chanTypes;'FID'];
        [theHeader, sfpData, theDelim] = ep_textScan(which('Standard-10-5-Cap385.sfp'),1);
        ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if isempty(sfpData)
            names1005='n/a';
        else
            names1005=['--'; 'LHEOG'; 'RHEOG'; 'LUVEOG'; 'RUVEOG'; 'LLVEOG'; 'RLVEOG'; sfpData(:,1)]';
        end
        
        columnEditable =  [repmat(true,1,9)];
        ColumnFormat{1}='numeric';
        ColumnFormat{2}='logical';
        ColumnFormat{3}='numeric';
        ColumnFormat{4}=[];
        chanTypeList=unique([chanTypes;chanRegs]);
        chanTypeList=chanTypeList(~cellfun(@isempty,chanTypeList))';
        ColumnFormat{5}=chanTypeList;
        ColumnFormat{6}='numeric';
        ColumnFormat{7}='numeric';
        ColumnFormat{8}='numeric';
        ColumnFormat{8}='numeric';
        ColumnFormat{9}=names1005;
        
        if ~isempty(EPoverview.workData.impedances.channels)
            tableNames{10}='impedance';
            ColumnFormat{10}='numeric';
            columnEditable(10)=true;
            for i=1:numChans
                tableData{i,10}=mean(EPoverview.workData.impedances.channels(i,:),2,'omitnan');
            end
        end
        
        EPoverview.handles.channels.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
            'RearrangeableColumns','on',...
            'Tag','dataTable',...
            'CellEditCallback',@editChannels,'Position',[100 100 windowWidth-200 windowHeight-220]);
        
        EPoverview.handles.channels.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-250 60 30], 'Callback', 'ep_editData(''deleteChans'');');
        EPoverview.handles.channels.add = uicontrol('Style', 'pushbutton', 'String', 'Add','FontSize',EPmain.fontsize,...
            'Tag','add',...
            'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''addChans'');');
        
        tableData=get(EPoverview.handles.channels.dataTable,'Data');
        weights=cell2mat(tableData([tableData{:,2}],3));
        
        EPoverview.handles.channels.weights = uicontrol('Style', 'text', 'String', sprintf('%3.2f',sum(weights)),'FontSize',EPmain.fontsize,...
            'Tag','weights',...
            'Position', [20 windowHeight-310 60 30]);
        EPoverview.handles.channels.swap = uicontrol('Style', 'pushbutton', 'String', 'Swap','FontSize',EPmain.fontsize,...
            'Tag','clear',...
            'Position', [20 windowHeight-340 60 30], 'Callback', 'ep_editData(''swapChans'');');
        EPoverview.handles.channels.clear = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
            'Tag','clear',...
            'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearChanWeights'');');
        EPoverview.handles.channels.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
            'Tag','all',...
            'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allChans'');');
        EPoverview.handles.channels.append = uicontrol('Style', 'pushbutton', 'String', 'Append','FontSize',EPmain.fontsize,...
            'Tag','append',...
            'Position', [20 windowHeight-430 60 30], 'Callback', 'ep_editData(''appendChans'');');
        EPoverview.handles.channels.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
            'Tag','export',...
            'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''exportChans'');');
        EPoverview.handles.channels.CEDin = uicontrol('Style', 'pushbutton', 'String', 'New CED','FontSize',EPmain.fontsize,...
            'Tag','CEDin',...
            'Position', [20 windowHeight-490 60 30], 'Callback', 'ep_editData(''cedmenu'');');
        EPoverview.handles.channels.CEDout = uicontrol('Style', 'pushbutton', 'String', 'Save CED','FontSize',EPmain.fontsize,...
            'Tag','CEDout',...
            'Position', [20 windowHeight-520 60 30], 'Callback', 'ep_editData(''saveCED'');');
        EPoverview.handles.channels.head = uicontrol('Style', 'pushbutton', 'String', 'Head','FontSize',EPmain.fontsize,...
            'Tag','head',...
            'Position', [20 windowHeight-550 60 30], 'Callback', 'ep_editData(''headCED'');');
        
    case 'startSamples'
        
        if strcmp(EPoverview.workData.timeUnits,'per')
            uicontrol('Style', 'text', 'String', '%','FontSize',EPmain.fontsize,...
                'Position', [100 windowHeight-120 60 15],'HorizontalAlignment','left');
        else
            uicontrol('Style', 'text', 'String', 'Ms','FontSize',EPmain.fontsize,...
                'Position', [100 windowHeight-120 60 15],'HorizontalAlignment','left');
        end
        uicontrol('Style', 'text', 'String', 'Samples','FontSize',EPmain.fontsize,...
            'Position', [100 windowHeight-145 60 15],'HorizontalAlignment','left');
        
        theNumber=EPoverview.workData.timeNames(1);
        if ceil(theNumber)==theNumber
            theString=sprintf('%d', theNumber);
        else
            theString=sprintf('%f', theNumber);
        end
        EPoverview.handles.samples.startMs = uicontrol('Style','edit','HorizontalAlignment','left','String', theString,'FontSize',EPmain.fontsize,...
            'Tag','startMs',...
            'Position',[200 windowHeight-120 100 25],'Callback', ['ep_editData(''changeStartMs'');'],'TooltipString','msec of first sample onset');
        
        theNumber=EPoverview.workData.timeNames(end)+(1000/EPoverview.workData.Fs);
        if ceil(theNumber)==theNumber
            theString=sprintf('%d', theNumber);
        else
            theString=sprintf('%f', theNumber);
        end
        EPoverview.handles.samples.endMs = uicontrol('Style','edit','HorizontalAlignment','left','String', theString,'FontSize',EPmain.fontsize,...
            'Tag','endMs',...
            'Position',[350 windowHeight-120 100 25],'Callback', ['ep_editData(''changeEndMs'');'],'TooltipString','msec of last sample offset');
        
        EPoverview.handles.samples.startSamp = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', 1),'FontSize',EPmain.fontsize,...
             'Tag','startSamp',...
           'Position',[200 windowHeight-145 100 25],'Callback', ['ep_editData(''changeStartSamp'');']);
        EPoverview.handles.samples.endSamp = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.timeNames)),'FontSize',EPmain.fontsize,...
            'Tag','endSamp',...
            'Position',[350 windowHeight-145 100 25],'Callback', ['ep_editData(''changeEndSamp'');']);
        
        if strcmp(EPoverview.workData.timeUnits,'per')
            EPoverview.handles.samples.hFsLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Number of flexible samples'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-270 150 20]);
            EPoverview.handles.samples.Fs = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', round(EPoverview.workData.Fs/10)),'FontSize',EPmain.fontsize,...
                'Tag','Fs',...
                'Position',[100 windowHeight-290 150 20],'Callback', ['ep_editData(''Fs'');'],'TooltipString','Changes recorded sampling rate without changing the data by just changing the labels.');
            
            EPoverview.handles.samples.hBaselineLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Prestimulus period (percentage)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-320 200 20]);
            
            EPoverview.handles.samples.baseline = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', (100/EPoverview.workData.Fs)*EPoverview.workData.baseline),'FontSize',EPmain.fontsize,...
                'Tag','baseline',...
                'TooltipString','Length of prestimulus recording.  Negative denotes stimulus was prior to start of the epoch.','Position',[100 windowHeight-340 150 20],'Callback', ['ep_editData(''baseline'');']);
        else
            EPoverview.handles.samples.FsLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Nominal Sampling Rate (Hz)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-270 160 20]);
            EPoverview.handles.samples.Fs = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', EPoverview.workData.Fs),'FontSize',EPmain.fontsize,...
                'Tag','Fs',...
                'Position',[100 windowHeight-290 150 20],'Callback', ['ep_editData(''Fs'');'],'TooltipString','Changes recorded sampling rate without changing the data by just changing the labels.');
            
            EPoverview.handles.samples.hBaselineLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Prestimulus period (msec)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-320 200 20]);
            
            EPoverview.handles.samples.baseline = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%g', (1000/EPoverview.workData.Fs)*EPoverview.workData.baseline),'FontSize',EPmain.fontsize,...
                'Tag','baseline',...
                'TooltipString','Length of prestimulus recording.  Negative denotes stimulus was prior to start of the epoch.','Position',[100 windowHeight-340 150 20],'Callback', ['ep_editData(''baseline'');']);
            
            EPoverview.handles.samples.FsResample = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Resample Data (Hz)'),'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-360 160 20]);
            EPoverview.handles.samples.FsResample = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%g', EPoverview.workData.Fs),'FontSize',EPmain.fontsize,...
                'Tag','FsResample',...
                'Position',[100 windowHeight-380 150 20],'Callback', ['ep_editData(''ResampleData'');'],'TooltipString','Changes data sampling rate via interpolation.');
            
        end
        
        EPoverview.handles.samples.halfRate = uicontrol('Style', 'pushbutton', 'String', '1/2 Rate','FontSize',EPmain.fontsize,...
            'Tag','halfRate',...
            'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''halfRate'');','TooltipString','Halves the effective sampling rate by merging adjoining time points.');
        EPoverview.handles.samples.doubleRate = uicontrol('Style', 'pushbutton', 'String', '2x Rate','FontSize',EPmain.fontsize,...
            'Tag','doubleRate',...
            'Position', [20 windowHeight-310 60 30], 'Callback', 'ep_editData(''twiceRate'');','TooltipString','Doubles the effective sampling rate by interpolating between time points.');
        EPoverview.handles.samples.append = uicontrol('Style', 'pushbutton', 'String', 'Append','FontSize',EPmain.fontsize,...
            'Tag','append',...
            'Position', [20 windowHeight-430 60 30], 'Callback', 'ep_editData(''appendSamples'');');
        
    case 'startFreqs'
        
        uicontrol('Style', 'text', 'String', 'Hz','FontSize',EPmain.fontsize,...
            'Position', [100 windowHeight-120 60 15],'HorizontalAlignment','left');
        uicontrol('Style', 'text', 'String', 'Bins','FontSize',EPmain.fontsize,...
            'Position', [100 windowHeight-145 60 15],'HorizontalAlignment','left');
        
        
        EPoverview.handles.freqs.startFreq = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', EPoverview.workData.freqNames(1)),'FontSize',EPmain.fontsize,...
            'Tag','startFreq',...
            'Position',[200 windowHeight-120 100 25],'Callback', ['ep_editData(''changeStartFreq'');']);
        EPoverview.handles.freqs.endFreq = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', EPoverview.workData.freqNames(end)),'FontSize',EPmain.fontsize,...
            'Tag','endFreq',...
            'Position',[350 windowHeight-120 100 25],'Callback', ['ep_editData(''changeEndFreq'');']);
        
        EPoverview.handles.freqs.startBin = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', 1),'FontSize',EPmain.fontsize,...
            'Tag','startBin',...
            'Position',[200 windowHeight-145 100 25],'Callback', ['ep_editData(''changeStartBin'');']);
        EPoverview.handles.freqs.endBin = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', length(EPoverview.workData.freqNames)),'FontSize',EPmain.fontsize,...
            'Tag','endBin',...
            'Position',[350 windowHeight-145 100 25],'Callback', ['ep_editData(''changeEndBin'');']);
        
        EPoverview.handles.freqs.binningLabel = uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Binning (Hz)'),'FontSize',EPmain.fontsize,...
            'Position',[100 windowHeight-270 150 20]);
        EPoverview.handles.freqs.binning = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%d', EPoverview.workData.freqNames(2)-EPoverview.workData.freqNames(1)),'FontSize',EPmain.fontsize,...
            'Tag','binning',...
            'Position',[100 windowHeight-290 150 20],'Callback', ['ep_editData(''Binning'');'],'TooltipString','Changes recorded frequency bin size without changing the data by just changing the labels.');
        
        EPoverview.handles.freqs.halfBinning = uicontrol('Style', 'pushbutton', 'String', '1/2 Binning','FontSize',EPmain.fontsize,...
            'Tag','halfBinning',...
            'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''halfBinning'');','TooltipString','Halves the effective frequency binning by merging adjoining frequency bins.');
        
    case 'startEvents'
        
        keyNames=cell(0);
        tableData=[];
        eventCounter=0;
        if strcmp(EPoverview.workData.dataType,'single_trial')
            trialCol=1;
        else
            trialCol=0;
        end
        for subject=1:numRsubs
            for wave=1:numWaves
                for event=1:length(EPoverview.workData.events{subject,wave})
                    eventCounter=eventCounter+1;
                    tableData{eventCounter,1}=EPoverview.workMeta.events.select(eventCounter);
                    tableData{eventCounter,2}=EPoverview.workData.cellNames{wave};
                    if strcmp(EPoverview.workData.dataType,'single_trial')
                        tableData{eventCounter,3}=EPoverview.workData.trialNames(wave);
                    end
                    tableData{eventCounter,3+trialCol}=EPoverview.workData.subNames{subject};
                    tableData{eventCounter,4+trialCol}=event;
                    tableData{eventCounter,5+trialCol}=EPoverview.workData.events{subject,wave}(event).type;
                    tableData{eventCounter,6+trialCol}=EPoverview.workData.events{subject,wave}(event).sample;
                    tableData{eventCounter,7+trialCol}=EPoverview.workData.events{subject,wave}(event).value;
                    tableData{eventCounter,8+trialCol}=(EPoverview.workData.events{subject,wave}(event).sample-EPoverview.workData.baseline-1)*(1000/EPoverview.workData.Fs);
                    tableData{eventCounter,9+trialCol}=EPoverview.workData.events{subject,wave}(event).duration;
                    for iKey=1:length(EPoverview.workData.events{subject,wave}(event).keys)
                        theKeyName=EPoverview.workData.events{subject,wave}(event).keys(iKey).code;
                        if ~isempty(theKeyName)
                            if ~any(strcmp(theKeyName,keyNames))
                                keyNames{end+1}=theKeyName;
                            end
                            tableData{eventCounter,9+trialCol+find(strcmp(theKeyName,keyNames))}=EPoverview.workData.events{subject,wave}(event).keys(iKey).data;
                        end
                    end
                end
            end
        end
        
        tableNames{1}='select';
        tableNames{2}='cells';
        nonEdit=3;
        if strcmp(EPoverview.workData.dataType,'single_trial')
            tableNames{3}='trials';
            nonEdit=4;
        end
        tableNames{3+trialCol}='subjects';
        tableNames{4+trialCol}='events';
        tableNames{5+trialCol}='type';
        tableNames{6+trialCol}='sample';
        tableNames{7+trialCol}='value';
        tableNames{8+trialCol}='latency';
        tableNames{9+trialCol}='duration';
        numNonKey=length(tableNames);
        for i=1:length(keyNames)
            tableNames(9+trialCol+i)=keyNames(i);
        end
        
        columnEditable = [true repmat(false,1,nonEdit) repmat(true,1,5) repmat(true,1,length(keyNames))];
        
        ColumnFormat = cell(1,numNonKey);
        ColumnFormat{1}='logical';
        for i=2:numNonKey+length(keyNames)
            ColumnFormat{i}=[];
        end
        
        EPoverview.handles.trials.import = uicontrol('Style', 'pushbutton', 'String', 'Import','FontSize',EPmain.fontsize,...
            'Tag','import',...
            'Position', [20 windowHeight-490 60 30], 'Callback', 'ep_editData(''importEvents'');');
        
        if ~isempty(tableData)
            try
                EPoverview.handles.events.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
                    'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
                    'RearrangeableColumns','on',...
                    'Tag','import',...
                    'CellEditCallback',@editEvents,'Position',[100 100 windowWidth-200 windowHeight-220]);
                EPoverview.handles.events.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
                    'Tag','delete',...
                    'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''deleteEvents'');');
                EPoverview.handles.events.clear = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
                    'Tag','clear',...
                    'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearEventWeights'');');
                EPoverview.handles.events.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
                    'Tag','all',...
                    'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allEvents'');');
                EPoverview.handles.trials.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
                    'Tag','export',...
                    'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''exportEvents'');');
            catch
                EPoverview.handles.events.dataTable = uicontrol('Style','text','HorizontalAlignment','left','String', 'This function does not work with this version of Matlab','FontSize',EPmain.fontsize,...
                    'Position',[130 windowHeight-200 200 30]);
            end
        else
            EPoverview.handles.events.dataTable = uicontrol('Style','text','HorizontalAlignment','left','String', 'No events in this data.','FontSize',EPmain.fontsize,...
                'Position',[130 windowHeight-200 200 30]);
        end
        
    case 'startFactors'
        
        %[EPdata]=ep_stripAdds(EPoverview.workData,{'SGLfac','CMBfac'});
        EPdata=EPoverview.workData;
        
        numPoints=max(length(EPdata.timeNames),1);
        numChans=length(EPdata.chanNames);
        numFreqs=length(EPdata.freqNames);
        
        peakLatency=zeros(numFacs,1);
        peakNegChan=zeros(numFacs,1);
        peakPosChan=zeros(numFacs,1);
        peakPolarity=zeros(numFacs,1);
        peakHz=zeros(numFacs,1);
        peakNegChanNames=cell(numFacs,1);
        peakPosChanNames=cell(numFacs,1);
        SGLfacs=find(strcmp('SGL',EPdata.facTypes));
        CMBfacs=find(strcmp('CMB',EPdata.facTypes));
        for iFactor=1:numFacs
            facType=EPdata.facTypes{iFactor};
            if strcmp('SGL',facType)
                theFactor=find(SGLfacs==iFactor);
                
                if ~isempty(EPdata.facVecT)
                    [C peakLatency(iFactor)]=max(abs(EPdata.facVecT(:,theFactor)));
                else
                    [maxVal maxPoint]=max(reshape(shiftdim(abs(mean(EPdata.data(:,:,:,:,theFactor,:,:),4)),1),numPoints,[])');
                    if length(maxVal)>1
                        [maxVal maxPoint]=max(maxVal);
                    end
                    peakLatency(iFactor)=maxPoint;
                end
                
                if ~isempty(EPdata.facVecS)
                    maxVal=max(max(max(max(max(mean(EPdata.data(:,:,:,:,theFactor,:,:),4))))));
                    minVal=min(min(min(min(min(mean(EPdata.data(:,:,:,:,theFactor,:,:),4))))));
                    if abs(maxVal) > abs(minVal)
                        theVal=maxVal;
                    else
                        theVal=minVal;
                    end
                    [minChanVal minChan]=min(EPdata.facVecS(:,theFactor));
                    [maxChanVal maxChan]=max(EPdata.facVecS(:,theFactor));
                    minChanVal=minChanVal*theVal;
                    maxChanVal=maxChanVal*theVal;
                    if sign(maxChanVal) == 1
                        peakPosChan(iFactor) = maxChan;
                        if sign(minChanVal) == -1
                            peakNegChan(iFactor) = minChan;
                        end
                        if abs(maxChanVal) > abs(minChanVal)
                            peakPolarity(iFactor)=1;
                        else
                            peakPolarity(iFactor)=-1;
                        end
                    else
                        peakNegChan(iFactor) = maxChan;
                        if sign(minChanVal) == 1
                            peakPosChan(iFactor) = minChan;
                        end
                        if abs(maxChanVal) > abs(minChanVal)
                            peakPolarity(iFactor)=-1;
                        else
                            peakPolarity(iFactor)=1;
                        end
                    end
                else
                    [minVal minChan]=min(reshape(mean(EPdata.data(:,:,:,:,theFactor,:,:),4),numChans,[])');
                    [maxVal maxChan]=max(reshape(mean(EPdata.data(:,:,:,:,theFactor,:,:),4),numChans,[])');
                    if length(minVal)>1
                        [minVal minChan]=min(minVal);
                        [maxVal maxChan]=max(maxVal);
                    end
                    if numChans==1
                        minChan=1;
                        maxChan=1;
                    end
                    peakNegChan(iFactor)=minChan;
                    peakPosChan(iFactor)=maxChan;
                    
                    if abs(maxVal) > abs(minVal)
                        peakPolarity(iFactor)=sign(maxVal);
                    else
                        peakPolarity(iFactor)=sign(minVal);
                    end
                end
                
                if ~isempty(EPdata.facVecT)
                    [maxVal maxPnt]=max(abs(EPdata.facVecT(:,theFactor)));
                    if sign(EPdata.facVecT(maxPnt,theFactor)) == -1 %if sign of the factor loading is negative, flip the signs.
                        t1=peakNegChan(iFactor);
                        t2=peakPosChan(iFactor);
                        peakNegChan(iFactor)=t2;
                        peakPosChan(iFactor)=t1;
                        peakPolarity(iFactor)=-peakPolarity(iFactor);
                    end
                end
                if ~isempty(EPdata.facVecF)
                    [maxVal maxPnt]=max(abs(EPdata.facVecF(:,theFactor)));
                    if sign(EPdata.facVecF(maxPnt,theFactor)) == -1
                        t1=peakNegChan(iFactor);
                        t2=peakPosChan(iFactor);
                        peakNegChan(iFactor)=t2;
                        peakPosChan(iFactor)=t1;
                        peakPolarity(iFactor)=-peakPolarity(iFactor);
                    end
                end
                
                if ~isempty(EPdata.facVecF)
                    [C peakHz(iFactor)]=max(abs(EPdata.facVecF(:,theFactor)));
                else
                    if numFreqs
                        [C peakHz(iFactor)]=max(max(reshape(shiftdim(abs(mean(EPdata.data(:,:,:,:,theFactor,:,:),4)),5),numFreqs,[])'));
                    end
                end
                
                
            elseif strcmp('CMB',facType)
                theFactor=find(CMBfacs==iFactor);
                [C peakLatency(iFactor)]=max(max(reshape(shiftdim(abs(mean(EPdata.facData(:,:,:,:,theFactor,:,:),4)),1),numPoints,[])'));
                
                [minVal peakNegChan(iFactor)]=min(min(reshape(mean(EPdata.facData(:,:,:,:,theFactor,:,:),4),numChans,[])'));
                [maxVal peakPosChan(iFactor)]=max(max(reshape(mean(EPdata.facData(:,:,:,:,theFactor,:,:),4),numChans,[])'));
                if numChans==1
                    minChan=1;
                    maxChan=1;
                end
                if abs(maxVal) > abs(minVal)
                    peakPolarity(iFactor)=sign(maxVal);
                else
                    peakPolarity(iFactor)=sign(minVal);
                end
                
                if numFreqs
                    [C peakHz(iFactor)]=max(max(reshape(shiftdim(abs(mean(EPdata.facData(:,:,:,:,theFactor,:,:),4)),5),numFreqs,[])'));
                end
            end
            
            if peakNegChan(iFactor)
                peakNegChanNames{iFactor}=EPdata.chanNames{peakNegChan(iFactor)};
            else
                peakNegChanNames{iFactor}=' ';
            end
            if peakPosChan(iFactor)
                peakPosChanNames{iFactor}=EPdata.chanNames{peakPosChan(iFactor)};
            else
                peakPosChanNames{iFactor}=' ';
            end
        end
        
        peakLatency=(peakLatency-EPdata.baseline-1)*(1000/EPdata.Fs);
        
        if isempty(EPdata.timeNames)
            peakLatency=NaN(size(peakLatency));
            peakPolarity=NaN(size(peakPolarity));
        end
        if isempty(EPdata.freqNames)
            peakHz=NaN(size(peakHz));
        else
            peakHz=EPdata.freqNames(peakHz);
        end
        
        facVar=EPdata.facVar;
        facVarQ=EPdata.facVarQ;
        
        tableNames{1}='order';
        tableNames{2}='select';
        tableNames{3}='weights';
        tableNames{4}='names';
        tableNames{5}='type';
        tableNames{6}='peakLatency';
        tableNames{7}='peakNegChan';
        tableNames{8}='peakPosChan';
        tableNames{9}='peakPolarity';
        tableNames{10}='peakHz';
        if ~isempty(facVar)
            tableNames{11}='variance';
        end
        if ~isempty(facVarQ)
            tableNames{end+1}='unique variance';
        end
        tableNames=tableNames(:);

        for i=1:numFacs
            tableData{i,1}=i;
            tableData{i,2}=EPoverview.workMeta.factors.select(i);
            tableData{i,3}=EPoverview.workMeta.factors.weights(i);
            tableData{i,4}=char(EPdata.facNames(i));
            tableData{i,5}=char(EPdata.facTypes(i));
            tableData{i,6}=num2str(peakLatency(i));
            tableData{i,7}=char(peakNegChanNames(i));
            tableData{i,8}=char(peakPosChanNames(i));
            tableData{i,9}=peakPolarity(i);
            tableData{i,10}=peakHz(i);
            if ~isempty(facVar)
                tableData{i,11}=facVar(i);
            end
            if ~isempty(facVarQ)
                tableData{i,length(tableNames)}=facVarQ(i);
            end
        end
        
        columnEditable =  [repmat(true,1,5) repmat(false,1,4)];
        ColumnFormat{1}='numeric';
        ColumnFormat{2}='logical';
        ColumnFormat{3}='numeric';
        ColumnFormat{4}=[];
        ColumnFormat{5}={'SGL','CMB','STS'};
        ColumnFormat{6}=[];
        ColumnFormat{7}=[];
        ColumnFormat{8}=[];
        ColumnFormat{9}='+';
        ColumnFormat{10}=[];
        if ~isempty(facVar)
            ColumnFormat{11}='numeric';
        end
        if ~isempty(facVarQ)
            ColumnFormat{12}='numeric';
        end
        
        EPoverview.handles.factors.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
            'RearrangeableColumns','on',...
            'Tag','dataTable',...
            'CellEditCallback',@editFacs,'Position',[100 100 windowWidth-200 windowHeight-220]);
        
        EPoverview.handles.factors.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''deleteFacs'');');
        EPoverview.handles.factors.add = uicontrol('Style', 'pushbutton', 'String', 'Add','FontSize',EPmain.fontsize,...
            'Tag','add',...
            'Position', [20 windowHeight-310 60 30], 'Callback', 'ep_editData(''addFacs'');');
        
        tableData=get(EPoverview.handles.factors.dataTable,'Data');
        weights=cell2mat(tableData([tableData{:,2}],3));
        
        EPoverview.handles.factors.weightSum = uicontrol('Style', 'text', 'String', sprintf('%3.2f',sum(weights)),'FontSize',EPmain.fontsize,...
            'Position', [20 windowHeight-340 60 30]);
        EPoverview.handles.factors.clear = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
            'Tag','clear',...
            'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearFacWeights'');');
        EPoverview.handles.factors.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
            'Tag','all',...
            'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allFacs'');');
        EPoverview.handles.factors.append = uicontrol('Style', 'pushbutton', 'String', 'Append','FontSize',EPmain.fontsize,...
            'Tag','append',...
            'Position', [20 windowHeight-430 60 30], 'Callback', 'ep_editData(''appendFacs'');');
        EPoverview.handles.factors.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
            'Tag','export',...
            'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''exportFacs'');');
        
        sortString=[tableNames(4:end);'Sort'];
        EPoverview.handles.factors.sort = uicontrol('Style', 'popupmenu', 'Value', length(sortString), 'String', sortString, 'FontSize',EPmain.fontsize,...
            'Tag','sort',...
            'Position', [20 windowHeight-580 80 30], 'Callback', 'ep_editData(''sortFactors'');');
        
        
    case 'startQC'
        
        badTrials=EPoverview.workData.analysis.badTrials;
        theChans=find(strcmp(EPoverview.workData.chanTypes,'EEG'));
        if isempty(theChans)
            theChans=find(strcmp(EPoverview.workData.chanTypes,'REG'));
        end
        numEEGchans=length(theChans);
        %prepare contents of the table based on the QC setting
        QCdata=[];
        switch EPoverview.QC.mode
            case 'avgNum'
                QCdata=EPoverview.workData.avgNum;
                if all(QCdata == 0)
                    QCdata=nan(size(QCdata));
                end
            case 'subNum'
                QCdata=EPoverview.workData.subNum;
            case 'blinkTrial'
                QCdata=EPoverview.workData.analysis.blinkTrial;
            case 'saccadeTrial'
                QCdata=EPoverview.workData.analysis.saccadeTrial;
            case 'saccadeOnset'
                QCdata=EPoverview.workData.analysis.saccadeOnset;
            case 'moveTrial'
                QCdata=EPoverview.workData.analysis.moveTrial;
            case 'badTrials'
                QCdata=EPoverview.workData.analysis.badTrials;
            case 'badChans'
                switch EPoverview.workData.dataType
                    case {'single_trial','continuous'}
                        theNumbers=EPoverview.workData.analysis.badChans(:,:,theChans).*repmat(~badTrials,[1,1,numEEGchans]); %count only good trials
                        if any(EPoverview.workData.analysis.badChans(:,:,theChans) < 0)
                            QCdata=-squeeze(sum((theNumbers < 0).*theNumbers,3));
                            theLabel='bad';
                        else
                            QCdata=squeeze(sum(theNumbers,3));
                            theLabel='replaced';
                        end
                    case 'average'
                        if any(any(any(isnan(EPoverview.workData.analysis.badChans(:,:,theChans)))))
                            theNumbers=isnan(EPoverview.workData.analysis.badChans(:,:,theChans));
                            QCdata=squeeze(sum(theNumbers,3));
                            theLabel='bad';
                        elseif any(any(any(EPoverview.workData.analysis.badChans(:,:,theChans) < 0)))
                            theNumbers=EPoverview.workData.analysis.badChans(:,:,theChans);
                            QCdata=-squeeze(sum((theNumbers < 0).*theNumbers,3));
                            theLabel='dropped';
                        else
                            theNumbers=EPoverview.workData.analysis.badChans(:,:,theChans);
                            QCdata=squeeze(sum(theNumbers,3));
                            theLabel='replaced';
                        end
                    otherwise
                        disp('Oops - data type not recognized.')
                        return
                end
                EPoverview.handles.QC.badChans = uicontrol('Style', 'text', 'String', theLabel,'FontSize',EPmain.fontsize,...
                    'TooltipString','Type of bad channel info.',...
                    'Position', [520 windowHeight-680 60 30]);
            case 'noise'
                QCdata=sqrt(squeeze(mean(mean(mean(EPoverview.workData.noise.^2,1,'omitnan'),2,'omitnan'),5,'omitnan')))'; %root mean square
            case 'std'
                if ~isempty(EPoverview.workData.covAVE)
                    QCdata=zeros(numSubs,numWaves);
                    for iChan=1:numEEGchans
                        theChan=theChans(iChan);
                        if size(EPoverview.workData.covAVE,7)==1
                            QCdata=QCdata+squeeze(mean(mean(mean(mean(sqrt(EPoverview.workData.covAVE(theChan,:,:,:,:,:,1)),1),2),5),6))';
                        else
                            QCdata=QCdata+squeeze(mean(mean(mean(mean(sqrt(EPoverview.workData.covAVE(theChan,:,:,:,:,:,theChan)),1),2),5),6))';
                        end
                    end
                end
        end
        
        avgNum=EPoverview.workData.avgNum;
        subNum=EPoverview.workData.subNum;
        if all(avgNum(:) == 0) && all(subNum(:) == 0)
            avgNum=nan(size(avgNum)); %if number of trials going into each waveform is unavailable, default to nan.
        elseif all(avgNum(:) == 0) && ~all(subNum(:) == 0)
            avgNum=subNum; %if number of trials going into each waveform is unavailable but subject numbers are available (as in grand averages) then default to subject numbers.
        end
        if strcmp(EPoverview.workData.dataType,'average')
            avgNum=avgNum+badTrials;
        end
        
        %convert QC statistics to %if appropriate
        switch EPoverview.QC.mode
            case 'blinkTrial'
                QCdata=QCdata./(avgNum);
            case 'saccadeTrial'
                QCdata=QCdata./(avgNum);
            case 'moveTrial'
                QCdata=QCdata./(avgNum);
            case 'badTrials'
                QCdata=QCdata./(avgNum);
            case 'badChans'
                QCdata=QCdata./(numEEGchans*(avgNum));
        end
        
        [uniqueCells waveOrder m]=unique(EPoverview.workData.cellNames,'stable');
        
        %aggregate over trials for single trial data
        if any(strcmp(EPoverview.workData.dataType,{'single_trial','continuous'}))
            for i=1:numCells
                theTrials=find(strcmp(uniqueCells{i},EPoverview.workData.cellNames));
                theTrials=find(~badTrials(theTrials));
                
                switch EPoverview.QC.mode
                    case 'avgNum'
                        tempQC(i) = sum(QCdata(theTrials));
                    case 'subNum'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'blinkTrial'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'saccadeTrial'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'saccadeOnset'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'moveTrial'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'badTrials'
                        theTrials=find(strcmp(uniqueCells{i},EPoverview.workData.cellNames));
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'badChans'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'noise'
                        tempQC(i) = mean(QCdata(theTrials));
                    case 'std'
                        tempQC(i) = mean(QCdata(theTrials));
                end
                
            end
            QCdata=tempQC;
        end
        
        for iSub=1:numSubs
            tableData{iSub,1}=EPoverview.workMeta.subjects.select(iSub);
            tableData{iSub,2}=char(EPoverview.workData.subNames(iSub));
            tableData{iSub,3}=char(EPoverview.workData.subTypes(iSub));
            tableData(iSub,4:3+numCells)=num2cell(QCdata(iSub,:));
        end
        
        tableNames{1}='select';
        tableNames{2}='names';
        tableNames{3}='type';
        for i=1:numCells
            tableNames(3+i)=uniqueCells(i);
        end
        
        columnEditable =  [true, repmat(false,1,2+numCells)];
        
        ColumnFormat=cell(1,numCells+2);
        ColumnFormat{1}='logical';
        for i=1:numCells
            ColumnFormat{i+3}=[];
        end


        redColor = dec2hex(round([1 0 0]*255),2)'; redColor = ['#';redColor(:)]';
        greenColor = dec2hex(round([0 1 0]*255),2)'; greenColor = ['#';greenColor(:)]';

        greenVal=str2double(EPoverview.QC.greenVal);
        redVal=str2double(EPoverview.QC.redVal);
        
        for iRow=1:size(tableData,1)
            for iCol=3:size(tableData,2)
                if isnumeric(tableData{iRow,iCol})
                    theNum=tableData{iRow,iCol};
                    cellState=0;
                    if ~isnan(greenVal)
                        switch EPoverview.QC.greenComp
                            case 1
                                if theNum < greenVal
                                    cellState=1;
                                end
                            case 2
                                if theNum <= greenVal
                                    cellState=1;
                                end
                            case 3
                                if theNum > greenVal
                                    cellState=1;
                                end
                            case 4
                                if theNum >= greenVal
                                    cellState=1;
                                end
                            case 5
                                if theNum == greenVal
                                    cellState=1;
                                end
                            case 6
                                if theNum ~= greenVal
                                    cellState=1;
                                end
                        end
                    end
                    if ~isnan(redVal)
                        switch EPoverview.QC.redComp
                            case 1
                                if theNum < redVal
                                    cellState=2;
                                end
                            case 2
                                if theNum <= redVal
                                    cellState=2;
                                end
                            case 3
                                if theNum > redVal
                                    cellState=2;
                                end
                            case 4
                                if theNum >= redVal
                                    cellState=2;
                                end
                            case 5
                                if theNum == redVal
                                    cellState=2;
                                end
                            case 6
                                if theNum ~= redVal
                                    cellState=2;
                                end
                        end
                        switch cellState
                            case 0
                                tableData{iRow,iCol}=num2str(tableData{iRow,iCol});
                            case 1
                                tableData{iRow,iCol}=strcat(['<html><body text="' greenColor '" width="100px">'],num2str(tableData{iRow,iCol}));
                            case 2
                                tableData{iRow,iCol}=strcat(['<html><body text="' redColor '" width="100px">'],num2str(tableData{iRow,iCol}));
                        end
                    end
                end
            end
        end

        EPoverview.handles.QC.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
            'Tag','dataTable',...
            'RearrangeableColumns','on',...
            'CellEditCallback',@editQC,'Position',[100 100 windowWidth-200 windowHeight-220]);

        EPoverview.handles.QC.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
            'Tag','export',...
            'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''exportQC'');');

        compMenu={'<','<=','>','>=','=','~='};

        EPoverview.handles.QC.greenComp = uicontrol('Style', 'popupmenu', 'String', compMenu,'FontSize',EPmain.fontsize, 'Value', EPoverview.QC.greenComp,'ForegroundColor','Green',...
            'CallBack',['global EPoverview;','EPoverview.QC.greenComp=get(EPoverview.handles.QC.greenComp,''Value'');','ep_editData(''startQC'');'],...
            'Tag','greenComp',...
            'Position', [20 windowHeight-580 40 30]);

        EPoverview.handles.QC.greenVal = uicontrol('Style', 'edit', 'String', EPoverview.QC.greenVal,'FontSize',EPmain.fontsize,...
            'CallBack',['global EPoverview;','EPoverview.QC.greenVal=get(EPoverview.handles.QC.greenVal,''String'');','ep_editData(''startQC'');'],...
            'Tag','greenVal',...
            'Position', [60 windowHeight-570 40 20]);

        EPoverview.handles.QC.redComp = uicontrol('Style', 'popupmenu', 'String', compMenu,'FontSize',EPmain.fontsize, 'Value', EPoverview.QC.redComp,'ForegroundColor','Red',...
            'CallBack',['global EPoverview;','EPoverview.QC.redComp=get(EPoverview.handles.QC.redComp,''Value'');','ep_editData(''startQC'');'],...
            'Tag','redComp',...
            'Position', [20 windowHeight-600 40 30]);

        EPoverview.handles.QC.redVal = uicontrol('Style', 'edit', 'String', EPoverview.QC.redVal,'FontSize',EPmain.fontsize,...
            'CallBack',['global EPoverview;','EPoverview.QC.redVal=get(EPoverview.handles.QC.redVal,''String'');','ep_editData(''startQC'');'],...
            'Tag','redVal',...
            'Position', [60 windowHeight-590 40 20]);



        callBackEnd=['ep_editData(''start'');'];

        if ~isempty(EPoverview.workData.avgNum)
            EPoverview.handles.QC.avgNum = uicontrol('Style', 'pushbutton', 'String', 'Trials','FontSize',EPmain.fontsize,...
                'TooltipString','Number of trials going into each waveform.',...
                'Tag','avgNum',...
                'Position', [100 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''avgNum'';',callBackEnd]);
        end

        if ~isempty(EPoverview.workData.subNum)
            EPoverview.handles.QC.subNum = uicontrol('Style', 'pushbutton', 'String', 'Subs','FontSize',EPmain.fontsize,...
                'TooltipString','Number of subjects going into each waveform.',...
                'Tag','subNum',...
                'Position', [160 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''subNum'';',callBackEnd]);
        end

        EPoverview.handles.QC.blinkTrial = uicontrol('Style', 'pushbutton', 'String', 'Blinks','FontSize',EPmain.fontsize,...
            'TooltipString','Number of blink-corrected trials going into each waveform.',...
            'Tag','blinkTrial',...
            'Position', [220 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''blinkTrial'';',callBackEnd]);
        EPoverview.handles.QC.saccadeTrial = uicontrol('Style', 'pushbutton', 'String', 'Saccades','FontSize',EPmain.fontsize,...
            'TooltipString','Number of saccade-corrected trials going into each waveform.',...
            'Tag','saccadeTrial',...
            'Position', [280 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''saccadeTrial'';',callBackEnd]);
        EPoverview.handles.QC.saccadeOnset = uicontrol('Style', 'pushbutton', 'String', 'Sacc Ms','FontSize',EPmain.fontsize,...
            'TooltipString','Onset of saccades.',...
            'Tag','saccadeOnset',...
            'Position', [340 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''saccadeOnset'';',callBackEnd]);
        EPoverview.handles.QC.moveTrial = uicontrol('Style', 'pushbutton', 'String', 'Move','FontSize',EPmain.fontsize,...
            'TooltipString','Number of movement-corrected trials going into each waveform.',...
            'Tag','moveTrial',...
            'Position', [400 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''moveTrial'';',callBackEnd]);
        EPoverview.handles.QC.badTrials = uicontrol('Style', 'pushbutton', 'String', 'BadTrials','FontSize',EPmain.fontsize,...
            'TooltipString','Proportion of trials excluded from each averaged waveform due to being bad trials.',...
            'Tag','badTrials',...
            'Position', [460 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''badTrials'';',callBackEnd]);
        %if any(any(any(EPoverview.workData.analysis.badChans(repmat(~badTrials,[1,1,numChans])) < 0)))
        EPoverview.handles.QC.badChans = uicontrol('Style', 'pushbutton', 'String', 'BadChan','FontSize',EPmain.fontsize,...
            'TooltipString','Proportion of bad channels in each set of waveforms, not include bad trials.',...
            'Tag','badChans',...
            'Position', [520 50 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''badChans'';',callBackEnd]);
        %end

        if ~isempty(EPoverview.workData.noise)
            EPoverview.handles.QC.noise = uicontrol('Style', 'pushbutton', 'String', 'Noise','FontSize',EPmain.fontsize,...
                'TooltipString','Noise level in each averaged waveform, as computed by the +/- reference.',...
                'Tag','noise',...
                'Position', [100 20 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''noise'';',callBackEnd]);
        end
        if ~isempty(EPoverview.workData.covAVE)
            EPoverview.handles.QC.std = uicontrol('Style', 'pushbutton', 'String', 'Std','FontSize',EPmain.fontsize,...
                'TooltipString','Mean standard deviation in each averaged waveform.',...
                'Tag','std',...
                'Position', [160 20 60 30], 'Callback', ['global EPoverview;','EPoverview.QC.mode=''std'';',callBackEnd]);
        end
        
        switch EPoverview.QC.mode
            case 'avgNum'
                set(EPoverview.handles.QC.avgNum,'ForegroundColor','blue');
            case 'subNum'
                set(EPoverview.handles.QC.subNum,'ForegroundColor','blue');
            case 'blinkTrial'
                set(EPoverview.handles.QC.blinkTrial,'ForegroundColor','blue');
            case 'saccadeTrial'
                set(EPoverview.handles.QC.saccadeTrial,'ForegroundColor','blue');
            case 'saccadeOnset'
                set(EPoverview.handles.QC.saccadeOnset,'ForegroundColor','blue');
            case 'moveTrial'
                set(EPoverview.handles.QC.moveTrial,'ForegroundColor','blue');
            case 'badTrials'
                set(EPoverview.handles.QC.badTrials,'ForegroundColor','blue');
            case 'badChans'
                set(EPoverview.handles.QC.badChans,'ForegroundColor','blue');
            case 'noise'
                set(EPoverview.handles.QC.noise,'ForegroundColor','blue');
            case 'std'
                set(EPoverview.handles.QC.std,'ForegroundColor','blue');
        end
        
    case 'startPCA'
        
        if strcmp(EPoverview.PCA.mode,'Summary')
            if isfield(EPoverview.workData.pca,'PCAmode2')
                title='First PCA';
            else
                title='The PCA';
            end
            uicontrol('Style','text','HorizontalAlignment','left','String', title,'FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-120 150 20]);
            switch EPoverview.workData.pca.PCAmode
                case 'spat'
                    theMode='spatial';
                case 'temp'
                    theMode='temporal';
                case 'freq'
                    theMode='frequency';
                otherwise
                    beep()
                    disp('Oops')
                    theMode='Oops';
            end
            
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Mode:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-140 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', theMode,'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-160 150 20]);
            
            switch EPoverview.workData.pca.ROTATION
                case 'QMIN'
                    theRotationName = 'Quartimin';
                case 'OMIN'
                    theRotationName = 'Oblimin';
                case 'CRFE'
                    theRotationName = 'Crawford-Ferguson';
                case 'MINE'
                    theRotationName = 'minimum entropy';
                case 'IPSC'
                    theRotationName = 'Bentler''s invariant pattern simplicity criterion';
                case 'TIIC'
                    theRotationName = 'Comrey''s tandem II criterion';
                case 'GMIN'
                    theRotationName = 'geomin';
                case 'IMAX'
                    theRotationName = 'Infomax';
                case 'MMER'
                    theRotationName = 'McCammon minimum entropy ratio';
                case 'UNRT'
                    theRotationName = 'none';
                case 'VMAX'
                    theRotationName = 'Varimax';
                case 'QMAX'
                    theRotationName = 'Quartimax';
                case 'PMAX'
                    theRotationName = 'Promax';
                case 'VMIN'
                    theRotationName = 'Variable Oblimin';
                otherwise
                    theRotationName = EPoverview.workData.pca.ROTATION;
            end
            
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-180 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', theRotationName,'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-200 150 20]);
            
            switch EPoverview.workData.pca.MAT_TYPE
                case 'SCP'
                    theMat='Cross-Product';
                case 'COV'
                    theMat='Covariance';
                case 'COR'
                    theMat='Correlation';
                otherwise
                    beep()
                    disp('Oops')
                    theMat='Oops';
            end
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Matrix Type:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-220 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', theMat,'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-240 150 20]);
            
            switch EPoverview.workData.pca.LOADING
                case 'K'
                    theLoadings='Kaiser';
                case 'C'
                    theLoadings='Covariance';
                case 'N'
                    theLoadings='None';
                case 'W'
                    theLoadings='Cureton-Mulaik';
                otherwise
                    beep()
                    disp('Oops')
                    theLoadings='Oops';
            end
            if strcmp(theRotationName,'Infomax')
                theLoadings='None';
            end
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Loading Weighting:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-260 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', theLoadings,'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-280 150 20]);
            
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation Option:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-300 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.RotOpt),'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-320 150 20]);
            
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation Algorithm:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-340 150 20]);

            if isfield(EPoverview.workData.pca,'theAlgorithm')
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.theAlgorithm),'FontSize',EPmain.fontsize,...
                    'Position',[110 windowHeight-360 150 20]);
            else
                uicontrol('Style','text','HorizontalAlignment','left','String', '','FontSize',EPmain.fontsize,...
                    'Position',[110 windowHeight-360 150 20]);
            end

            uicontrol('Style','text','HorizontalAlignment','left','String', 'Factors Retained:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-380 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.numFacs),'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-400 150 20]);
            
            uicontrol('Style','text','HorizontalAlignment','left','String', 'Total Variance:','FontSize',EPmain.fontsize,...
                'Position',[100 windowHeight-420 150 20]);
            uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.facVarTot),'FontSize',EPmain.fontsize,...
                'Position',[110 windowHeight-440 150 20]);
            
            PCAdata=[];
            if isfield(EPoverview.workData.pca,'PCAmode2')
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Second PCA','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-120 150 20]);
                switch EPoverview.workData.pca.PCAmode2
                    case 'spat'
                        theMode='spatial';
                    case 'temp'
                        theMode='temporal';
                    otherwise
                        beep()
                        disp('Oops')
                        theMode='Oops';
                end
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Mode:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-140 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theMode,'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-160 150 20]);
                
                switch EPoverview.workData.pca.ROTATION2
                    case 'QMIN'
                        theRotationName = 'Quartimin';
                    case 'OMIN'
                        theRotationName = 'Oblimin';
                    case 'CRFE'
                        theRotationName = 'Crawford-Ferguson';
                    case 'MINE'
                        theRotationName = 'minimum entropy';
                    case 'IPSC'
                        theRotationName = 'Bentler''s invariant pattern simplicity criterion';
                    case 'TIIC'
                        theRotationName = 'Comrey''s tandem II criterion';
                    case 'GMIN'
                        theRotationName = 'geomin';
                    case 'IMAX'
                        theRotationName = 'Infomax';
                    case 'MMER'
                        theRotationName = 'McCammon minimum entropy ratio';
                    case 'UNRT'
                        theRotationName = 'none';
                    case 'VMAX'
                        theRotationName = 'Varimax';
                    case 'QMAX'
                        theRotationName = 'Quartimax';
                    case 'PMAX'
                        theRotationName = 'Promax';
                    case 'Variable-Oblimin'
                        theRotationName = 'Variable Oblimin';
                    otherwise
                        theRotationName = EPoverview.workData.pca.ROTATION2;
                end
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-180 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theRotationName,'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-200 150 20]);
                
                switch EPoverview.workData.pca.MAT_TYPE2
                    case 'SCP'
                        theMat='Cross-Product';
                    case 'COV'
                        theMat='Covariance';
                    case 'COR'
                        theMat='Correlation';
                    otherwise
                        beep()
                        disp('Oops')
                        theMat='Oops';
                end
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Matrix Type:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-220 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theMat,'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-240 150 20]);
                
                switch EPoverview.workData.pca.LOADING2
                    case 'K'
                        theLoadings='Kaiser';
                    case 'C'
                        theLoadings='Covariance';
                    case 'N'
                        theLoadings='None';
                    case 'W'
                        theLoadings='Cureton-Mulaik';
                    otherwise
                        beep()
                        disp('Oops')
                        theLoadings='Oops';
                end
                if strcmp(theRotationName,'Infomax')
                    theLoadings='None';
                end
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Loading Weighting:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-260 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theLoadings,'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-280 150 20]);
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation Option:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-300 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.RotOpt2),'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-320 150 20]);

                uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation Algorithm:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-340 150 20]);

                if isfield(EPoverview.workData.pca,'theAlgorithm2')
                    uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.theAlgorithm2),'FontSize',EPmain.fontsize,...
                        'Position',[260 windowHeight-360 150 20]);
                else
                    uicontrol('Style','text','HorizontalAlignment','left','String', '','FontSize',EPmain.fontsize,...
                        'Position',[260 windowHeight-360 150 20]);
                end

                uicontrol('Style','text','HorizontalAlignment','left','String', 'Factors Retained:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-380 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.numFacs2),'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-400 150 20]);

                uicontrol('Style','text','HorizontalAlignment','left','String', 'Total Variance:','FontSize',EPmain.fontsize,...
                    'Position',[250 windowHeight-420 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(sum(EPoverview.workData.pca.facVar.*EPoverview.workData.pca.facVarTotST)),'FontSize',EPmain.fontsize,...
                    'Position',[260 windowHeight-440 150 20]);

                PCAdata=[EPoverview.workData.pca.facVarTotST; EPoverview.workData.pca.facVar.*EPoverview.workData.pca.facVarTotST]';
                tableNames={'Factor Var','Total Var'};
                
            end
            
            if isfield(EPoverview.workData.pca,'PCAmode3')
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Third PCA','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-120 150 20]);
                switch EPoverview.workData.pca.PCAmode3
                    case 'spat'
                        theMode='spatial';
                    case 'temp'
                        theMode='temporal';
                    case 'freq'
                        theMode='frequency';
                    otherwise
                        beep()
                        disp('Oops')
                        theMode='Oops';
                end
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Mode:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-140 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theMode,'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-160 150 20]);
                
                switch EPoverview.workData.pca.ROTATION3
                    case 'QMIN'
                        theRotationName = 'Quartimin';
                    case 'OMIN'
                        theRotationName = 'Oblimin';
                    case 'CRFE'
                        theRotationName = 'Crawford-Ferguson';
                    case 'MINE'
                        theRotationName = 'minimum entropy';
                    case 'IPSC'
                        theRotationName = 'Bentler''s invariant pattern simplicity criterion';
                    case 'TIIC'
                        theRotationName = 'Comrey''s tandem II criterion';
                    case 'GMIN'
                        theRotationName = 'geomin';
                    case 'IMAX'
                        theRotationName = 'Infomax';
                    case 'MMER'
                        theRotationName = 'McCammon minimum entropy ratio';
                    case 'UNRT'
                        theRotationName = 'none';
                    case 'VMAX'
                        theRotationName = 'Varimax';
                    case 'QMAX'
                        theRotationName = 'Quartimax';
                    case 'PMAX'
                        theRotationName = 'Promax';
                    case 'Variable-Oblimin'
                        theRotationName = 'Variable Oblimin';
                    otherwise
                        theRotationName = EPoverview.workData.pca.ROTATION3;
                end
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-180 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theRotationName,'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-200 150 20]);
                
                switch EPoverview.workData.pca.MAT_TYPE3
                    case 'SCP'
                        theMat='Cross-Product';
                    case 'COV'
                        theMat='Covariance';
                    case 'COR'
                        theMat='Correlation';
                    otherwise
                        beep()
                        disp('Oops')
                        theMat='Oops';
                end
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Matrix Type:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-220 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theMat,'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-240 150 20]);
                
                switch EPoverview.workData.pca.LOADING3
                    case 'K'
                        theLoadings='Kaiser';
                    case 'C'
                        theLoadings='Covariance';
                    case 'N'
                        theLoadings='None';
                    case 'W'
                        theLoadings='Cureton-Mulaik';
                    otherwise
                        beep()
                        disp('Oops')
                        theLoadings='Oops';
                end
                if strcmp(theRotationName,'Infomax')
                    theLoadings='None';
                end
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Loading Weighting:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-260 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', theLoadings,'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-280 150 20]);
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation Option:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-300 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.RotOpt3),'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-320 150 20]);

                uicontrol('Style','text','HorizontalAlignment','left','String', 'Rotation Algorithm:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-340 150 20]);
                if isfield(EPoverview.workData.pca,'theAlgorithm3')
                    uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.theAlgorithm3),'FontSize',EPmain.fontsize,...
                        'Position',[410 windowHeight-360 150 20]);
                else
                    uicontrol('Style','text','HorizontalAlignment','left','String', '','FontSize',EPmain.fontsize,...
                        'Position',[410 windowHeight-360 150 20]);
                end

                uicontrol('Style','text','HorizontalAlignment','left','String', 'Factors Retained:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-380 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(EPoverview.workData.pca.numFacs3),'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-400 150 20]);
                
                uicontrol('Style','text','HorizontalAlignment','left','String', 'Total Variance:','FontSize',EPmain.fontsize,...
                    'Position',[400 windowHeight-420 150 20]);
                uicontrol('Style','text','HorizontalAlignment','left','String', num2str(sum(EPoverview.workData.pca.facVarST.*EPoverview.workData.pca.facVarTot3)),'FontSize',EPmain.fontsize,...
                    'Position',[410 windowHeight-440 150 20]);
                
                PCAdata=[EPoverview.workData.pca.facVarTot3; EPoverview.workData.pca.facVarST.*EPoverview.workData.pca.facVarTot3]';
                tableNames={'Factor Var','Total Var'};
                
            end
            
            if ~isempty(PCAdata)
                tableData=num2cell(PCAdata);
                
                columnEditable =  repmat(false,1,size(PCAdata,2));
                
                ColumnFormat = repmat([],1,size(PCAdata,2));
                
                EPoverview.handles.PCA.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
                    'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
                    'RearrangeableColumns','on',...
                    'Tag','dataTable',...
                    'Position',[500 windowHeight-400 200 200]);
            end
        else
            
            %prepare contents of the table based on the PCA setting
            rowNames='numbered';
            labelNames=cell(0);
            
            switch EPoverview.PCA.mode
                case 'FacPat'
                    PCAdata=EPoverview.workData.pca.FacPat;
                    tableNames=EPoverview.workData.pca.facNames;
                case 'FacStr'
                    PCAdata=EPoverview.workData.pca.FacStr;
                    tableNames=EPoverview.workData.pca.facNames;
                case 'FacScr'
                    PCAdata=EPoverview.workData.pca.FacScr;
                    tableNames={'time';'chan';'cell';'sub';'freq';'rels'};
                    tableNames=[tableNames; EPoverview.workData.pca.facNames];
                    
                    
                    labelNames=cell(size(PCAdata,1),6);
                    
                    if ~strcmp(EPoverview.workData.pca.PCAmode,'asis')
                        numChans=EPoverview.workData.pca.numchan;
                        numPoints=EPoverview.workData.pca.timepoints;
                        numCells=EPoverview.workData.pca.numCells;
                        numSubs=EPoverview.workData.pca.numSubs;
                        numFreqs=EPoverview.workData.pca.numFreqs;
                        numRels=EPoverview.workData.pca.numRels;
                        switch EPoverview.workData.pca.PCAmode
                            case 'temp'
                                numPoints=1;
                            case 'spat'
                                numChans=1;
                            case 'freq'
                                numFreqs=1;
                        end
                        numRows=numChans*numPoints*numCells*numSubs*numFreqs*numRels;
                        rowNames=cell(numRows,1);
                        rowCounter=1;
                        for iRel=1:numRels
                            theName='';
                            theRel=' ';
                            if numRels > 1
                                theRel=EPoverview.workData.pca.relNames{iRel};
                                theName=[theRel '-'];
                            end
                            for iFreq=1:numFreqs
                                theName2=theName;
                                theFreq=' ';
                                if numFreqs > 1
                                    theFreq=EPoverview.workData.pca.freqNames{iFreq};
                                    theName2=[theName2 theFreq '-'];
                                end
                                for iSub=1:numSubs
                                    theName3=theName2;
                                    theSub=' ';
                                    if numSubs > 1
                                        theSub=EPoverview.workData.pca.subNames{iSub};
                                        theName3=[theName3 theSub '-'];
                                    end
                                    for iCell=1:numCells
                                        theName4=theName3;
                                        theCell=' ';
                                        if numCells > 1
                                            theCell=EPoverview.workData.pca.cellNames{iCell};
                                            theName4=[theName4 theCell '-'];
                                        end
                                        for iPoint=1:numPoints
                                            theName5=theName4;
                                            thePoint=' ';
                                            if numPoints > 1
                                                thePoint=num2str(EPoverview.workData.pca.timeNames(iPoint));
                                                theName5=[theName5 thePoint '-'];
                                            end
                                            for iChan=1:numChans
                                                theName6=theName5;
                                                theChan=' ';
                                                if numChans > 1
                                                    theChan=EPoverview.workData.pca.chanNames{iChan};
                                                    theName6=[theName6 theChan '-'];
                                                end
                                                rowNames{rowCounter}=theName6(1:end-1);
                                                labelNames{rowCounter,1}=theChan;
                                                labelNames{rowCounter,2}=thePoint;
                                                labelNames{rowCounter,3}=theCell;
                                                labelNames{rowCounter,4}=theSub;
                                                labelNames{rowCounter,5}=theFreq;
                                                labelNames{rowCounter,6}=theRel;
                                                rowCounter=rowCounter+1;
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        rowNames=rowNames(~EPoverview.workData.pca.badObs);
                    end
                case 'FacCof'
                    PCAdata=EPoverview.workData.pca.FacCof;
                    tableNames=EPoverview.workData.pca.facNames;
                case 'FacCor'
                    PCAdata=EPoverview.workData.pca.FacCor;
                    tableNames=EPoverview.workData.pca.facNames;
                case 'ScFacPat'
                    PCAdata=diag(EPoverview.workData.pca.varSD)*EPoverview.workData.pca.FacPat;
                    tableNames=EPoverview.workData.pca.facNames;
                case 'FacPatST'
                    PCAdata=EPoverview.workData.pca.FacPatST;
                    tableNames=EPoverview.workData.pca.facNames2;
                case 'FacStrST'
                    PCAdata=EPoverview.workData.pca.FacStrST;
                    tableNames=EPoverview.workData.pca.facNames2;
                case 'FacScrST'
                    PCAdata=EPoverview.workData.pca.FacScrST;
                    tableNames={'time';'chan';'cell';'sub';'freq';'rels'};
                    tableNames=[tableNames; EPoverview.workData.pca.facNames2];
                    
                    labelNames=cell(size(PCAdata,1),6);
                    
                    if ~strcmp(EPoverview.workData.pca.PCAmode,'asis')
                        numChans=EPoverview.workData.pca.numchan;
                        numPoints=EPoverview.workData.pca.timepoints;
                        numCells=EPoverview.workData.pca.numCells;
                        numSubs=EPoverview.workData.pca.numSubs;
                        numFreqs=EPoverview.workData.pca.numFreqs;
                        numRels=EPoverview.workData.pca.numRels;
                        switch EPoverview.workData.pca.PCAmode
                            case 'temp'
                                numPoints=1;
                            case 'spat'
                                numChans=1;
                            case 'freq'
                                numFreqs=1;
                        end
                        switch EPoverview.workData.pca.PCAmode2
                            case 'temp'
                                numPoints=1;
                            case 'spat'
                                numChans=1;
                            case 'freq'
                                numFreqs=1;
                        end
                        numRows=numChans*numPoints*numCells*numSubs*numFreqs*numRels;
                        rowNames=cell(numRows,1);
                        rowCounter=1;
                        
                        for iRel=1:numRels
                            theName='';
                            theRel=' ';
                            if numRels > 1
                                theRel=EPoverview.workData.pca.relNames{iRel};
                                theName=[theRel '-'];
                            end
                            for iFreq=1:numFreqs
                                theName2=theName;
                                theFreq=' ';
                                if numFreqs > 1
                                    theFreq=EPoverview.workData.pca.freqNames{iFreq};
                                    theName2=[theName2 theFreq '-'];
                                end
                                for iSub=1:numSubs
                                    theName3=theName2;
                                    theSub=' ';
                                    if numSubs > 1
                                        theSub=EPoverview.workData.pca.subNames{iSub};
                                        theName3=[theName3 theSub '-'];
                                    end
                                    for iCell=1:numCells
                                        theName4=theName3;
                                        theCell=' ';
                                        if numCells > 1
                                            theCell=EPoverview.workData.pca.cellNames{iCell};
                                            theName4=[theName4 theCell '-'];
                                        end
                                        for iPoint=1:numPoints
                                            theName5=theName4;
                                            thePoint=' ';
                                            if numPoints > 1
                                                thePoint=num2str(EPoverview.workData.pca.timeNames(iPoint));
                                                theName5=[theName5 thePoint '-'];
                                            end
                                            for iChan=1:numChans
                                                theName6=theName5;
                                                theChan=' ';
                                                if numChans > 1
                                                    theChan=EPoverview.workData.pca.chanNames{iChan};
                                                    theName6=[theName6 theChan '-'];
                                                end
                                                rowNames{rowCounter}=theName6(1:end-1);
                                                labelNames{rowCounter,1}=theChan;
                                                labelNames{rowCounter,2}=thePoint;
                                                labelNames{rowCounter,3}=theCell;
                                                labelNames{rowCounter,4}=theSub;
                                                labelNames{rowCounter,5}=theFreq;
                                                labelNames{rowCounter,6}=theRel;
                                                rowCounter=rowCounter+1;
                                            end
                                        end
                                    end
                                end
                            end
                        end                        
                        rowNames=rowNames(~EPoverview.workData.pca.badObsST(:,1)); %assumes same for all of the first step factors
                    end
                case 'FacCofST'
                    PCAdata=EPoverview.workData.pca.FacCofST;
                    tableNames=EPoverview.workData.pca.facNames2;
                case 'FacCorST'
                    PCAdata=EPoverview.workData.pca.FacCorST;
                    tableNames=EPoverview.workData.pca.facNames2;
                case 'ScFacPatST'
                    for iFac1=1:EPoverview.workData.pca.numFacs
                        for iFac2=1:EPoverview.workData.pca.numFacs2
                            PCAdata(:,iFac2+(iFac1-1)*EPoverview.workData.pca.numFacs2)=EPoverview.workData.pca.varSDST(iFac1,:)'.*EPoverview.workData.pca.FacPatST(:,iFac2+(iFac1-1)*EPoverview.workData.pca.numFacs2);
                        end
                    end
                    tableNames=EPoverview.workData.pca.facNames2;
                case 'FacPat3'
                    PCAdata=EPoverview.workData.pca.FacPat3;
                    tableNames=EPoverview.workData.pca.facNames3;
                case 'FacStr3'
                    PCAdata=EPoverview.workData.pca.FacStr3;
                    tableNames=EPoverview.workData.pca.facNames3;
                case 'FacScr3'
                    PCAdata=EPoverview.workData.pca.FacScr3;
                    tableNames={'time';'chan';'cell';'sub';'freq';'rels'};
                    tableNames=[tableNames; EPoverview.workData.pca.facNames3];
                    
                    labelNames=cell(size(PCAdata,1),6);
                    
                    if ~strcmp(EPoverview.workData.pca.PCAmode,'asis')
                        numChans=EPoverview.workData.pca.numchan;
                        numPoints=EPoverview.workData.pca.timepoints;
                        numCells=EPoverview.workData.pca.numCells;
                        numSubs=EPoverview.workData.pca.numSubs;
                        numFreqs=EPoverview.workData.pca.numFreqs;
                        numRels=EPoverview.workData.pca.numRels;
                        switch EPoverview.workData.pca.PCAmode
                            case 'temp'
                                numPoints=1;
                            case 'spat'
                                numChans=1;
                            case 'freq'
                                numFreqs=1;
                        end
                        switch EPoverview.workData.pca.PCAmode2
                            case 'temp'
                                numPoints=1;
                            case 'spat'
                                numChans=1;
                            case 'freq'
                                numFreqs=1;
                        end
                        switch EPoverview.workData.pca.PCAmode3
                            case 'temp'
                                numPoints=1;
                            case 'spat'
                                numChans=1;
                            case 'freq'
                                numFreqs=1;
                        end
                        numRows=numChans*numPoints*numCells*numSubs*numFreqs*numRels;
                        rowNames=cell(numRows,1);
                        rowCounter=1;
                        for iRel=1:numRels
                            theName='';
                            theRel=' ';
                            if numRels > 1
                                theRel=EPoverview.workData.pca.relNames{iRel};
                                theName=[theRel '-'];
                            end
                            for iFreq=1:numFreqs
                                theName2=theName;
                                theFreq=' ';
                                if numFreqs > 1
                                    theFreq=EPoverview.workData.pca.freqNames{iFreq};
                                    theName2=[theName2 theFreq '-'];
                                end
                                for iSub=1:numSubs
                                    theName3=theName2;
                                    theSub=' ';
                                    if numSubs > 1
                                        theSub=EPoverview.workData.pca.subNames{iSub};
                                        theName3=[theName3 theSub '-'];
                                    end
                                    for iCell=1:numCells
                                        theName4=theName3;
                                        theCell=' ';
                                        if numCells > 1
                                            theCell=EPoverview.workData.pca.cellNames{iCell};
                                            theName4=[theName4 theCell '-'];
                                        end
                                        for iPoint=1:numPoints
                                            theName5=theName4;
                                            thePoint=' ';
                                            if numPoints > 1
                                                thePoint=num2str(EPoverview.workData.pca.timeNames(iPoint));
                                                theName5=[theName5 thePoint '-'];
                                            end
                                            for iChan=1:numChans
                                                theName6=theName5;
                                                theChan=' ';
                                                if numChans > 1
                                                    theChan=EPoverview.workData.pca.chanNames{iChan};
                                                    theName6=[theName6 theChan '-'];
                                                end
                                                rowNames{rowCounter}=theName6(1:end-1);
                                                labelNames{rowCounter,1}=theChan;
                                                labelNames{rowCounter,2}=thePoint;
                                                labelNames{rowCounter,3}=theCell;
                                                labelNames{rowCounter,4}=theSub;
                                                labelNames{rowCounter,5}=theFreq;
                                                labelNames{rowCounter,6}=theRel;
                                                rowCounter=rowCounter+1;
                                            end
                                        end
                                    end
                                end
                            end
                        end  
                        rowNames=rowNames(~EPoverview.workData.pca.badObs3(:,1)); %assumes same for all of the factors
                    end
                case 'FacCof3'
                    PCAdata=EPoverview.workData.pca.FacCof3;
                    tableNames=EPoverview.workData.pca.facNames3;
                case 'FacCor3'
                    PCAdata=EPoverview.workData.pca.FacCor3;
                    tableNames=EPoverview.workData.pca.facNames3;
                case 'ScFacPat3'
                    for iFac1=1:EPoverview.workData.pca.numFacs
                        for iFac2=1:EPoverview.workData.pca.numFacs2
                            for iFac3=1:EPoverview.workData.pca.numFacs3
                                theFac=iFac3+(iFac2-1)*EPoverview.workData.pca.numFacs3+(iFac1-1)*EPoverview.workData.pca.numFacs2*EPoverview.workData.pca.numFacs3;
                                PCAdata(:,theFac)=EPoverview.workData.pca.varSD3(iFac2+(iFac1-1)*EPoverview.workData.pca.numFacs2,:)'.*EPoverview.workData.pca.FacPat3(:,theFac);
                            end
                        end
                    end
                    tableNames=EPoverview.workData.pca.facNames3;
            end
            
            tableData=num2cell(PCAdata);
            if ~isempty(labelNames)
                tableData=[labelNames tableData]; 
            end
            
            columnEditable =  repmat(false,1,length(tableNames));
            
            ColumnFormat = repmat([],1,length(tableNames));
            
            EPoverview.handles.PCA.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
                'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
                'RearrangeableColumns','on',...
                'Tag','dataTable',...
                'Position',[100 120 windowWidth-200 windowHeight-240]);
            
            EPoverview.handles.PCA.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
                'Tag','export',...
                'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''exportPCA'');');
            
        end
        
        
        callBackEnd=['ep_editData(''start'');'];
        
        
        if isfield(EPoverview.workData.pca,'PCAmode')
            EPoverview.handles.PCA.Summary = uicontrol('Style', 'pushbutton', 'String', 'Summary','FontSize',EPmain.fontsize,...
                'Tag','Summary',...
                'Position', [100 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''Summary'';',callBackEnd]);
            if isfield(EPoverview.workData.pca,'FacPat')
                EPoverview.handles.PCA.FacPat = uicontrol('Style', 'pushbutton', 'String', 'FacPat','FontSize',EPmain.fontsize,...
                    'Tag','FacPat',...
                    'Position', [170 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacPat'';',callBackEnd]);
                EPoverview.handles.PCA.ScFacPat = uicontrol('Style', 'pushbutton', 'String', 'ScFacPat','FontSize',EPmain.fontsize,...
                    'Tag','ScFacPat',...
                    'Position', [520 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''ScFacPat'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacStr')
                EPoverview.handles.PCA.FacStr = uicontrol('Style', 'pushbutton', 'String', 'FacStr','FontSize',EPmain.fontsize,...
                    'Tag','FacStr',...
                    'Position', [240 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacStr'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacScr')
                EPoverview.handles.PCA.FacScr = uicontrol('Style', 'pushbutton', 'String', 'FacScr','FontSize',EPmain.fontsize,...
                    'Tag','FacScr',...
                    'Position', [310 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacScr'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacCof')
                EPoverview.handles.PCA.FacCof = uicontrol('Style', 'pushbutton', 'String', 'FacCof','FontSize',EPmain.fontsize,...
                    'Tag','FacCof',...
                    'Position', [380 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacCof'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacCor')
                EPoverview.handles.PCA.FacCor = uicontrol('Style', 'pushbutton', 'String', 'FacCor','FontSize',EPmain.fontsize,...
                    'Tag','FacCor',...
                    'Position', [450 80 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacCor'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacPatST')
                EPoverview.handles.PCA.FacPatST = uicontrol('Style', 'pushbutton', 'String', 'FacPatST','FontSize',EPmain.fontsize,...
                    'Tag','FacPatST',...
                    'Position', [170 50 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacPatST'';',callBackEnd]);
                EPoverview.handles.PCA.ScFacPatST = uicontrol('Style', 'pushbutton', 'String', 'ScFacPatST','FontSize',EPmain.fontsize,...
                    'Tag','ScFacPatST',...
                    'Position', [520 50 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''ScFacPatST'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacStrST')
                EPoverview.handles.PCA.FacStrST = uicontrol('Style', 'pushbutton', 'String', 'FacStrST','FontSize',EPmain.fontsize,...
                    'Tag','FacStrST',...
                    'Position', [240 50 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacStrST'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacScrST')
                EPoverview.handles.PCA.FacScrST = uicontrol('Style', 'pushbutton', 'String', 'FacScrST','FontSize',EPmain.fontsize,...
                    'Tag','FacScrST',...
                    'Position', [310 50 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacScrST'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacCofST')
                EPoverview.handles.PCA.FacCofST = uicontrol('Style', 'pushbutton', 'String', 'FacCofST','FontSize',EPmain.fontsize,...
                    'Tag','FacCofST',...
                    'Position', [380 50 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacCofST'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacCorST')
                EPoverview.handles.PCA.FacCorST = uicontrol('Style', 'pushbutton', 'String', 'FacCorST','FontSize',EPmain.fontsize,...
                    'Tag','FacCorST',...
                    'Position', [450 50 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacCorST'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacPat3')
                EPoverview.handles.PCA.FacPat3 = uicontrol('Style', 'pushbutton', 'String', 'FacPat3','FontSize',EPmain.fontsize,...
                    'Tag','FacPat3',...
                    'Position', [170 20 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacPat3'';',callBackEnd]);
                EPoverview.handles.PCA.ScFacPat3 = uicontrol('Style', 'pushbutton', 'String', 'ScFacPat3','FontSize',EPmain.fontsize,...
                    'Tag','ScFacPat3',...
                    'Position', [520 20 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''ScFacPat3'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacStr3')
                EPoverview.handles.PCA.FacStr3 = uicontrol('Style', 'pushbutton', 'String', 'FacStr3','FontSize',EPmain.fontsize,...
                    'Tag','FacStr3',...
                    'Position', [240 20 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacStr3'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacScr3')
                EPoverview.handles.PCA.FacScr3 = uicontrol('Style', 'pushbutton', 'String', 'FacScr3','FontSize',EPmain.fontsize,...
                    'Tag','FacScr3',...
                    'Position', [310 20 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacScr3'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacCof3')
                EPoverview.handles.PCA.FacCof3 = uicontrol('Style', 'pushbutton', 'String', 'FacCof3','FontSize',EPmain.fontsize,...
                    'Tag','FacCof3',...
                    'Position', [380 20 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacCof3'';',callBackEnd]);
            end
            if isfield(EPoverview.workData.pca,'FacCor3')
                EPoverview.handles.PCA.FacCor3 = uicontrol('Style', 'pushbutton', 'String', 'FacCor3','FontSize',EPmain.fontsize,...
                    'Tag','FacCor3',...
                    'Position', [450 20 65 35], 'Callback', ['global EPoverview;','EPoverview.PCA.mode=''FacCor3'';',callBackEnd]);
            end
        end
        
        switch EPoverview.PCA.mode
            case 'Summary'
                set(EPoverview.handles.PCA.Summary,'ForegroundColor','blue');
            case 'FacPat'
                set(EPoverview.handles.PCA.FacPat,'ForegroundColor','blue');
            case 'FacStr'
                set(EPoverview.handles.PCA.FacStr,'ForegroundColor','blue');
            case 'FacScr'
                set(EPoverview.handles.PCA.FacScr,'ForegroundColor','blue');
            case 'FacCof'
                set(EPoverview.handles.PCA.FacCof,'ForegroundColor','blue');
            case 'FacCor'
                set(EPoverview.handles.PCA.FacCor,'ForegroundColor','blue');
            case 'ScFacPat'
                set(EPoverview.handles.PCA.ScFacPat,'ForegroundColor','blue');
            case 'FacPatST'
                set(EPoverview.handles.PCA.FacPatST,'ForegroundColor','blue');
            case 'FacStrST'
                set(EPoverview.handles.PCA.FacStrST,'ForegroundColor','blue');
            case 'FacScrST'
                set(EPoverview.handles.PCA.FacScrST,'ForegroundColor','blue');
            case 'FacCofST'
                set(EPoverview.handles.PCA.FacCofST,'ForegroundColor','blue');
            case 'FacCorST'
                set(EPoverview.handles.PCA.FacCorST,'ForegroundColor','blue');
            case 'ScFacPatST'
                set(EPoverview.handles.PCA.ScFacPatST,'ForegroundColor','blue');
            case 'FacPat3'
                set(EPoverview.handles.PCA.FacPat3,'ForegroundColor','blue');
            case 'FacStr3'
                set(EPoverview.handles.PCA.FacStr3,'ForegroundColor','blue');
            case 'FacScr3'
                set(EPoverview.handles.PCA.FacScr3,'ForegroundColor','blue');
            case 'FacCof3'
                set(EPoverview.handles.PCA.FacCof3,'ForegroundColor','blue');
            case 'FacCor3'
                set(EPoverview.handles.PCA.FacCor3,'ForegroundColor','blue');
            case 'ScFacPat3'
                set(EPoverview.handles.PCA.ScFacPat3,'ForegroundColor','blue');
        end
        
    case 'startSess'
        
        if ~isempty(EPoverview.workData.sessNums)
            maxSubs=max(histcounts(EPoverview.workData.sessNums,length(unique(EPoverview.workData.sessNums))));
        else
            maxSubs=numSubs;
        end
        
        tableData=cell(numSess+1,maxSubs+3);
        for iSess=1:numSess+1
            tableData{iSess,1}=iSess;
            tableData{iSess,2}=EPoverview.workMeta.sessions.select(iSess);
            if iSess==1
                tableData{iSess,3}='n/a';
                subList=EPoverview.workData.subNames;
            else
                tableData{iSess,3}=EPoverview.workData.sessNames{iSess-1};
                if ~isempty(EPoverview.workData.sessNums)
                    subList=EPoverview.workData.subNames(find((iSess-1)==EPoverview.workData.sessNums));
                else
                    subList=cell(0);
                end
            end
            tableData(iSess,4:3+length(subList))=subList;
        end
        
        tableNames{1}='order';
        tableNames{2}='select';
        tableNames{3}='sessions';
        
        numNames=size(tableNames,2);
        
        columnEditable =  [repmat(true,1,numNames) repmat(false,1,maxSubs)];
        
        ColumnFormat=cell(1,numNames+maxSubs);
        ColumnFormat{1}='numeric';
        ColumnFormat{2}='logical';
        
        EPoverview.handles.sessions.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
            'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,...
            'RearrangeableColumns','on',...
            'Tag','dataTable',...
            'CellEditCallback',@editSess,'Position',[100 100 windowWidth-200 windowHeight-220]);
        
        EPoverview.handles.sessions.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-250 60 30], 'Callback', 'ep_editData(''deleteSess'');');
        EPoverview.handles.sessions.add = uicontrol('Style', 'pushbutton', 'String', 'Add','FontSize',EPmain.fontsize,...
            'Tag','add',...
            'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''addSess'');');
        
        EPoverview.handles.sessions.clear = uicontrol('Style', 'pushbutton', 'String', 'Clear','FontSize',EPmain.fontsize,...
            'Tag','clear',...
            'Position', [20 windowHeight-370 60 30], 'Callback', 'ep_editData(''clearSessWeights'');');
        EPoverview.handles.sessions.all = uicontrol('Style', 'pushbutton', 'String', 'All','FontSize',EPmain.fontsize,...
            'Tag','all',...
            'Position', [20 windowHeight-400 60 30], 'Callback', 'ep_editData(''allSess'');');
    
    case 'startSpecs'
        
        for iSub=1:numSubs
            tableData{iSub,1}=iSub;
            tableData{iSub,2}=EPoverview.workMeta.subjects.select(iSub);
        end
        tableData(:,3)=EPoverview.workData.subNames;
        if ~isempty(EPoverview.workData.trialSpecNames)
            tableData(:,4:length(EPoverview.workData.cellNames)+3)=squeeze(EPoverview.workData.trialSpecs(:,EPoverview.theSpec,:))';
        end

        tableNames{1}='order';
        tableNames{2}='select';
        tableNames{3}='subjects';
        tableNames(4:length(EPoverview.workData.cellNames)+3)=EPoverview.workData.cellNames;

        columneditable =  [false true false repmat(true,1,length(EPoverview.workData.cellNames))];

        EPoverview.handles.specs.import = uicontrol('Style', 'pushbutton', 'String', 'Import','FontSize',EPmain.fontsize,...
            'Tag','import',...
            'Position', [20 windowHeight-460 60 30], 'Callback', 'ep_editData(''importSpecs'');');
        EPoverview.handles.specs.export = uicontrol('Style', 'pushbutton', 'String', 'Export','FontSize',EPmain.fontsize,...
            'Tag','export',...
            'Position', [20 windowHeight-490 60 30], 'Callback', 'ep_editData(''exportSpecs'');');
        EPoverview.handles.specs.addSpec = uicontrol('Style', 'pushbutton', 'String', '+ Spec','FontSize',EPmain.fontsize,...
            'Tag','addSpec',...
            'Position', [20 windowHeight-520 60 30], 'Callback', 'ep_editData(''addSpecs'');');

        compMenu={'<','<=','>','>=','=','~='};

        EPoverview.handles.specs.greenComp = uicontrol('Style', 'popupmenu', 'String', compMenu,'FontSize',EPmain.fontsize, 'Value', EPoverview.specs.greenComp,'ForegroundColor','Green',...
            'CallBack',['global EPoverview;','EPoverview.specs.greenComp=get(EPoverview.handles.specs.greenComp,''Value'');','ep_editData(''startSpecs'');'],...
            'Tag','greenComp',...
            'Position', [20 windowHeight-580 40 30]);

        EPoverview.handles.specs.greenVal = uicontrol('Style', 'edit', 'String', EPoverview.specs.greenVal,'FontSize',EPmain.fontsize,...
            'CallBack',['global EPoverview;','EPoverview.specs.greenVal=get(EPoverview.handles.specs.greenVal,''String'');','ep_editData(''startSpecs'');'],...
            'Tag','greenVal',...
            'Position', [60 windowHeight-570 40 20]);

        EPoverview.handles.specs.redComp = uicontrol('Style', 'popupmenu', 'String', compMenu,'FontSize',EPmain.fontsize, 'Value', EPoverview.specs.redComp,'ForegroundColor','Red',...
            'CallBack',['global EPoverview;','EPoverview.specs.redComp=get(EPoverview.handles.specs.redComp,''Value'');','ep_editData(''startSpecs'');'],...
            'Tag','redComp',...
            'Position', [20 windowHeight-600 40 30]);

        EPoverview.handles.specs.redVal = uicontrol('Style', 'edit', 'String', EPoverview.specs.redVal,'FontSize',EPmain.fontsize,...
            'CallBack',['global EPoverview;','EPoverview.specs.redVal=get(EPoverview.handles.specs.redVal,''String'');','ep_editData(''startSpecs'');'],...
            'Tag','redVal',...
            'Position', [60 windowHeight-590 40 20]);


        if ~isempty(EPoverview.workData.trialSpecNames)
            EPoverview.handles.specs.minusSpec = uicontrol('Style', 'pushbutton', 'String', '- Spec','FontSize',EPmain.fontsize,...
                'Tag','minusSpec',...
                'Position', [20 windowHeight-550 60 30], 'Callback', 'ep_editData(''minusSpecs'');');
            %             if ~verLessThan('matlab', '9.7')
            %                 theString={'=';'~=';'<';'>';'<=';'>='};
            %                 EPoverview.handles.specs.highSign = uicontrol('Style', 'popupmenu', 'Value', find(strcmp(EPoverview.highSign,theString)), 'String', theString,'FontSize',EPmain.fontsize,...
            %                     'Position', [10 windowHeight-600 40 30], 'Callback', 'ep_editData(''highlightSpec'');');
            %                 EPoverview.handles.specs.highValue = uicontrol('Style', 'edit', 'String', EPoverview.highValue,'FontSize',EPmain.fontsize,...
            %                     'Position', [50 windowHeight-590 45 20], 'Callback', 'ep_editData(''highlightSpec'');');
            %             end
            EPoverview.handles.specs.theSpec = uicontrol('Style', 'popupmenu', 'Value', EPoverview.theSpec, 'String', EPoverview.workData.trialSpecNames,'FontSize',EPmain.fontsize,...
                'Tag','theSpec',...
                'Position', [20 windowHeight-660 60 30], 'Callback', 'ep_editData(''changeSpec'');');

            redColor = dec2hex(round([1 0 0]*255),2)'; redColor = ['#';redColor(:)]';
            greenColor = dec2hex(round([0 1 0]*255),2)'; greenColor = ['#';greenColor(:)]';

            greenVal=str2double(EPoverview.specs.greenVal);
            redVal=str2double(EPoverview.specs.redVal);

            for iRow=1:size(tableData,1)
                for iCol=3:size(tableData,2)
                    if isnumeric(tableData{iRow,iCol})
                        theNum=tableData{iRow,iCol};
                        cellState=0;
                        if ~isnan(greenVal)
                            switch EPoverview.specs.greenComp
                                case 1
                                    if theNum < greenVal
                                        cellState=1;
                                    end
                                case 2
                                    if theNum <= greenVal
                                        cellState=1;
                                    end
                                case 3
                                    if theNum > greenVal
                                        cellState=1;
                                    end
                                case 4
                                    if theNum >= greenVal
                                        cellState=1;
                                    end
                                case 5
                                    if theNum == greenVal
                                        cellState=1;
                                    end
                                case 6
                                    if theNum ~= greenVal
                                        cellState=1;
                                    end
                            end
                        end
                        if ~isnan(redVal)
                            switch EPoverview.specs.redComp
                                case 1
                                    if theNum < redVal
                                        cellState=2;
                                    end
                                case 2
                                    if theNum <= redVal
                                        cellState=2;
                                    end
                                case 3
                                    if theNum > redVal
                                        cellState=2;
                                    end
                                case 4
                                    if theNum >= redVal
                                        cellState=2;
                                    end
                                case 5
                                    if theNum == redVal
                                        cellState=2;
                                    end
                                case 6
                                    if theNum ~= redVal
                                        cellState=2;
                                    end
                            end
                            switch cellState
                                case 0
                                    tableData{iRow,iCol}=num2str(tableData{iRow,iCol});
                                case 1
                                    tableData{iRow,iCol}=strcat(['<html><body text="' greenColor '" width="100px">'],num2str(tableData{iRow,iCol}));
                                case 2
                                    tableData{iRow,iCol}=strcat(['<html><body text="' redColor '" width="100px">'],num2str(tableData{iRow,iCol}));
                            end
                        end
                    end
                end
            end

            EPoverview.handles.specs.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
                'ColumnEditable', columneditable,...
                'RearrangeableColumns','on',...
                'Tag','dataTable',...
                'CellEditCallback',@editSpecs,'Position',[100 100 windowWidth-200 windowHeight-220]);

        else
            EPoverview.handles.specs.dataTable = uicontrol('Style','text','HorizontalAlignment','left','String', 'No specs in this data.','FontSize',EPmain.fontsize,...
                'Position',[130 windowHeight-200 200 30]);
        end
        
    case 'startHistory'
        
        tableData=cell(size(EPoverview.workData.history,1),10);
%         EPoverview.workMeta.history.select=repmat(false,size(tableData,1),1);
        for iChange=1:size(tableData,1)
            tableData{iChange,1}=iChange;
            tableData{iChange,2}=EPoverview.workMeta.history.select(iChange);
            tableData{iChange,3}=EPoverview.workData.history{iChange,2};
            tableData{iChange,4}=char(EPoverview.workData.history{iChange,1}.time);
            tableData{iChange,5}=EPoverview.workData.history{iChange,1}.EPversion;
            tableData{iChange,6}=EPoverview.workData.history{iChange,1}.user;
            tableData{iChange,7}=EPoverview.workData.history{iChange,1}.lab;
            tableData{iChange,8}=EPoverview.workData.history{iChange,1}.institution;
            tableData{iChange,9}=EPoverview.workData.history{iChange,1}.project;
            tableData{iChange,10}=EPoverview.workData.history{iChange,1}.experiment;
            
            % if ~isempty(EPoverview.workData.history{iChange,5})
            %     if ~iscell(EPoverview.workData.history{iChange,5})
            %         nameList=[nameList ',' EPoverview.workData.history{iChange,5}];
            %     else
            %         % for iName=1:length(EPoverview.workData.history{iChange,5})
            %         %     nameList=[nameList ',' EPoverview.workData.history{iChange,5}{iName}];
            %         % end
            %     end
            %     nameList=nameList(2:end);
            % end
        end
        
        eventLength=cellfun(@length,tableData);
        
        tableNames{1}='order';
        tableNames{2}='select';
        tableNames{3}='description';
        tableNames{4}='time';
        tableNames{5}='version';
        tableNames{6}='user';
        tableNames{7}='lab';
        tableNames{8}='institution';
        tableNames{9}='project';
        tableNames{10}='experiment';
        
        numNames=size(tableNames,2);
        
        columnEditable =  repmat(true,1,numNames);
        
        ColumnFormat=cell(1,numNames);
        ColumnFormat{1}='numeric';
        ColumnFormat{2}='logical';

        colWidth=max(eventLength,[],1)*7;
        colWidth(colWidth<80)=80;

        nameList='';

        if ~isempty(tableData)
            EPoverview.handles.history.dataTable = uitable('Data',tableData,'ColumnName',tableNames,'FontSize',EPmain.fontsize,...
                'ColumnEditable', columnEditable, 'ColumnFormat', ColumnFormat,'ColumnWidth',num2cell(colWidth),...
                'Tag','dataTable',...
                'CellEditCallback',@editHistory,'Position',[100 100 windowWidth-200 windowHeight-220]);
        else
            EPoverview.handles.history.dataTable = uicontrol('Style','text','HorizontalAlignment','left','String', 'No history in this data.','FontSize',EPmain.fontsize,...
                'Position',[130 windowHeight-200 200 30]);
        end

        if ~isempty(EPoverview.history.fileNames)
            EPoverview.handles.history.nameList = uicontrol('Style','popupmenu','FontSize',EPmain.fontsize,...
                'String',EPoverview.history.fileNames,...
                'Value',1,'Position',[10 20 windowWidth-20 20],'TooltipString','List of file names selected for operation.');
        end

        EPoverview.handles.history.delete = uicontrol('Style', 'pushbutton', 'String', 'Delete','FontSize',EPmain.fontsize,...
            'Tag','delete',...
            'Position', [20 windowHeight-250 60 30], 'Callback', 'ep_editData(''deleteHistory'');');
        EPoverview.handles.history.add = uicontrol('Style', 'pushbutton', 'String', 'Add','FontSize',EPmain.fontsize,...
            'Tag','add',...
            'Position', [20 windowHeight-280 60 30], 'Callback', 'ep_editData(''addHistory'');');

    case 'renameDataName'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newName=get(EPoverview.handles.overview.dataName,'String');
        
        EPoverview.workData.dataName=newName;
        
        theDescription=['Changed the Dataset Name using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;
        
        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'renameExp'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newName=get(EPoverview.handles.overview.ename,'String');
        
        EPoverview.workData.ename=newName;
        
        theDescription=['Changed the Experiment Name using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'montage'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        montageList=get(EPoverview.handles.overview.montage,'String');
        newMontage=get(EPoverview.handles.overview.montage,'Value');
        
        EPoverview.workData.montage=montageList{newMontage};
        
        theDescription=['Changed the Montage using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'Fs'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        if strcmp(EPoverview.mode,'overview')
            newFs=str2num(get(EPoverview.handles.overview.Fs,'String'));
        elseif strcmp(EPoverview.mode,'samples')
            newFs=str2num(get(EPoverview.handles.samples.Fs,'String'));
        else
            msg{1}='Sampling rate change not supported from this pane.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        EPoverview.workData.timeNames=(EPoverview.workData.timeNames/(1000/EPoverview.workData.Fs))*(1000/newFs);
        EPoverview.workData.Fs=newFs;
        
        if strcmp(EPoverview.workData.dataType,'continuous')
            numEpochs=floor(size(EPoverview.workData.data,2)/ceil(EPoverview.workData.Fs)); %excess time points are tacked onto final epoch
            if numEpochs == 0
                numEpochs =1;
            end
            EPoverview.workData.analysis.blinkTrial=zeros(numSubs,numEpochs);
            EPoverview.workData.analysis.saccadeTrial=zeros(numSubs,numEpochs);
            EPoverview.workData.analysis.saccadeOnset=zeros(numSubs,numEpochs);
            EPoverview.workData.analysis.moveTrial=zeros(numSubs,numEpochs);
            EPoverview.workData.analysis.badTrials=zeros(numSubs,numEpochs);
            EPoverview.workData.analysis.badChans=zeros(numSubs,numEpochs,numChan);
            disp('Resetting artifact correction fields to zero since length of one-second epochs has been changed.');
        end
        
        theDescription=['Changed the Sampling Rate using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'baseline'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        if strcmp(EPoverview.mode,'overview')
            newBaseline=(str2num(get(EPoverview.handles.overview.baseline,'String')))/(1000/EPoverview.workData.Fs);
        elseif strcmp(EPoverview.mode,'samples')
            newBaseline=(str2num(get(EPoverview.handles.samples.baseline,'String')))/(1000/EPoverview.workData.Fs);
        else
            msg{1}='Baseline change not supported from this pane.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        EPoverview.workData.timeNames=(((0:length(EPoverview.workData.timeNames)-1)+EPoverview.workData.baseline)*(1000/EPoverview.workData.Fs));
        
        EPoverview.workData.baseline=newBaseline;
        
        EPoverview.workData.timeNames=(((0:length(EPoverview.workData.timeNames)-1)-newBaseline)*(1000/EPoverview.workData.Fs));
        
        EPoverview.workData.timeNames=EPoverview.workData.timeNames(:); %make sure is a column vector
        
        theDescription=['Changed the Prestimulus Period using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'refType'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newRefType=get(EPoverview.handles.overview.refType,'Value');
        
        if strcmp(refTypes{newRefType},'unknown')
            EPoverview.workData.reference.type='';
        else
            EPoverview.workData.reference.type=refTypes{newRefType};
        end
        
        theDescription=['Changed the Reference Type using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'origRefChans1'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newChan=str2num(get(EPoverview.handles.overview.origRefChans1,'String'));
        
        EPoverview.workData.reference.original(1)=newChan;
         
        theDescription=['Changed the Original Reference Channel1 using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'origRefChans2'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newChan=str2num(get(EPoverview.handles.overview.origRefChans2,'String'));
        
        EPoverview.workData.reference.original(2)=newChan;
         
        theDescription=['Changed the Original Reference Channel2 using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'currRefChans1'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newChan=str2num(get(EPoverview.handles.overview.currRefChans1,'String'));
        
        EPoverview.workData.reference.current(1)=newChan;
         
        theDescription=['Changed the Current Reference Channel1 using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'currRefChans2'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        newChan=str2num(get(EPoverview.handles.overview.currRefChans2,'String'));
        
        EPoverview.workData.reference.current(2)=newChan;
         
        theDescription=['Changed the Current Reference Channel2 using Overview Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;

        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    
    case 'cedmenu'

        windowHeight=100;
        EPmain.handles.CEDmenu = figure('Name', 'CED options (.CED or .sfp)', 'NumberTitle', 'off', 'Position',[scrsz(1) scrsz(4)-windowHeight 400 windowHeight], 'MenuBar', 'none');

        EPoverview.CEDmenu.montage=EPoverview.workData.montage;
        uicontrol('Style','text','HorizontalAlignment','left','String', 'Montage for new coordinates file','FontSize',EPmain.fontsize,...
            'Position',[10 60 250 20]);
        EPoverview.handles.CEDmenu.montage = uicontrol('Style','popupmenu','FontSize',EPmain.fontsize,...
            'String',EPmain.montageList,...
            'CallBack',['global EPmain;','EPoverview.CEDmenu.montage=EPmain.montageList{get(EPoverview.handles.CEDmenu.montage,''Value'')};'],...
            'TooltipString','The montage of the input data to be segmented.',...
            'Tag','importMontage',...
            'Value',find(strcmp(EPoverview.CEDmenu.montage,EPmain.montageList)),'Position',[10 40 250 20]);

        EPoverview.handles.CEDmenu.options = uicontrol('Style','popupmenu','HorizontalAlignment','left','String', {'cancel';'delete CED info';'convert coordinates to canonical head space'; 'apply CED as if to raw data';'replace electrode coordinates';'remap EEG to new electrodes'},'FontSize',EPmain.fontsize,...
            'Tag','ced',...
            'Position',[10 20 380 20],'Value',1,'Callback', ['ep_editData(''ced'');']);

    case 'ced'

        ep_tictoc('begin');
        EPmain.edit.handleList = ep_disableGUI(EPoverview.handles.hEditWindow);
        
        CEDnum = get(EPoverview.handles.CEDmenu.options,'Value');
        close(EPmain.handles.CEDmenu);

        switch CEDnum
            case 1
                CEDoption='cancel';
            case 2
                CEDoption='delete';
                theDescription=['Deleted the EEG Channel Coordinates using the Edit Function.'];
            case 3
                CEDoption='canonical';
                theDescription=['Changed the EEG Channel Coordinates to the canonical values using the Edit Function.'];
            case 4
                CEDoption='read';
                theDescription=['Applied EEG Channel Coordinate information as if for first time using the Edit Function.'];
            case 5
                CEDoption='replace';
                theDescription=['Replaced the EEG Channel Coordinates with those from a new file using the Edit Function.'];
            case 6
                CEDoption='remap';
                theDescription=['Remapped the EEG data to channel locations from a new file using the Edit Function.'];
            otherwise
                msg{1}=['Programmer error: CED option not recognized.'];
                [msg]=ep_errorMsg(msg);
                ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                return
        end

        if any(strcmp({'delete'; 'canonical';'read';'replace';'remap'},CEDoption))
            tempData=EPoverview.workData;
        end
 
        if strcmp('remap',CEDoption) && isempty(tempData.eloc)
            msg{1}=['Cannot remap as there is currently no electrode coordinates.'];
            [msg]=ep_errorMsg(msg);
            ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
            return
        end
       
        if any(strcmp({'delete'; 'read';'replace';'remap'},CEDoption))
            tempData.ced='none';
            tempData.eloc=[];
            tempData.implicit=[];
            tempData.montage=EPoverview.CEDmenu.montage;
        end

        montageList=ep_montage;
        if any(strcmp({'read';'replace';'remap'},CEDoption)) || (strcmp('canonical',CEDoption) && isempty(tempData.eloc) && any(strcmp(montageList(1:end-1),tempData.montage)))
            thisFile = mfilename('fullpath');
            [pathstr, name, ext] = fileparts(thisFile);
            theSeps=findstr(pathstr,filesep);
            pathstr=[pathstr(1:theSeps(end)-1) filesep 'electrodes'];
            [ced, pathstr] = uigetfile('*.ced;*.sfp',['Electrode Coordinate file (' num2str(length(tempData.chanNames)) ' channels):'],pathstr);
            whichCED=[pathstr ced];
            if strcmp(ced(end-3:end),'.ced')
                try
                    evalc('newElocs = ep_readlocsWrapper([whichCED],''filetype'',''chanedit'');');
                    if EPtictoc.stop;EPtictoc.stop=0;ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);return;end
                catch
                    msg{1}=['The ced file ' ced ' did not work for some reason.  The error message was:'];
                    msg{2}=lasterr;
                    [msg]=ep_errorMsg(msg);
                    ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                    return
                end
            elseif strcmp(ced(end-3:end),'.sfp')
                newElocs=ep_readlocsWrapper(whichCED,'filetype','sfp');
                % newEEG=find(~strcmp({tempElocs.type},'FID'));
                % EEGchans=find(strcmp(tempData.chanTypes,'EEG'));
                % nonEEGchans=find(~strcmp(tempData.chanTypes,'EEG'));
                % newElocs=tempElocs(1);
                % newElocs(1)=[];
                % newElocs(EEGchans,1)=tempElocs(newEEG);
                % for iChan=1:length(nonEEGchans)
                %     theChan=nonEEGchans(iChan);
                %     newElocs(theChan).labels=tempData.chanNames{nonEEGchans};
                %     newElocs(theChan).type=tempData.chanTypes{nonEEGchans};
                % end
            else
                msg{1}=['The ced file ' ced ' did not end in .ced or .sfp'];
                [msg]=ep_errorMsg(msg);
                ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                return
            end

            if ~strcmp('canonical',CEDoption)
                tempData=ep_addEloc(whichCED,newElocs,'ep_mat',tempData,'off',CEDoption);
                if EPtictoc.stop;EPtictoc.stop=0;ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);return;end
                if ~isempty(tempData) && ~isempty(tempData.eloc)
                    %add canonical 10-05 electrode coordinates
                    [outEloc, outFid] = ep_transformEloc(tempData.eloc, tempData.implicit, '', '', tempData.chanNames, '', tempData.montage, '');
                    if isempty(outEloc)
                        ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                        return
                    end
                    for iChan=1:length(tempData.eloc)
                        tempData.eloc(iChan).cX=outEloc(iChan).X;
                        tempData.eloc(iChan).cY=outEloc(iChan).Y;
                        tempData.eloc(iChan).cZ=outEloc(iChan).Z;
                    end
                    for iChan=1:length(tempData.implicit)
                        tempData.implicit(iChan).cX=outFid(iChan).X;
                        tempData.implicit(iChan).cY=outFid(iChan).Y;
                        tempData.implicit(iChan).cZ=outFid(iChan).Z;
                    end
                else
                    msg{1}=['The ced file ' ced ' did not work for some reason.'];
                    [msg]=ep_errorMsg(msg);
                    ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                    return
                end
            end

            if strcmp('remap',CEDoption)
                sevenDdataIn=EPoverview.workData.data;
                oldElocs=EPoverview.workData.eloc;
                hasLocsOld=find(~cellfun(@isempty,{oldElocs.theta}));
                hasLocsNew=find(~cellfun(@isempty,{tempData.eloc.theta}));
                [sevenDdata]=ep_interpChans(sevenDdataIn(hasLocsOld,:,:,:,:,:,:,:), oldElocs(hasLocsOld), tempData.eloc(hasLocsNew));
                if EPtictoc.stop;EPtictoc.stop=0;ep_tictoc('done');ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);return;end
                if isempty(sevenDdata)
                    ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                    return
                end
                tempData.data(hasLocsNew,:,:,:,:,:,:,:)=sevenDdata;
            end

            tempData.ced=ced;
        end

        if strcmp('canonical',CEDoption)
            tempData.ced='Standard-10-5-Cap385-VEOG.ced';
            eloc = ep_readlocsWrapper(tempData.ced,'filetype','chanedit');
            if EPtictoc.stop;EPtictoc.stop=0;ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);return;end
            
            if isempty(tempData.eloc) && any(strcmp(montageList(1:end-1),tempData.montage)) %if EGI data with no eloc
                tempData=ep_addEloc(whichCED,newElocs,'ep_mat',tempData,'off','replace'); %add the standard EGI eloc to the data
                if isempty(tempData.eloc)
                    ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                    return
                end
                [tempData.eloc tempData.implicit] = ep_transformEloc(tempData.eloc, tempData.implicit, [], [], tempData.chanNames, [], ced, '');  %convert it to canonical head space
                if isempty(tempData.eloc)
                    ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
                    return
                end

                for iChan=1:length(EPoverview.workData.chanNames)
                    tempData.eloc(iChan).type=tempData.chanTypes{iChan};
                    tempData.eloc(iChan).cX=tempData.eloc(iChan).X;
                    tempData.eloc(iChan).cY=tempData.eloc(iChan).Y;
                    tempData.eloc(iChan).cZ=tempData.eloc(iChan).Z;
                end
                for iChan=1:length(tempData.implicit)
                    tempData.implicit(iChan).type=tempData.chanTypes{iChan};
                    tempData.implicit(iChan).cX=tempData.implicit(iChan).X;
                    tempData.implicit(iChan).cY=tempData.implicit(iChan).Y;
                    tempData.implicit(iChan).cZ=tempData.implicit(iChan).Z;
                end
            else
                if isempty(tempData.eloc)
                    tempData.eloc=ep_elocFormat('initialize');
                    tempData.eloc(numChans).type='';
                    tempData.implicit=ep_elocFormat('initialize');
                    tempData.implicit(numChans).type='';
                end
                for iChan=1:length(EPoverview.workData.chanNames)
                    if ~isempty(tempData.eloc) && (~isempty(tempData.eloc(iChan).cX) && ~isempty(tempData.eloc(iChan).cY) && ~isempty(tempData.eloc(iChan).cZ))
                        tempData.eloc(iChan).X=tempData.eloc(iChan).cX;
                        tempData.eloc(iChan).Y=tempData.eloc(iChan).cY;
                        tempData.eloc(iChan).Z=tempData.eloc(iChan).cZ;
                    else
                        theEloc=[];
                        if strcmp(EPoverview.workData.chanTypes{iChan},'EEG')
                            switch EPoverview.workData.chanNames{iChan}
                                case 'LHEOG'
                                    theEloc=find(strcmpi('AFp9',{eloc.labels}));
                                case 'RHEOG'
                                    theEloc=find(strcmpi('AFp10',{eloc.labels}));
                                otherwise
                                    theEloc=find(strcmpi(EPoverview.workData.chanNames{iChan},{eloc.labels}));
                            end
                        end
                        tempData.eloc(iChan).labels=tempData.chanNames{iChan};
                        if ~isempty(theEloc)
                            tempData.eloc(iChan).theta=eloc(theEloc).theta;
                            tempData.eloc(iChan).radius=eloc(theEloc).radius;
                            tempData.eloc(iChan).X=eloc(theEloc).X;
                            tempData.eloc(iChan).Y=eloc(theEloc).Y;
                            tempData.eloc(iChan).Z=eloc(theEloc).Z;
                            tempData.eloc(iChan).sph_theta=eloc(theEloc).sph_theta;
                            tempData.eloc(iChan).sph_phi=eloc(theEloc).sph_phi;
                            tempData.eloc(iChan).sph_radius=eloc(theEloc).sph_radius;
                        else
                            tempData.eloc(iChan).theta=[];
                            tempData.eloc(iChan).radius=[];
                            tempData.eloc(iChan).X=[];
                            tempData.eloc(iChan).Y=[];
                            tempData.eloc(iChan).Z=[];
                            tempData.eloc(iChan).sph_theta=[];
                            tempData.eloc(iChan).sph_phi=[];
                            tempData.eloc(iChan).sph_radius=[];
                        end
                        tempData.eloc(iChan).type=tempData.chanTypes{iChan};
                        tempData.eloc(iChan).cX=tempData.eloc(iChan).X;
                        tempData.eloc(iChan).cY=tempData.eloc(iChan).Y;
                        tempData.eloc(iChan).cZ=tempData.eloc(iChan).Z;
                    end
                end
                for iChan=1:length(tempData.implicit)
                    if ~isempty(tempData.implicit(iChan).cX) && ~isempty(tempData.implicit(iChan).cY) && ~isempty(tempData.implicit(iChan).cZ)
                        tempData.eloc(iChan).X=tempData.eloc(iChan).cX;
                        tempData.eloc(iChan).Y=tempData.eloc(iChan).cY;
                        tempData.eloc(iChan).Z=tempData.eloc(iChan).cZ;
                    else
                        theEloc=find(strcmpi(tempData.implicit{iChan},{eloc.labels}));
                        if ~isempty(theEloc)
                            tempData.implicit(iChan).theta=implicit(theEloc).theta;
                            tempData.implicit(iChan).radius=implicit(theEloc).radius;
                            tempData.implicit(iChan).X=implicit(theEloc).X;
                            tempData.implicit(iChan).Y=implicit(theEloc).Y;
                            tempData.implicit(iChan).Z=implicit(theEloc).Z;
                            tempData.implicit(iChan).sph_theta=implicit(theEloc).sph_theta;
                            tempData.implicit(iChan).sph_phi=implicit(theEloc).sph_phi;
                            tempData.implicit(iChan).sph_radius=implicit(theEloc).sph_radius;
                        else
                            tempData.implicit(iChan).theta=[];
                            tempData.implicit(iChan).radius=[];
                            tempData.implicit(iChan).X=[];
                            tempData.implicit(iChan).Y=[];
                            tempData.implicit(iChan).Z=[];
                            tempData.implicit(iChan).sph_theta=[];
                            tempData.implicit(iChan).sph_phi=[];
                            tempData.implicit(iChan).sph_radius=[];
                        end
                        tempData.implicit(iChan).type=tempData.chanTypes{iChan};
                        tempData.implicit(iChan).cX=tempData.implicit(iChan).X;
                        tempData.implicit(iChan).cY=tempData.implicit(iChan).Y;
                        tempData.implicit(iChan).cZ=tempData.implicit(iChan).Z;
                    end
                end
                tempData.eloc=convertlocs(tempData.eloc,'cart2all');
                tempData.eloc=ep_elocFormat(tempData.eloc);
                tempData.implicit=convertlocs(tempData.implicit,'cart2all');
                tempData.implicit=ep_elocFormat(tempData.implicit);
            end
        end

        if any(strcmp({'delete'; 'canonical';'read';'replace';'remap'},CEDoption))
            tempData.history=ep_addHistory(tempData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workMeta.channels.select=false(length(tempData.chanNames)+length(tempData.implicit),1);
            EPoverview.workMeta.channels.weights=zeros(length(tempData.chanNames)+length(tempData.implicit),1);
            EPoverview.workData=tempData;
            EPoverview.workMeta.history.select(end+1)=0;

            [err]=ep_checkEPfile(EPoverview.workData);
        end

        ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
        ep_tictoc('end');
        ep_editData('start');
        
    case 'deleteSubs'
        if sum(EPoverview.workMeta.subjects.select) ==0
            msg{1}='No subjects specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if sum(EPoverview.workMeta.subjects.select) ==length(EPoverview.workData.subNames)
            msg{1}='There would be nothing left.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        ep_tictoc('begin');
        tempData=EPoverview.workData;
        tempMeta=EPoverview.workMeta;

        keepSubjects=not(tempMeta.subjects.select);
        deleteSubjects=find(tempMeta.subjects.select);

        tempMeta.subjects.weights=zeros(numSubs,1);
        tempMeta.subjects.select=false(numSubs,1);
        
        %update the events index to reflect deleted subjects
        keepEvents=zeros(length(tempMeta.events.select),1);
        eventCounter=0;
        subCounter=0;
        for iSub=1:numSubs
            if keepSubjects(iSub)
                subCounter=subCounter+1;
            end
            for iWave=1:numWaves
                for iEvent=1:length(tempData.events{iSub,iWave})
                    eventCounter=eventCounter+1;
                    keepEvents(eventCounter)=keepSubjects(iSub);
                    tempMeta.events.eventIndex(eventCounter,1)=subCounter;
                end
            end
        end
        tempMeta.events.select=tempMeta.events.select(keepEvents);
        tempMeta.events.eventIndex=tempMeta.events.eventIndex(keepEvents,:);

        if ~isempty(tempMeta.GAVsubs)
            newNumVsubs=max(0,size(tempMeta.GAVsubs,1)-1);
            newGAVorder=[];
            GAVcounter=0;
            GAVdelete=cell(0); %which virtual subs to delete from GAVsubs, but not necessarily the real data.
            subConvert=zeros(numRsubs,1);
            subCounter=0;
            reorderFlag=0;
            for iSub=1:numRsubs
                if keepSubjects(iSub)
                    subCounter=subCounter+1;
                    subConvert(iSub)=subCounter;
                else
                    subConvert(iSub)=NaN;
                end
            end
            for iGAV=1:max(0,size(tempMeta.GAVsubs,1)-1)
                if any(ismember(deleteSubjects,numRsubs+iGAV))
                    %if the virtual GAVE is one of the ones deleted.
                    % GAVcounter=GAVcounter+1;
                    % newGAVorder=[newGAVorder;GAVcounter];
                    newNumVsubs=newNumVsubs-1;
                    GAVdelete=[GAVdelete;tempData.subNames{iGAV+numRsubs}];
                elseif isempty(setdiff(tempMeta.GAVsubs{iGAV+1,1,1}(:,1),deleteSubjects(deleteSubjects<=numRsubs)))
                    %if all the constituents of a virtual GAVE are deleted, then convert to a normal GAVE
                    GAVcounter=GAVcounter+1;
                    newGAVorder=[newGAVorder+1;1];
                    reorderFlag=1;
                    newNumVsubs=newNumVsubs-1;
                    GAVdelete=[GAVdelete;tempData.subNames{iGAV+numRsubs}];
                else
                    %convert subject indices to the new ones accounting for deletions
                    for iCell=1:size(tempMeta.GAVsubs,2) %including the first column
                        for iFac=1:size(tempMeta.GAVsubs,3)
                            tempGAVsubs=[];
                            for iRow=1:size(tempMeta.GAVsubs{iGAV+1,iCell,iFac},1)
                                if ~isnan(subConvert(tempMeta.GAVsubs{iGAV+1,iCell,iFac}(iRow,1)))
                                    tempGAVsubs(end+1,:)=[subConvert(tempMeta.GAVsubs{iGAV+1,iCell,iFac}(iRow,1)) tempMeta.GAVsubs{iGAV+1,iCell,iFac}(iRow,2)];
                                end
                            end
                            tempMeta.GAVsubs{iGAV+1,iCell,iFac}=tempGAVsubs;
                        end
                    end
                    GAVcounter=GAVcounter+1;
                    newGAVorder=[newGAVorder;GAVcounter];
                end
            end
            if reorderFlag
                tempData=ep_reorderData(tempData,'subjects',[1:numRsubs newGAVorder'+numRsubs]);
                if isempty(tempData)
                    return
                end
                tempMeta.GAVsubs(2:end,:,:)=tempMeta.GAVsubs(newGAVorder,:,:);
            end
            %delete virtual subs from GAVsubs
            tempMeta.GAVsubs(find(ismember(tempData.subNames(numRsubs+1:end),GAVdelete))+1,:,:)=[];
            if isscalar(tempMeta.GAVsubs)
                tempMeta.GAVsubs=[];
            end

            tempData=ep_selectData(tempData,{[],[],[],keepSubjects,[],[]});
            if isempty(tempData)
                return
            end

            if newNumVsubs
                %convert back to virtual subs
                tempSubNames=tempData.subNames;
                tempSubTypes=tempData.subTypes;
                [tempData]=ep_selectData(tempData,{[],[],[],[1:length(tempData.subNames)-newNumVsubs],[],[]});
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    return
                end

                tempData.GAVsubs=tempMeta.GAVsubs;
                tempData.subNames=tempSubNames;
                tempData.subTypes=tempSubTypes;

                %and then reform them as normal subs in order to update the info
                tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    return
                end
            end
        end

        theDescription=['Deleted Subjects using Subjects Pane of the Edit Function.'];
        tempData.history=ep_addHistory(tempData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);

        [err]=ep_checkEPfile(tempData);
        if err
            return
        end

        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        tempMeta.history.select(end+1)=0;
        EPoverview.workData=tempData;
        EPoverview.workMeta=tempMeta;
        
        ep_tictoc('end');
        
        ep_editData('start');
        
    case 'addSubs'
        
        tableData=get(EPoverview.handles.subjects.dataTable,'Data');
        subList=find(cell2mat(tableData(:,2)) & (cell2mat(tableData(:,3))~=0));
        weights=cell2mat(tableData(subList,3));
        
        if ~any(weights)
            msg{1}='No weights specified for forming new subject average.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        %make sure new subject doesn't duplicate existing subject names
        if all(weights==1) && length(weights)==numRsubs
            newName='gave';
            posWeights=[];
            negWeights=[];
        else
            newName=[];
            posWeights=subList(weights>0);
            negWeights=subList(weights<0);
            for iWeight=1:length(posWeights)
                newName=[newName '+' EPoverview.workData.subNames{posWeights(iWeight)}];
            end
            for iWeight=1:length(negWeights)
                newName=[newName '-' EPoverview.workData.subNames{negWeights(iWeight)}];
            end
        end
        
        negCell=get(EPoverview.handles.subjects.negCell,'Value');
        if (negCell > length(EPoverview.workData.cellNames))
            negCell=[];
        else
            if isempty(posWeights) || isempty(negWeights)
                msg{1}='Need both positive and negative weights if using negCell option.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        posCell=get(EPoverview.handles.subjects.posCell,'Value');
        if (posCell > length(EPoverview.workData.cellNames))
            posCell=[];
        else
            if isempty(posWeights) || isempty(negWeights)
                msg{1}='Need both positive and negative weights if using posCell option.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        comb=1;
        candidateName=newName;
        while any(strcmp(candidateName, EPoverview.workData.subNames))
            comb=comb+1;
            candidateName=[newName '_' num2str(comb)];
        end
        if comb > 1
            newName=[newName '_' num2str(comb)];
        end
        
        if ~isempty(EPoverview.workData.covAVE)
            disp('Trial-wise variance information will need to be computed and can take a while.  To avoid this computation time, drop trial-wise variance information during averaging.');
        end

        ep_tictoc('begin');
        tempData=ep_combineData(EPoverview.workData,'subjects',{[],[],[],subList,[],[]},weights,newName,[],negCell,posCell);
        if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if ~isempty(tempData)
            %make virtual grand average temporarily real
            tempGAVsubs=tempData.GAVsubs;
            tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                if isempty(EPoverview.workMeta.GAVsubs)
                    EPoverview.workMeta.GAVsubs=tempGAVsubs;
                else
                    EPoverview.workMeta.GAVsubs(end+1:end+size(tempGAVsubs,1)-1,1,:)=tempGAVsubs(2:end,:,:);
                end

                EPoverview.workMeta.subjects.weights=zeros(length(EPoverview.workData.subNames),1);
                EPoverview.workMeta.subjects.select=false(length(EPoverview.workData.subNames),1);

                theDescription=['Added Subject ' newName ' using Subjects Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end

        end
        ep_tictoc('end');
        
        ep_editData('start');
        
    case 'clearSubWeights'
        
        EPoverview.workMeta.subjects.weights=repmat(0,length(EPoverview.workData.subNames),1);
        EPoverview.workMeta.subjects.select=repmat(false,length(EPoverview.workData.subNames),1);
        
        ep_editData('start');
        
    case 'allSubs'
        
        EPoverview.workMeta.subjects.weights=ones(length(EPoverview.workData.subNames),1);
        EPoverview.workMeta.subjects.select=true(length(EPoverview.workData.subNames),1);
        
        ep_editData('start');
        
    case 'appendSubs'
        
        disp('Making assumption that file format is same as that of the original file.');
        importFormat=EPoverview.workData.fileFormat;
        dataType=EPoverview.workData.dataType;
        if any(strcmp(dataType,{'continuous','single_trial'}))
            msg{1}='It is not possible to append additional subjects to this type of file.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        textPrefs.firstRow=EPmain.preferences.general.firstRow;
        textPrefs.lastRow=EPmain.preferences.general.lastRow;
        textPrefs.firstCol=EPmain.preferences.general.firstCol;
        textPrefs.lastCol=EPmain.preferences.general.lastCol;
        textPrefs.orientation=EPmain.preferences.general.orientation;
        textPrefs.sampleRate=EPmain.preferences.general.sampleRate;

        [fileNames, activeDirectory]=ep_getFilesUI(importFormat);
        if isempty(fileNames)
            return
        end
        if isempty(fileNames) || ((isscalar(fileNames{1})) && (fileNames{1}==0))
            msg{1}='No filenames selected. You have to click on a name.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        ep_tictoc('begin');
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        numOldSubs=length(EPoverview.workData.subNames);
        ced=EPoverview.workData.ced;
        montage=EPoverview.workData.montage;
        newNames=EPoverview.workData.subNames;
        tempData=EPoverview.workData;
        for iFile=1:size(fileNames,2)
            ep_tictoc;
            inArg=[];
            inArg{1}='file';
            inArg{2}=[activeDirectory fileNames{iFile}];
            inArg{3}='format';
            inArg{4}=importFormat;
            inArg{5}='screenSize';
            inArg{6}=EPmain.scrsz;
            inArg{7}='FontSize';
            inArg{8}=EPmain.fontsize;
            if ~strcmp(importFormat,'ep_mat')
                inArg{9}='type';
                inArg{10}=dataType;
            end
            inArg{end+1}='textPrefs';
            inArg{end+1}=textPrefs;
            inArg{end+1}='ced';
            inArg{end+1}=ced;
            inArg{end+1}='montage';
            inArg{end+1}=montage;
            SMIsuffix=EPmain.preferences.general.SMIsuffix;
            if ~isempty(SMIsuffix)
                inArg{end+1}='SMIsuffix';
                inArg{end+1}=SMIsuffix;
            end
            specSuffix=EPmain.preferences.general.specSuffix;
            if ~isempty(specSuffix)
                inArg{end+1}='specSuffix';
                inArg{end+1}=specSuffix;
            end
            inArg{end+1}='noInternal';
            inArg{end+1}=EPmain.preferences.general.noInternal;
            if strcmp(importFormat,'matlab_mat') && (iFile>1)
                inArg{end+1}='matlabDims';
                inArg{end+1}=outInfo.matlabDims;
            end

            [newData, origEloc, outInfo]=ep_readData(inArg);
            errorFlag=0;
            if isempty(newData) || isempty(newData.data)
                errorFlag=1;
                disp(['Error: Was unable to read ' inArg{2}]);
            else
                if ~strcmp(dataType,newData.dataType)
                    errorFlag=1;
                    disp(['Error: Mismatched data type for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.cellNames) ~= length(newData.cellNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of cells for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.chanNames) ~= length(newData.chanNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of channels for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.timeNames) ~= length(newData.timeNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of time points for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.facNames) ~= length(newData.facNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of factors for ' inArg{2}]);
                end
                
                if size(EPoverview.workData.subjectSpecs,2) ~= size(newData.subjectSpecs,2)
                    errorFlag=1;
                    disp(['Error: Mismatched number of subject specs for ' inArg{2}]);
                end
                
                for iSub=1:length(newData.subNames)
                    if any(strcmp(newData.subNames{iSub},newNames))
                        subNameSuffix=newData.subNames{iSub};
                        sameName=1;
                        suffix=0;
                        while sameName
                            sameName=0;
                            for iName=1:length(newNames)
                                if strcmp(newNames{iName},subNameSuffix)
                                    sameName=1;
                                end
                            end
                            if sameName
                                suffix=suffix+1;
                                subNameSuffix=[newData.subNames{iSub} '-' sprintf('%03d',suffix)];
                            end
                        end
                        newData.subNames{iSub,1}=subNameSuffix;
                    end
                    newNames{end+1,1}=newData.subNames{iSub};
                end

                if errorFlag
                    beep();
                    ep_tictoc('end');
                    return
                else
                    tempData=ep_addData(tempData,newData,'subjects');
                end
            end
            
            if isempty(tempData)
                disp('Error: no data.');
            else
                numVadded=size(tempData.GAVsubs,1)-1;
                numRadded=length(tempData.subNames)-numSubs-numVadded;
                numAdded=numRadded+numVadded;
                if numVsubs
                    tempData=ep_reorderData(tempData,'subjects',[1:numRsubs numSubs+1:numSubs+numRadded numRsubs+1:numRsubs+numVsubs numSubs+numRadded+1:numSubs+numAdded]);
                    if isempty(tempData)
                        ep_tictoc('end');
                        return
                    end
                end

                tempGAVsubs=EPoverview.workMeta.GAVsubs; %save the GAVsubs info so it can be restored and to keep track of which ones are virtual.
                if isempty(tempGAVsubs)
                    tempGAVsubs=tempData.GAVsubs;
                else
                    tempGAVsubs(end+1:end+size(tempData.GAVsubs,1),:,:)=tempData.GAVsubs;
                end
                %convert virtual GAVEs to normal form so subject specs etc are available.
                tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    return
                end
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                EPoverview.workMeta.GAVsubs=tempGAVsubs;
                EPoverview.workMeta.subjects.select=[EPoverview.workMeta.subjects.select; false(length(newData.subNames),1)];
                EPoverview.workMeta.subjects.weights=[EPoverview.workMeta.subjects.weights; zeros(length(newData.subNames),1)];

                numEvents=0;
                for iSub=1:numRsubs
                    for iWave=1:length(newData.cellNames)
                        priorEvents=numEvents;
                        eventTrials=length(newData.events{iSub,iWave});
                        numEvents=numEvents+eventTrials;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,1)=iSub+numOldSubs;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,2)=iWave;
                    end
                end
                EPoverview.workMeta.events.select=[EPoverview.workMeta.events.select; false(numEvents,1)];
                EPoverview.workMeta.events.eventIndex=[EPoverview.workMeta.events.eventIndex; newEventIndex];

                theDescription=['Appended subjects using Subjects Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,fileNames);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        ep_tictoc('end');
        ep_editData('start');
        
    case 'exportSubs'
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Subject Specs',[EPoverview.workData.dataName '.txt']);
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        ep_writeSubjectText(EPoverview.workData, [PathName filesep FileName]);
        
        ep_editData('start');
        
    case 'importSubs'
        
        [FileName,PathName,FilterIndex] = uigetfile('*.txt','Import Subject Specs',[EPoverview.workData.dataName '.txt']);
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        tempData=ep_readSubjectSpecText(EPoverview.workData, [PathName filesep FileName]);
        if ~isempty(tempData)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData = tempData;
            theDescription=['Imported Subject Specs using Subjects Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,{FileName});
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'addSubSpec'
        
        specName = inputdlg('Name of new spec?');
        pause(1); %pause to avoid crash on Windows due to bug in Matlab 2009
        if ~isempty(specName)
            tempData=EPoverview.workData;
            
            tempData.subjectSpecNames(end+1,1)=specName;
            for iSub=1:numSubs
                tempData.subjectSpecs{iSub,length(tempData.subjectSpecNames)}='';
            end
            
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                theDescription=['Added new subject spec ' specName{1} ' using Subjects Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'minusSubSpec'
        
        [Selection,ok] = listdlg('PromptString','Choose specs to delete','ListString',EPoverview.workData.subjectSpecNames);
        if ok
            tempData=EPoverview.workData;
            deleteList=setdiff([1:length(EPoverview.workData.subjectSpecNames)],Selection);
            tempData.subjectSpecNames=EPoverview.workData.subjectSpecNames(deleteList);
            tempData.subjectSpecs=EPoverview.workData.subjectSpecs(:,deleteList);
            [err]=ep_checkEPfile(tempData);
            if ~err
                if isscalar(find(Selection))
                    specName=EPoverview.workData.subjectSpecNames{Selection};
                    theDescription=['Deleted Subject Spec ' specName ' using Subjects Pane of the Edit Function.'];
                else
                    theDescription=['Deleted subject specs using Subjects Pane of the Edit Function.'];
                end
                tempData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'deleteCells'
        if sum(EPoverview.workMeta.cells.select) ==0
            msg{1}='No cells specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if sum(EPoverview.workMeta.cells.select) ==length(unique(EPoverview.workData.cellNames))
            msg{1}='There would be nothing left.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        ep_tictoc('begin');
        tempData=EPoverview.workData;
        tempMeta=EPoverview.workMeta;

        tableData=get(EPoverview.handles.cells.dataTable,'Data');
        keepCells=find(not(tempMeta.cells.select));
        deleteCells=find(tempMeta.cells.select);
        keepTrials=ismember(EPoverview.workData.cellNames,tableData(keepCells,4));
        keepEvents=ismember(EPoverview.workMeta.events.eventIndex(:,2),keepTrials);
        oldCellNames=tempData.cellNames;

        tempData=ep_selectData(tempData,{[],[],keepTrials,[],[],[]});
        newNumCells=length(tempData.cellNames);
        if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if ~isempty(tempData)
            %update GAVsubs structure
            if ~isempty(tempMeta.GAVsubs)
                newNumVcells=max(0,size(tempMeta.GAVsubs,2)-1);
                newGAVorder=[];
                GAVcounter=0;
                GAVdelete=cell(0);
                reorderFlag=0;
                cellConvert=[1:numCells]';
                cellConvert=cellConvert(keepCells);

                for iGAVcell=2:size(tempMeta.GAVsubs,2)
                    if any(ismember(deleteCells,numRcells+iGAVcell-1))
                        %if the virtual GAV cell is one of the ones deleted.
                        % GAVcounter=GAVcounter+1;
                        % newGAVorder=[newGAVorder;GAVcounter];
                        newNumVcells=newNumVcells-1;
                        GAVdelete=[GAVdelete;oldCellNames{iGAVcell+numRcells-1}];
                    elseif isempty(setdiff(tempMeta.GAVsubs{1,iGAVcell,1}(:,1),deleteCells(deleteCells<=numRcells)))
                        %if all the constituents of a virtual GAVE are deleted, then convert to a normal GAVE
                        % GAVcounter=GAVcounter+1;
                        % newGAVorder=[newGAVorder+1;1];
                        reorderFlag=1;
                        newNumVcells=newNumVcells-1;
                        GAVdelete=[GAVdelete;oldCellNames{iGAVcell+numRcells-1}];
                    else
                        %convert cell indices to the new ones accounting for deletions
                        tempGAVsubs=[];
                        for iRow=1:size(tempMeta.GAVsubs{1,iGAVcell,1},1)
                            if any(ismember(keepCells,tempMeta.GAVsubs{1,iGAVcell,1}(iRow,1)))
                                tempGAVsubs(end+1,:)=[find(cellConvert==tempMeta.GAVsubs{1,iGAVcell,1}(iRow,1)) tempMeta.GAVsubs{1,iGAVcell,1}(iRow,2)];
                            end
                        end
                        tempMeta.GAVsubs{1,iGAVcell,1}=tempGAVsubs;
                        GAVcounter=GAVcounter+1;
                        newGAVorder=[newGAVorder;GAVcounter];
                    end
                end
                newNumRcells=newNumCells-newNumVcells;
                if reorderFlag && (newNumVcells>1)
                    %if a virtual cell was turned real, move it to join the real ones.
                    tempData=ep_reorderData(tempData,'cells',[1:newNumRcells newGAVorder'+newNumRcells]);
                    if isempty(tempData)
                        return
                    end
                    tempMeta.GAVsubs(:,2:end,:)=tempMeta.GAVsubs(:,newGAVorder,:);
                end
                %delete virtual cells from GAVsubs
                tempMeta.GAVsubs(:,find(ismember(oldCellNames(numRcells+1:end),GAVdelete))+1,:)=[];
                if isscalar(tempMeta.GAVsubs)
                    tempMeta.GAVsubs=[];
                end

                %convert back to virtual cells
                tempCellNames=tempData.cellNames;
                tempCellTypes=tempData.cellTypes;
                tempTrialNames=tempData.trialNames;
                [tempData]=ep_selectData(tempData,{[],[],[1:newNumRcells-newNumVcells],[],[],[]});
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    return
                end

                tempData.GAVsubs=tempMeta.GAVsubs;
                tempData.cellNames=tempCellNames;
                tempData.cellTypes=tempCellTypes;
                tempData.trialNames=tempTrialNames;

                %and then reform them as normal cells in order to update the info
                tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            end
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workMeta.GAVsubs=tempMeta.GAVsubs;

                %update the events index to reflect deleted cells (sub,cell/wave)
                convertList=unique(EPoverview.workMeta.events.eventIndex(:,2));
                for iCell=1:length(convertList)
                    EPoverview.workMeta.events.eventIndex(find(EPoverview.workMeta.events.eventIndex(:,2)==convertList(iCell)),2)=iCell;
                end
                tempMeta.events.select=tempMeta.events.select(keepEvents);
                tempMeta.events.eventIndex=tempMeta.events.eventIndex(keepEvents,:);

                tempMeta.events.select=EPoverview.workMeta.events.select(keepEvents);
                tempMeta.trials.select=EPoverview.workMeta.trials.select(keepTrials);
                tempMeta.cells.select=false(length(unique(EPoverview.workData.cellNames)),1);
                tempMeta.cells.weights=EPoverview.workMeta.cells.weights(keepCells);

                theDescription=['Deleted cells using Cells Pane of the Edit Function.'];
                tempData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                tempMeta.history.select(end+1)=0;

                EPoverview.workData=tempData;
                EPoverview.workMeta=tempMeta;
            end
        end

        ep_tictoc('end');

        ep_editData('start');

    case 'addCells'
        EPmain.edit.handleList=ep_disableGUI(EPoverview.handles.hEditWindow);
        drawnow;

        %only for average data

        tableData=get(EPoverview.handles.cells.dataTable,'Data');
        cellList=find(cell2mat(tableData(:,2)) & (cell2mat(tableData(:,3))~=0));
        weights=cell2mat(tableData(cellList,3));
        
        if ~any(weights)
            msg{1}='No weights specified for forming new cell average.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        %make sure new cell doesn't duplicate existing cell names
        newName=[];
        posWeights=cellList(weights>0);
        negWeights=cellList(weights<0);
        for iWeight=1:length(posWeights)
            newName=[newName '+' EPoverview.workData.cellNames{posWeights(iWeight)}];
        end
        for iWeight=1:length(negWeights)
            newName=[newName '-' EPoverview.workData.cellNames{negWeights(iWeight)}];
        end
        
        comb=1;
        candidateName=newName;
        while any(strcmp(candidateName, EPoverview.workData.cellNames))
            comb=comb+1;
            candidateName=[newName '_' num2str(comb)];
        end
        if comb > 1
            newName=[newName '_' num2str(comb)];
        end
        
        if ~isempty(EPoverview.workData.covAVE)
            disp('Trial-wise variance information will need to be computed and can take a while.  To avoid this computation time, drop trial-wise variance information during averaging.');
        end
        
        ep_tictoc('begin');
        tempData=ep_combineData(EPoverview.workData,'cells',{[],[],cellList,[],[],[]},weights,newName,EPoverview.workMeta.cells.TrlWgts);
        if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if isempty(tempData)
            disp('Failed to combine cells.')
        else
            tempGAVsubs=tempData.GAVsubs;
            tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if isempty(tempData)
                disp('Aborting effort to add new cell due to failure to convert virtual cell.')
            else
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                if ~isempty(tempGAVsubs)
                    for iGAV=2:size(tempGAVsubs,1)
                        for iFac=1:size(tempGAVsubs,3)
                            tempGAVsubs{iGAV,end,iFac}=tempGAVsubs{iGAV,1,iFac};
                        end
                    end
                    if isempty(EPoverview.workMeta.GAVsubs)
                        EPoverview.workMeta.GAVsubs=tempGAVsubs;
                    else
                        EPoverview.workMeta.GAVsubs(1,end+1:end+size(tempGAVsubs,2)-1,:)=tempGAVsubs(:,2:end,end);
                        for iGav=2:size(EPoverview.workMeta.GAVsubs,1)
                            for iFac=1:size(EPoverview.workMeta.GAVsubs,3)
                                EPoverview.workMeta.GAVsubs{iGav,end,iFac}=[[1:numRsubs]' ones(numRsubs,1)];
                            end
                        end
                    end
                    EPoverview.workMeta.GAVsubs{1,end,1}=tempGAVsubs{1,end,1};
                end
                EPoverview.workMeta.cells.weights=zeros(length(EPoverview.workData.cellNames),1);
                EPoverview.workMeta.cells.select=[false(numCells,1); false];
                EPoverview.workMeta.trials.select=[false(numWaves,1); false];

                theDescription=['Added Cell ' newName ' using Cells Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
        ep_tictoc('end');
        
        ep_editData('start');
        
    case 'addTrials'
        
        tableData=get(EPoverview.handles.cells.dataTable,'Data');
        selectedCell=find(cell2mat(tableData(:,2)));
        tempData=EPoverview.workData;
        
        cellCounter=0;
        for iCell=1:length(selectedCell)
            theCell=selectedCell(iCell);
            cellList=find(strcmp(tableData{theCell,4},EPoverview.workData.cellNames));
            cellWeights=ones(length(cellList),1);
            
            if isscalar(cellList)
                disp(['Only one waveform for averaging' tableData{theCell,4} '.']);
            else
                %make sure new cell doesn't duplicate existing cell names
                newName=['AVG-' tableData{theCell,4}];
                
                comb=1;
                candidateName=newName;
                while any(strcmp(candidateName, EPoverview.workData.cellNames))
                    comb=comb+1;
                    candidateName=[newName '_' num2str(comb)];
                end
                if comb > 1
                    newName=[newName '_' num2str(comb)];
                end
                
                ep_tictoc('begin');
                tempData2=ep_combineData(tempData,'cells',{[],[],cellList,[],[],[]},cellWeights,newName);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if ~isempty(tempData2)
                    tempData=tempData2;
                    cellCounter=cellCounter+1;
                else
                    disp(['Failed to average ' tableData{theCell,4} '.'])
                end
            end
        end
        
        if cellCounter>0
            tempGAVsubs=tempData.GAVsubs;
            tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if isempty(tempData)
                disp('Aborting effort to add new averaged cell(s) due to failure to convert virtual cell(s).')
            else
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                if ~isempty(tempGAVsubs)
                    for iGAV=2:size(tempGAVsubs,1)
                        for iCell=2:cellCounter+1
                            for iFac=1:size(tempGAVsubs,3)
                                tempGAVsubs{iGAV,iCell,iFac}=tempGAVsubs{iGAV,1,iFac};
                            end
                        end
                    end
                    if isempty(EPoverview.workMeta.GAVsubs)
                        EPoverview.workMeta.GAVsubs=tempGAVsubs;
                    else
                        EPoverview.workMeta.GAVsubs(1,end+1:end+size(tempGAVsubs,2)-1,:)=tempGAVsubs(:,2:end,end);
                    end
                end

                EPoverview.workMeta.cells.weights=zeros(length(EPoverview.workData.cellNames),1);
                EPoverview.workMeta.cells.select=false(length(unique(EPoverview.workData.cellNames)),1);
                EPoverview.workMeta.trials.select=false(length(EPoverview.workData.cellNames),1);

                theDescription=['Added Cell(s) using Trials Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_tictoc('end');
        
        ep_editData('start');
        
    case 'clearCellWeights'
        
        EPoverview.workMeta.cells.weights=repmat(0,length(EPoverview.workData.cellNames),1);
        EPoverview.workMeta.cells.select=repmat(false,length(EPoverview.workData.cellNames),1);
        
        ep_editData('start');
        
    case 'allCells'
        
        EPoverview.workMeta.cells.weights=repmat(1,length(EPoverview.workData.cellNames),1);
        EPoverview.workMeta.cells.select=repmat(true,length(EPoverview.workData.cellNames),1);
        
        ep_editData('start');
        
    case 'appendCells'
        
        disp('Making assumption that file format is same as that of the original file.');
        importFormat=EPoverview.workData.fileFormat;
        fileType=EPoverview.workData.dataType;
        if strcmp(fileType,'continuous')
            msg{1}='It is not possible to append additional cells to this type of file.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        numOldCells=length(EPoverview.workData.cellNames);
        numUniqueOldCells=length(unique(EPoverview.workData.cellNames));
        newNames=EPoverview.workData.cellNames;
        
        textPrefs.firstRow=EPmain.preferences.general.firstRow;
        textPrefs.lastRow=EPmain.preferences.general.lastRow;
        textPrefs.firstCol=EPmain.preferences.general.firstCol;
        textPrefs.lastCol=EPmain.preferences.general.lastCol;
        textPrefs.orientation=EPmain.preferences.general.orientation;
        textPrefs.sampleRate=EPmain.preferences.general.sampleRate;
        
        inArg{1}='format';
        inArg{2}=importFormat;
        inArg{3}='type';
        inArg{4}=fileType;
        inArg{7}='textPrefs';
        inArg{8}=textPrefs;
        inArg{9}='screenSize';
        inArg{10}=EPmain.scrsz;
        inArg{11}='FontSize';
        inArg{12}=EPmain.fontsize;
        
        [newData]=ep_readData(inArg);
        
        if isempty(newData) || isempty(newData.data)
            return
        end

        if ~isempty(newData.GAVsubs)
            newGAVsubs=newData.GAVsubs; %save the GAVsubs info so it can be restored and to keep track of which ones are virtual.
            numNewSubs=length(newData.subNames);
            numNewVsubs=size(newGAVsubs,1);
            numNewRsubs=numNewSubs-numNewVsubs;
            %convert virtual GAVEs to normal form so subject specs etc are available.
            newData=ep_combineData(newData,'convert',{[],[],[],[],[],[]},[],[],[]);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if isempty(newData)
                msg{1}='Error: unable to convert virtual cells.';
                [msg]=ep_errorMsg(msg);
                return
            end
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        end

        if ~strcmp(fileType,newData.dataType)
            msg{1}='The file types do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if length(EPoverview.workData.subNames) ~= length(newData.subNames)
            msg{1}='The numbers of subjects do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end

        if size(newGAVsubs,1) ~= size(EPoverview.workMeta.GAVsubs,1)
            msg{1}='The numbers of virtual grand averages do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end

        if length(EPoverview.workData.chanNames) ~= length(newData.chanNames)
            msg{1}='The numbers of channels do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.timeNames) ~= length(newData.timeNames)
            msg{1}='The numbers of time points do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.facNames) ~= length(newData.facNames)
            msg{1}='The numbers of factors do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if ~strcmp(EPoverview.workData.dataType,'single_trial')
            for iCell=1:length(newData.cellNames)
                if any(strcmp(newData.cellNames{iCell},newNames))
                    cellNameSuffix=newData.cellNames{iCell};
                    sameName=1;
                    suffix=0;
                    while sameName
                        sameName=0;
                        for iName=1:length(newNames)
                            if strcmp(newNames{iName},cellNameSuffix)
                                sameName=1;
                            end
                        end
                        if sameName
                            suffix=suffix+1;
                            cellNameSuffix=[newData.cellNames{iCell} '-' sprintf('%03d',suffix)];
                        end
                    end
                    newData.cellNames{iCell,1}=cellNameSuffix;
                end
                newNames{end+1,1}=newData.cellNames{iCell};
            end
            combinedCells = [EPoverview.workData.cellNames; newData.cellNames];
            if (length(unique(combinedCells)) ~= length(combinedCells))
                msg{1}='Cell names cannot be duplicated except in single trial data.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        ep_tictoc('begin');
        tempData=ep_addData(EPoverview.workData,newData,'cells');
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;

                EPoverview.workData=tempData;
                numNewCells=length(unique(EPoverview.workData.cellNames))-numUniqueOldCells;
                if ~isempty(newGAVsubs)
                    tempGAVsubs=EPoverview.workMeta.GAVsubs;
                    for iCell=1:numNewCells
                        tempGAVsubs{1,end+1,1}=newGAVsubs{1,iCell+1,1};
                        for iGAV=2:size(tempGAVsubs,1)
                            for iFac=1:size(tempGAVsubs,3)
                                tempGAVsubs{iGAV,end,iFac}=tempGAVsubs{iGAV,1,iFac};
                            end
                        end
                    end
                    EPoverview.workMeta.GAVsubs=tempGAVsubs;
                end
        
                EPoverview.workMeta.cells.select=[EPoverview.workMeta.cells.select; false(numNewCells,1)];
                EPoverview.workMeta.cells.weights=[EPoverview.workMeta.cells.weights; zeros(numNewCells,1)];
                
                numEvents=0;
                for iSub=1:length(newData.subNames)
                    for iWave=1:length(newData.cellNames)
                        priorEvents=numEvents;
                        eventTrials=length(newData.events{iSub,iWave});
                        numEvents=numEvents+eventTrials;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,1)=iSub;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,2)=iWave+numOldCells;
                    end
                end
                EPoverview.workMeta.events.select=[EPoverview.workMeta.events.select; false(numEvents,1)];
                EPoverview.workMeta.events.eventIndex=[EPoverview.workMeta.events.eventIndex; newEventIndex];
                
                theDescription=['Appended cells using Cells Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_tictoc('end');
        ep_editData('start');
        
    case 'importSpecs'
        
        [specFileName,PathName,FilterIndex] = uigetfile('*.txt','Import Specs',[EPoverview.workData.dataName EPmain.preferences.general.subjectSpecSuffix]);
        
        if isnumeric(specFileName)
            if specFileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [theHeader, theData, theDelim] = ep_textScan(specFileName,1);
        ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if isempty(theData)
            disp(['Error: Addition of spec information failed.']);
        else
            if size(theData,1) ~= numSubs
                disp(['Error: Number of subjects in the specs text file (' num2str(size(theData,1)) ') is incorrect.']);
            elseif size(theData,2) ~= numWaves
                disp(['Error: Number of cells in the specs text file (' num2str(size(theData,2)) ') is incorrect.']);
            else
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                
                disp('Replacing current contents of the selected spec with contents of the specs text file.');
                EPoverview.workData.trialSpecs(:,EPoverview.theSpec,:)=theData;
                
                theDescription=['Imported specs from ' specFileName ' using Specs Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,{specFileName});
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'exportSpecs'
        
        tableData=get(EPoverview.handles.specs.dataTable,'Data');
        tableData=tableData(:,3:end);
         
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Table');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [pathstr, name, ext] = fileparts(FileName);
        if ~strcmp(ext,'.txt')
            FileName=[FileName '.txt'];
        end
        
        fid=fopen([PathName FileName],'w');
        
        for i=1:size(tableData,1)
            for j=1:size(tableData,2)
                theCell=tableData{i,j};
                if isnumeric(theCell)
                    fprintf(fid,'%d', theCell);
                else
                    fprintf(fid,'%s', theCell);
                end
                if j < size(tableData,2)
                    fprintf(fid,'\t');
                end
            end
            if i < size(tableData,1)
                fprintf(fid,'\r');
            end
        end
        
        ep_editData('start');
        
    case 'addSpecs'
        
        specName = inputdlg('Name of new spec?');
        pause(1); %pause to avoid crash on Windows due to bug in Matlab 2009
        if ~isempty(specName)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            if ~isempty(EPoverview.workData.trialSpecNames)
                EPoverview.theSpec=EPoverview.theSpec+1;
            end
            EPoverview.workData.trialSpecNames(end+1,1)=specName;
            EPoverview.theLastSpec=EPoverview.theSpec;
            
            for iTrial=1:numWaves
                for iSub=1:numSubs
                    EPoverview.workData.trialSpecs{iTrial,length(EPoverview.workData.trialSpecNames),iSub}='';
                end
            end
            theDescription=['Added new spec ' specName{1} ' using Specs Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'minusSpecs'
        
        [Selection,ok] = listdlg('PromptString','Choose specs to delete','ListString',EPoverview.workData.trialSpecNames);
        if ok
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            deleteList=setdiff([1:length(EPoverview.workData.trialSpecNames)],Selection);
            EPoverview.workData.trialSpecNames=EPoverview.workData.trialSpecNames(deleteList);
            EPoverview.workData.trialSpecs=EPoverview.workData.trialSpecs(:,deleteList,:);
            EPoverview.theLastSpec=EPoverview.theSpec;
            EPoverview.theSpec=1;
                if length(find(Selection))==1
                    specName=EPoverview.workData.subjectSpecNames{find(Selection)};
                    theDescription=['Deleted Spec ' specName ' using Specs Pane of the Edit Function.'];
                else
                    theDescription=['Deleted specs using Specs Pane of the Edit Function.'];
                end
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'deleteTrials'
        if sum(EPoverview.workMeta.trials.select) ==0
            msg{1}='No trials specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if sum(EPoverview.workMeta.trials.select) ==length(EPoverview.workData.trialNames)
            msg{1}='There would be nothing left.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        ep_tictoc('begin');
        tempData=EPoverview.workData;
        tempMeta=EPoverview.workMeta;
        numCells=unique(length(EPoverview.workData.cellNames));
        numVcells=max(0,size(EPoverview.workMeta.GAVsubs,2)-1);
        numRcells=numCells-numVcells;
        numWaves=length(EPoverview.workData.trialNames);
        numRwaves=numWaves-numVcells;

        keepTrials=find(not(tempMeta.trials.select));
        deleteTrials=find(tempMeta.trials.select);
        keepEvents=ismember(EPoverview.workMeta.events.eventIndex(:,2),keepTrials);
        oldCellNames=tempData.cellNames;

        tempData=ep_selectData(tempData,{[],[],keepTrials,[],[],[]});
        numCellsNew=unique(length(tempData.cellNames));
        numVcellsNew=max(0,size(EPoverview.workMeta.GAVsubs,2)-1);
        numRcellsNew=numCellsNew-numVcellsNew;
        numWavesNew=length(tempData.trialNames);
        numRwavesNew=numWavesNew-numVcellsNew;

        if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if ~isempty(tempData)
            %update GAVsubs structure
            if ~isempty(tempMeta.GAVsubs)
                newGAVorder=[];
                GAVcounter=0;
                GAVdelete=cell(0); %which virtual cells to delete from GAVsubs, but not necessarily the real data.
                reorderFlag=0;
                trialsConvert=[1:numWaves]';
                trialsConvert=trialsConvert(keepTrials);

                for iGAVcell=2:size(tempMeta.GAVsubs,2)
                    if any(ismember(deleteTrials,numRwaves+iGAVcell-1))
                        %if a virtual GAV cell is one of the ones deleted.
                        % GAVcounter=GAVcounter+1;
                        % newGAVorder=[newGAVorder;GAVcounter];
                        numVcellsNew=numVcellsNew-1;
                        GAVdelete=[GAVdelete;oldCellNames{iGAVcell-1+numRwaves}];
                    elseif isempty(setdiff(tempMeta.GAVsubs{1,iGAVcell,1}{:,1},deleteTrials(deleteTrials<=numRwaves)))
                        %if all the constituents of a virtual GAVE are deleted, then convert to a normal GAVE by deleting from GAVsubs alone
                        GAVcounter=GAVcounter+1;
                        newGAVorder=[newGAVorder+1;1];
                        reorderFlag=1;
                        numVcellsNew=numVcellsNew-1;
                        GAVdelete=[GAVdelete;oldCellNames{iGAVcell-1+numRwaves}];
                    else
                        %convert cell indices to the new ones accounting for deletions
                        tempGAVsubs=[];
                        for iRow=1:size(tempMeta.GAVsubs{1,iGAVcell,1},1)
                            if any(ismember(keepTrials,tempMeta.GAVsubs{1,iGAVcell,1}(iRow,1)))
                                tempGAVsubs(end+1,:)=[find(trialsConvert==tempMeta.GAVsubs{1,iGAVcell,1}(iRow,1)) tempMeta.GAVsubs{1,iGAVcell,1}(iRow,2)];
                            end
                        end
                        tempMeta.GAVsubs{1,iGAVcell,1}=tempGAVsubs;
                        GAVcounter=GAVcounter+1;
                        newGAVorder=[newGAVorder;GAVcounter];
                    end
                end
                if reorderFlag
                    %if a virtual cell was turned real, move it to join the real ones.
                    tempData=ep_reorderData(tempData,'cells',[1:numRwavesNew newGAVorder'+numRwavesNew]);
                    if isempty(tempData)
                        return
                    end
                    tempMeta.GAVsubs(:,2:end,:)=tempMeta.GAVsubs(:,newGAVorder,:);
                end
                %delete virtual cells from GAVsubs
                tempMeta.GAVsubs(:,find(ismember(oldCellNames(numRwaves+1:end),GAVdelete))+1,:)=[];
                if isscalar(tempMeta.GAVsubs)
                    tempMeta.GAVsubs=[];
                end

                %convert back to virtual cells
                tempCellNames=tempData.cellNames;
                tempCellTypes=tempData.cellTypes;
                tempTrialNames=tempData.trialNames;
                [tempData]=ep_selectData(tempData,{[],[],[1:length(tempData.cellNames)-numVcellsNew],[],[],[]});
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    return
                end

                tempData.GAVsubs=tempMeta.GAVsubs;
                tempData.cellNames=tempCellNames;
                tempData.cellTypes=tempCellTypes;
                tempData.trialNames=tempTrialNames;

                %and then reform them as normal cells in order to update the info
                tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            end

            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;

                %update the events index to reflect deleted cells (sub,cell/wave)
                convertList=unique(EPoverview.workMeta.events.eventIndex(:,2));
                for iCell=1:length(convertList)
                    EPoverview.workMeta.events.eventIndex(find(EPoverview.workMeta.events.eventIndex(:,2)==convertList(iCell)),2)=iCell;
                end
                tempMeta.events.select=tempMeta.events.select(keepEvents);
                tempMeta.events.eventIndex=tempMeta.events.eventIndex(keepEvents,:);

                EPoverview.workMeta.events.select=EPoverview.workMeta.events.select(keepEvents);
                EPoverview.workMeta.trials.select=false(length(EPoverview.workData.trialNames),1);

                theDescription=['Deleted trials using Trials Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_tictoc('end');
        
        ep_editData('start');
        
    case 'clearTrials'
        
        EPoverview.workMeta.trials.weights=repmat(0,numWaves,1);
        EPoverview.workMeta.trials.select=repmat(false,numWaves,1);
        
        ep_editData('start');
        
    case 'allTrials'
        
        EPoverview.workMeta.trials.weights=repmat(1,numWaves,1);
        EPoverview.workMeta.trials.select=repmat(true,numWaves,1);
        
        ep_editData('start');
        
    case 'exportTrials'
        
        tableData =get(EPoverview.handles.trials.dataTable,'Data');
        tableData=tableData(:,[1 3:end]);
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Table');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [pathstr, name, ext] = fileparts(FileName);
        if ~strcmp(ext,'.txt')
            FileName=[FileName '.txt'];
        end
        
        fid=fopen([PathName FileName],'w');
        
        for iRow=1:size(tableData,1)
            for iCol=1:size(tableData,2)
                theCell=tableData{iRow,iCol};
                if isnumeric(theCell)
                    fprintf(fid,'%d', theCell);
                else
                    fprintf(fid,'%s', theCell);
                end
                if iCol < size(tableData,2)
                    fprintf(fid,'\t');
                end
            end
            if iCol < size(tableData,1)
                fprintf(fid,'\r');
            end
        end
        
        ep_editData('start');
        
    case 'deleteChans'
        
        if sum(EPoverview.workMeta.channels.select) ==0
            msg{1}='No channels specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if sum(EPoverview.workMeta.channels.select(1:numChans)) == numChans
            msg{1}='There would be no data left.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        keepChans=not(EPoverview.workMeta.channels.select(1:numChans));
        keepImplicit=not(EPoverview.workMeta.channels.select(numChans+1:end));
        
        tempData=ep_selectData(EPoverview.workData,{find(keepChans),[],[],[],[],[]});
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            EPoverview.workData.implicit=EPoverview.workData.implicit(keepImplicit);
            EPoverview.workMeta.channels.weights=zeros(length(find(keepChans))+length(find(keepImplicit)),1);
            EPoverview.workMeta.channels.select=false(length(find(keepChans))+length(find(keepImplicit)),1);
            
            theDescription=['Deleted channels using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');
        
    case 'addChans'  %adds a regional channel

        tableData=get(EPoverview.handles.channels.dataTable,'Data');


        chanList=find(cell2mat(tableData(:,2)) & (cell2mat(tableData(:,3))~=0));
        weights=cell2mat(tableData(chanList,3));

        if ~any(weights) %add a new blank channel

            %make sure new channel doesn't duplicate existing channel names
            comb=1;
            while any(strcmp(['new' num2str(comb)], EPoverview.workData.chanNames))
                comb=comb+1;
            end
            newName=['new' num2str(comb)];
            EPadd=[];
            EPadd.chanNames{1}=newName;

            ep_tictoc('begin');
            tempData=ep_addData(EPoverview.workData,EPadd,'channels');
            tempData.eloc(end).labels=newName;
            tempData.eloc(end).type='EEG';
            
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;

                EPoverview.workMeta.channels.weights=zeros(numChans+numImplicit+1,1);
                EPoverview.workMeta.channels.select=false(numChans+numImplicit+1,1);

                theDescription=['Added Channel ' newName ' using Channels Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
            ep_tictoc('end');

        else

            [chanTypes, chanModes, chanRegs]=ep_chanTypes;
            if ~any(find(ismember([chanTypes(strcmp('EEG',chanModes));chanRegs(strcmp('EEG',chanModes))],tableData(weights,5))))
                msg{1}='At present only EEG data, including existing regional channels, can be combined into regional channels.';
                [msg]=ep_errorMsg(msg);
                return
            end

            %         if sum([any(find(ismember(tableData(find(weights),5),{'EEG','REG'}))) any(find(ismember(tableData(find(weights),5),{'ANS','ECG'}))) any(find(strcmp('MEG',tableData(find(weights),5))))]) > 1
            %             msg{1}='Unlike types of data cannot be combined into a regional channel.';
            %             [msg]=ep_errorMsg(msg);
            %             return
            %         end

            %make sure new channel doesn't duplicate existing channel names
            comb=1;
            while any(strcmp(['combined' num2str(comb)], EPoverview.workData.chanNames))
                comb=comb+1;
            end
            newName=['combined' num2str(comb)];

            ep_tictoc('begin');
            tempData=ep_combineData(EPoverview.workData,'channels',{chanList,[],[],[],[],[]},weights,newName);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;

                EPoverview.workMeta.channels.weights=zeros(numChans+numImplicit+1,1);
                EPoverview.workMeta.channels.select=false(numChans+numImplicit+1,1);

                theDescription=['Added Channel ' newName ' using Channels Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
            ep_tictoc('end');
        end

        ep_editData('start');

    case 'clearChanWeights'
        
        EPoverview.workMeta.channels.weights=repmat(0,numChans+numImplicit,1);
        EPoverview.workMeta.channels.select=repmat(false,numChans+numImplicit,1);
        
        ep_editData('start');
        
    case 'allChans'
        
        EPoverview.workMeta.channels.weights=repmat(1,numChans+numImplicit,1);
        EPoverview.workMeta.channels.select=repmat(true,numChans+numImplicit,1);
        
        ep_editData('start');
        
    case 'appendChans'
        
        disp('Making assumption that file format is same as that of the original file.');
        importFormat=EPoverview.workData.fileFormat;
        fileType=EPoverview.workData.dataType;
        
        textPrefs.firstRow=EPmain.preferences.general.firstRow;
        textPrefs.lastRow=EPmain.preferences.general.lastRow;
        textPrefs.firstCol=EPmain.preferences.general.firstCol;
        textPrefs.lastCol=EPmain.preferences.general.lastCol;
        textPrefs.orientation=EPmain.preferences.general.orientation;
        textPrefs.sampleRate=EPmain.preferences.general.sampleRate;
        
        inArg{1}='format';
        inArg{2}=importFormat;
        inArg{3}='type';
        inArg{4}=fileType;
        inArg{7}='textPrefs';
        inArg{8}=textPrefs;
        inArg{9}='screenSize';
        inArg{10}=EPmain.scrsz;
        inArg{11}='FontSize';
        inArg{12}=EPmain.fontsize;
        
        [newData]=ep_readData(inArg);
        
        if isempty(newData) || isempty(newData.data)
            return
        end
        
        if ~strcmp(fileType,newData.dataType)
            msg{1}='The file types do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if numCells ~= length(newData.cellNames)
            msg{1}='The numbers of cells do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if numSubs ~= length(newData.subNames)
            msg{1}='The numbers of subjects do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if numPoints ~= length(newData.timeNames)
            msg{1}='The numbers of time points do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.facNames) ~= length(newData.facNames)
            msg{1}='The numbers of factors do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if size(EPoverview.workData.facVecS,2) ~= size(newData.facVecS,2)
            msg{1}='The two datasets are not equally factor compressed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        ep_tictoc('begin');
        
        tempData=ep_addData(EPoverview.workData,newData,'channels');
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                theDescription=['Appended channels using Channels Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                EPoverview.workMeta.history.select(end+1)=0;

                EPoverview.workMeta.channels.select=repmat(false,length(EPoverview.workData.chanNames)+length(EPoverview.workData.implicit),1);
                EPoverview.workMeta.channels.weights=repmat(0,length(EPoverview.workData.chanNames)+length(EPoverview.workData.implicit),1);
            end
        end
        
        ep_tictoc('end');
        ep_editData('start');
        
    case 'exportChans'
        
        tableData=get(EPoverview.handles.chans.dataTable,'Data');
        tableData=tableData(:,4:end);
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Table');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [pathstr, name, ext] = fileparts(FileName);
        if ~strcmp(ext,'.txt')
            FileName=[FileName '.txt'];
        end
        
        fid=fopen([PathName FileName],'w');
        
        for i=1:size(tableData,1)
            for j=1:size(tableData,2)
                theCell=tableData{i,j};
                if isnumeric(theCell)
                    fprintf(fid,'%d', theCell);
                else
                    fprintf(fid,'%s', theCell);
                end
                if j < size(tableData,2)
                    fprintf(fid,'\t');
                end
            end
            if i < size(tableData,1)
                fprintf(fid,'\r');
            end
        end
        
        ep_editData('start');
        
    case 'sortSubs'
        
        sortValue=get(EPoverview.handles.subjects.sort,'Value');
        sortList=get(EPoverview.handles.subjects.sort,'String');
        tableData=get(EPoverview.handles.subjects.dataTable,'Data');
        
        if sortValue < length(sortList)
            sortArray=cellfun(@num2str,tableData(:,sortValue+3),'UniformOutput',false);
            nanList=strcmp('NaN',sortArray);
            numArray=cellfun(@str2double,sortArray,'UniformOutput',false);
            numArray=cell2mat(numArray);
            if ~any(isnan(numArray(~nanList)))
                sortArray=numArray;
            end
            [~, sortOrder]=sort(sortArray(1:numRsubs));
            sortOrder=[sortOrder;[numRsubs+1:numSubs]'];
            
            [tempData]=ep_reorderData(EPoverview.workData,'subjects',sortOrder);
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;

                % %update the GAVsubs copy to reflect the new order
                % if any(sortOrder(numRsubs+1:numSubs)~=[numRsubs+1:numSubs])
                %     EPoverview.workMeta.GAVsubs(2:end,:,:)=EPoverview.workMeta.GAVsubs(sortOrder(numRsubs+1:numSubs)-numRsubs+1,:,:);
                %     if any(sortOrder<=numRsubs)
                %         for iGAV=2:size(EPoverview.workMeta.GAVsubs,1)
                %             %convert subject indices to reflect the new order
                %             for iCell=1:size(EPoverview.workMeta.GAVsubs,2) %including the first column
                %                 for iFac=1:size(EPoverview.workMeta.GAVsubs,3)
                %                     for iRow=1:size(EPoverview.workMeta.GAVsubs{iGAV,iCell,iFac},1)
                %                         newSub=sortOrder(EPoverview.workMeta.GAVsubs{iGAV,iCell,iFac}(iRow,1));
                %                         EPoverview.workMeta.GAVsubs{iGAV,iCell,iFac}(iRow,1)=newSub;
                %                     end
                %                 end
                %             end
                %         end
                %     end
                % end

                EPoverview.workMeta.subjects.select=EPoverview.workMeta.subjects.select(sortOrder);
                EPoverview.workMeta.subjects.weights=EPoverview.workMeta.subjects.weights(sortOrder);
                newEventsSelect=zeros(size(EPoverview.workMeta.events.select));
                newEventsIndex=zeros(size(EPoverview.workMeta.events.select));
                counter=0;
                for iEvent=1:length(sortOrder)
                    subIndex=find(EPoverview.workMeta.events.eventIndex(:,1)==iEvent);
                    numEvents=length(subIndex);
                    newEventsSelect(counter+1:counter+numEvents)=EPoverview.workMeta.events.select(subIndex);
                    newEventsIndex(counter+1:counter+numEvents,:)=EPoverview.workMeta.events.eventIndex(subIndex,:);
                end
                EPoverview.workMeta.events.select=newEventsSelect;
                EPoverview.workMeta.events.eventIndex=newEventsIndex;
                
                theDescription=['Sorted subjects using Subjects Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'sortCells'
        
        sortSpec=get(EPoverview.handles.cells.sort,'Value');
        specList=get(EPoverview.handles.cells.sort,'String');
        
        if sortSpec == length(specList)-1
            [B, sortOrder]=sort(EPoverview.workData.cellNames);
            [tempData]=ep_reorderData(EPoverview.workData,'cells',sortOrder);
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                if any(sortOrder(numRcells+1:numCells)~=[numRcells+1:numCells])
                    EPoverview.workMeta.GAVsubs(:,2:end,:)=EPoverview.workMeta.GAVsubs(:,sortOrder(numRcells+1:numCells)-numRcells+1,:);
                    if any(sortOrder<=numRcells)
                        %convert subject indices to reflect the new order
                        for iCell=2:size(EPoverview.workMeta.GAVsubs,2)
                            for iRow=1:size(EPoverview.workMeta.GAVsubs{1,iCell,1},1)
                                newCell=sortOrder(EPoverview.workMeta.GAVsubs{1,iCell,1}(iRow,1));
                                EPoverview.workMeta.GAVsubs{1,iCell,1}(iRow,1)=newCell;
                            end
                        end
                    end
                end

                EPoverview.workMeta.cells.select=EPoverview.workMeta.cells.select(sortOrder);
                EPoverview.workMeta.cells.weights=EPoverview.workMeta.cells.weights(sortOrder);
                newEventsSelect=zeros(size(EPoverview.workMeta.events.select));
                newEventsIndex=zeros(size(EPoverview.workMeta.events.select));
                counter=0;
                for iEvent=1:length(sortOrder)
                    trialIndex=find(EPoverview.workMeta.events.eventIndex(:,2)==iEvent);
                    numEvents=length(trialIndex);
                    newEventsSelect(counter+1:counter+numEvents)=EPoverview.workMeta.events.select(trialIndex);
                    newEventsIndex(counter+1:counter+numEvents,:)=EPoverview.workMeta.events.eventIndex(trialIndex,:);
                end
                EPoverview.workMeta.events.select=newEventsSelect;
                EPoverview.workMeta.events.eventIndex=newEventsIndex;
                
                theDescription=['Sorted cells by name using Cells Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        elseif sortSpec < length(specList)-1
            theSpec=find(strcmp(specList{sortSpec},EPoverview.workData.trialSpecNames));
            if isempty(theSpec)
                disp('Sort spec not present.')
            else
                if sortSpec < length(specList)
                    sortArray=cellfun(@num2str,EPoverview.workData.trialSpecs(:,theSpec,1),'UniformOutput',false);
                    numArray=cellfun(@str2double,sortArray,'UniformOutput',false);
                    numArray=cell2mat(numArray);
                    if ~any(isnan(numArray))
                        sortArray=numArray;
                    end
                    [B, sortOrder]=sort(sortArray);
                    
                    [tempData]=ep_reorderData(EPoverview.workData,'cells',sortOrder);
                    if ~isempty(tempData)
                        EPoverview.lastData=EPoverview.workData;
                        EPoverview.lastMeta=EPoverview.workMeta;
                        EPoverview.workData=tempData;
                        
                        theDescription=['Sorted cells by ' specList{sortSpec} ' using Cells Pane of the Edit Function.'];
                        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                        EPoverview.workMeta.history.select(end+1)=0;
                    end
                end
            end
        end
        
        ep_editData('start');
        
    case 'sortTrials'
        
        sortValue=get(EPoverview.handles.trials.sort,'Value');
        sortList=get(EPoverview.handles.trials.sort,'String');
        tableData=get(EPoverview.handles.trials.dataTable,'Data');
        
        if sortValue < length(sortList)
            sortArray=cellfun(@num2str,tableData(:,sortValue),'UniformOutput',false);
            nanList=strcmp('NaN',sortArray);
            numArray=cellfun(@str2double,sortArray,'UniformOutput',false);
            numArray=cell2mat(numArray);
            if ~any(isnan(numArray(~nanList)))
                sortArray=numArray;
            end
            [B, sortOrder]=sort(sortArray);
            
            [tempData]=ep_reorderData(EPoverview.workData,'cells',sortOrder);
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                if ~isempty(EPoverview.workMeta.GAVsubs) && ~isequal(sortOrder(numWaves-numVcells+1:numWaves),[numWaves-numVcells+1:numWaves]')
                    EPoverview.workMeta.GAVsubs(:,2:end,:)=EPoverview.workMeta.GAVsubs(:,sortOrder(numWaves-numVcells+1:numWaves)-numWaves+numVcells+1,:);
                    if any(sortOrder<=numWaves-numVcells)
                        %convert cell indices to reflect the new order
                        for iCell=2:size(EPoverview.workMeta.GAVsubs,2)
                            for iRow=1:size(EPoverview.workMeta.GAVsubs{1,iCell,1},1)
                                newCell=sortOrder(EPoverview.workMeta.GAVsubs{1,iCell,1}(iRow,1));
                                EPoverview.workMeta.GAVsubs{1,iCell,1}(iRow,1)=newCell;
                            end
                        end
                    end
                end

                EPoverview.workMeta.trials.select=EPoverview.workMeta.trials.select(sortOrder);
                newEventsSelect=zeros(size(EPoverview.workMeta.events.select));
                newEventsIndex=zeros(size(EPoverview.workMeta.events.eventIndex));
                counter=0;
                for iTrial=1:length(sortOrder)
                    trialIndex=find(EPoverview.workMeta.events.eventIndex(:,2)==iTrial);
                    numEvents=length(trialIndex);
                    newEventsSelect(counter+1:counter+numEvents)=EPoverview.workMeta.events.select(trialIndex);
                    newEventsIndex(counter+1:counter+numEvents,:)=EPoverview.workMeta.events.eventIndex(trialIndex,:);
                end
                EPoverview.workMeta.events.select=newEventsSelect;
                EPoverview.workMeta.events.eventIndex=newEventsIndex;
                
                theDescription=['Sorted trials by ' sortList{sortValue} ' using Trials Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'sortFactors'
        
        sortValue=get(EPoverview.handles.factors.sort,'Value');
        sortList=get(EPoverview.handles.factors.sort,'String');
        tableData=get(EPoverview.handles.factors.dataTable,'Data');
        
        if sortValue < length(sortList)
            sortArray=cellfun(@num2str,tableData(:,sortValue+3),'UniformOutput',false);
            nanList=strcmp('NaN',sortArray);
            numArray=cellfun(@str2double,sortArray,'UniformOutput',false);
            numArray=cell2mat(numArray);
            if ~any(isnan(numArray(~nanList)))
                sortArray=numArray;
            end
            [B, sortOrder]=sort(sortArray);
            
            [tempData]=ep_reorderData(EPoverview.workData,'factors',sortOrder);
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Sorted factors by ' sortList{sortValue} ' using Factors Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'grandSubs'
        
        ep_tictoc('begin');
        grandValue=get(EPoverview.handles.subjects.grand,'Value');
        grandList=get(EPoverview.handles.subjects.grand,'String');
        tableData=get(EPoverview.handles.subjects.dataTable,'Data');
        
        if grandValue < length(grandList)
            
            keepSubjects=find(EPoverview.workMeta.subjects.select);
            if ~any(keepSubjects)
                keepSubjects=find(strcmp('AVG',tableData(:,6)));
            end
            if any(strcmp('GAV',tableData(keepSubjects,6)))
                disp('Grand averages cannot be auto grand averaged.');
                return
            end
            
            theList=tableData(keepSubjects,grandValue+3);
            grandList=unique(theList(~cellfun(@isempty,theList)));
            
            tempData=EPoverview.workData;
            for iGrand=1:length(grandList)
                ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;return;end
                %make sure new subject doesn't duplicate existing subject names
                newName=grandList{iGrand};
                comb=0;
                candidateName=newName;
                while any(strcmp(candidateName, EPoverview.workData.subNames))
                    comb=comb+1;
                    candidateName=[newName  '_' num2str(comb)];
                end
                if comb > 0
                    newName=[newName '_' num2str(comb)];
                end
                
                subList=keepSubjects(strcmp(grandList{iGrand},tableData(keepSubjects,grandValue+3)));

                tempData=ep_combineData(tempData,'subjects',{[],[],[],subList,[],[]},[],newName);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    return
                end
            end

            %save the GAVsubs info so it can be restored and to keep track of which ones are virtual.
            tempGAVsubs=EPoverview.workMeta.GAVsubs;
            if isempty(tempGAVsubs)
                tempGAVsubs=tempData.GAVsubs;
            else
                tempGAVsubs(end+1:end+size(tempData.GAVsubs,1)-1,:,:)=tempData.GAVsubs(2:end,:,:);
            end
            %convert virtual GAVEs to normal form so subject specs etc are available.
            tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if isempty(tempData)
                ep_tictoc('end');
                return
            end
            if ~isempty(tempData)
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                EPoverview.workMeta.GAVsubs=tempGAVsubs;

                EPoverview.workMeta.subjects.weights=zeros(length(EPoverview.workData.subNames),1);
                EPoverview.workMeta.subjects.select=[EPoverview.workMeta.subjects.select; false(length(grandList),1)];

                theDescription=['Added Grand Average using Subjects Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,{newName});
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end

        ep_tictoc('end');
        ep_editData('start');
        
    case 'grandCells'
        
        ep_tictoc('begin');
        grandValue=get(EPoverview.handles.cells.grand,'Value');
        grandList=get(EPoverview.handles.cells.grand,'String');
        tableData=get(EPoverview.handles.cells.dataTable,'Data');
        
        if grandValue < length(grandList)
            
            keepCells=EPoverview.workMeta.cells.select;
            if ~any(keepCells)
                keepCells=strcmp('SGL',tableData(:,5));
            end
            keepCells=find(keepCells);
            if any(strcmp('CMB',tableData(keepCells,5)))
                disp('Combined cells cannot be auto grand averaged.');
                return
            end
            
            grandList=unique(tableData(keepCells,grandValue+3));
            baseName=grandList{1};
            
            if any(diff(cellfun(@length,grandList)))
                %names are not all the same length
                indexList=cell(0);
                for iGrand=1:length(grandList)
                    indexList{iGrand}=find(strcmp(grandList{iGrand},tableData(keepCells,grandValue+3)));
                end
                noDiff=[];
            else
                numLetters=length(grandList{1});
                noDiff=ones(numLetters,1);
                for iLetter=1:numLetters
                    for iName=1:length(grandList)
                        if ~strcmp(grandList{1}(iLetter),grandList{iName}(iLetter))
                            noDiff(iLetter)=0;
                            continue
                        end
                    end
                end
                if all(noDiff)
                    disp('All the names are the same.')
                    return
                end
                for iName=1:length(grandList)
                    grandList{iName}=grandList{iName}(~noDiff); %keep only the part of the names that changes
                end

                numFactors=length(grandList{1});
                grandListChar=char(grandList);
                levelList=cell(numFactors,1);
                for iGrand=1:length(grandList)
                    indexList{iGrand}=iGrand;
                end
                comboCount=1;
                for iFac=1:numFactors
                    levelList{iFac}=unique(grandListChar(:,iFac));
                    comboCount=comboCount*length(levelList{iFac});
                end
                if comboCount ==  length(keepCells)
                    %the factors represented by the letters of the cell names are fully crossed so do all the combinations
                    disp('The cell names appear to represent a fully-crossed set of conditions so also adding all the main effects and interactions.')
                    grandList=cell(0);
                    indexList=cell(0);
                    if strcmp(EPoverview.workData.dataType,'average')
                        numLoops=numFactors-1;  %don't need to redo the full levels
                    else
                        numLoops=numFactors;
                    end
                    for iNumFacs = 1:numLoops
                        comboList=nchoosek([1:numFactors],iNumFacs);
                        for iCombo=1:size(comboList,1)
                            addList={''};
                            addIndexList={[]};
                            for iFac=1:size(comboList,2)
                                newAddList={''};
                                newAddIndexList={[1:size(grandListChar,1)]};
                                theFac=comboList(iCombo,iFac);
                                for iLevel=1:length(levelList{theFac})
                                    for iAdd=1:length(addList)
                                        theChar=levelList{theFac}(iLevel);
                                        newAddList{end}=[addList{iAdd} theChar];
                                        newAddList(end+1)={''};
                                        newAddIndexList{end}=intersect(newAddIndexList{end},find(strcmp(theChar,cellstr(grandListChar(:,theFac)))));
                                        newAddIndexList{end+1}=[1:size(grandListChar,1)];
                                    end
                                end
                                addList=newAddList(1:end-1);
                                addIndexList=newAddIndexList(1:end-1);
                            end
                            grandList(end+1:end+length(addList))=addList;
                            indexList(end+1:end+length(addIndexList))=addIndexList;
                        end
                    end
                else
                    %not fully crossed
                    indexList=cell(0);
                    for iGrand=1:length(grandList)
                        indexList{iGrand}=find(strcmp(grandList{iGrand},tableData(keepCells,grandValue+3)));
                    end
                end
            end
            
            tempData=EPoverview.workData;
            for iGrand=1:length(grandList)
                ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;return;end
                %make sure new cell doesn't duplicate existing cell names
                if ~isempty(noDiff)
                    newName=[baseName(find(noDiff)) grandList{iGrand}];
                else
                    newName=grandList{iGrand};
                end
                comb=0;
                candidateName=newName;
                while any(strcmp(candidateName, EPoverview.workData.cellNames))
                    comb=comb+1;
                    candidateName=[newName  '_' num2str(comb)];
                end
                if (comb==1) && strcmp(EPoverview.workData.dataType,'single_trial')
                    newName=[newName '_average'];
                elseif comb > 0
                    newName=[newName '_' num2str(comb)];
                end
                
                cellList=keepCells(indexList{iGrand});
                
                tempData=ep_combineData(tempData,'cells',{[],[],cellList,[],[],[]},[],newName,EPoverview.workMeta.cells.TrlWgts);
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
                if isempty(tempData)
                    disp('Error: Unable to combine cells.')
                    return
                end
                if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            end

            tempGAVsubs=tempData.GAVsubs;
            %convert virtual GAVEs to normal form so metadata information are available.
            tempData=ep_combineData(tempData,'convert',{[],[],[],[],[],[]},[],[],[]);
            if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
            if isempty(tempData)
                disp('Error: Unable to convert virtual cells.')
                return
            else
                if ~isempty(tempGAVsubs)
                    for iCell=1:length(grandList)
                        cellList=keepCells(indexList{iCell});
                        tempGAVsubs{1,end+1,1}=[cellList ones(size(cellList))];
                        for iGAV=2:size(tempGAVsubs,1)
                            for iFac=1:size(tempGAVsubs,3)
                                tempGAVsubs{iGAV,iCell,iFac}=tempGAVsubs{iGAV,1,iFac};
                            end
                        end
                    end
                end
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                EPoverview.workMeta.cells.weights=zeros(length(EPoverview.workData.cellNames),1);
                EPoverview.workMeta.cells.select=[EPoverview.workMeta.cells.select; false(length(grandList),1)];
                EPoverview.workMeta.GAVsubs=tempGAVsubs;
                
                theDescription=['Added Combined Cell using Cells Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,{newName});
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_tictoc('end');
        ep_editData('start');
        
    case 'changeStartSamp'
        
        newStartSamp=str2double(get(EPoverview.handles.samples.startSamp,'string'));
        if isnan(newStartSamp)
            set(EPoverview.handles.samples.startSamp,'string',sprintf('%d', 1))
            msg{1}='The new start sample must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartSamp < 1
            set(EPoverview.handles.samples.startSamp,'string',sprintf('%d', 1))
            msg{1}='The new start sample cannot be earlier than the existing start sample time.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartSamp == 1
            msg{1}='The start sample was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartSamp > length(EPoverview.workData.timeNames)
            msg{1}='The new start sample cannot be larger than the number of total samples.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimSamples=newStartSamp-1;
        
        tempData=ep_selectData(EPoverview.workData,{[],[trimSamples+1:length(EPoverview.workData.timeNames)],[],[],[],[]});
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed initial time points using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);          
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        ep_editData('start');
        
    case 'changeEndSamp'
        
        newEndSamp=str2double(get(EPoverview.handles.samples.endSamp,'string'));
        if isnan(newEndSamp)
            set(EPoverview.handles.samples.endSamp,'string',sprintf('%d', (length(EPoverview.workData.timeNames))))
            msg{1}='The new end sample must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndSamp > length(EPoverview.workData.timeNames)
            set(EPoverview.handles.samples.endSamp,'string',sprintf('%d', (length(EPoverview.workData.timeNames))))
            msg{1}='The new end sample cannot be later than the existing end sample time.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndSamp == length(EPoverview.workData.timeNames)
            msg{1}='The end sample was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndSamp < 1
            msg{1}='The new end sample cannot be smaller than one.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimSamples=length(EPoverview.workData.timeNames)-newEndSamp;
        
        tempData=ep_selectData(EPoverview.workData,{[],[1:length(EPoverview.workData.timeNames)-trimSamples],[],[],[],[]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed ending time points using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);  
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'changeStartMs'
        
        newStartMs=str2double(get(EPoverview.handles.samples.startMs,'string'));
        if isnan(newStartMs)
            set(EPoverview.handles.samples.startMs,'string',sprintf('%d', 1))
            msg{1}='The new start ms must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartMs < EPoverview.workData.timeNames(1)
            set(EPoverview.handles.samples.startMs,'string',sprintf('%d', 1))
            msg{1}='The new start ms cannot be earlier than the existing start ms.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartMs == EPoverview.workData.timeNames(1)
            msg{1}='The start ms was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartMs > EPoverview.workData.timeNames(end)
            msg{1}='The new start ms cannot be larger than the end ms.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimSamples=length(find(newStartMs > EPoverview.workData.timeNames));
        
        tempData=ep_selectData(EPoverview.workData,{[],[trimSamples+1:length(EPoverview.workData.timeNames)],[],[],[],[]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed initial time points using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver); 
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'changeEndMs'
        
        newEndMs=str2double(get(EPoverview.handles.samples.endMs,'string'));
        if isnan(newEndMs)
            set(EPoverview.handles.samples.endMs,'string',sprintf('%d', EPoverview.workData.timeNames(end)+(1000/EPoverview.workData.Fs)));
            msg{1}='The new end ms must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndMs > EPoverview.workData.timeNames(end)+(1000/EPoverview.workData.Fs)
            set(EPoverview.handles.samples.endMs,'string',sprintf('%d', EPoverview.workData.timeNames(end)+(1000/EPoverview.workData.Fs)));
            msg{1}='The new end ms cannot be later than the existing end ms.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndMs == EPoverview.workData.timeNames(end)
            msg{1}='The end ms was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndMs < EPoverview.workData.timeNames(1)
            set(EPoverview.handles.samples.endMs,'string',sprintf('%d', EPoverview.workData.timeNames(end)+(1000/EPoverview.workData.Fs)));
            msg{1}='The new end ms cannot be smaller than the start ms.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        
        trimSamples=length(find(newEndMs < (EPoverview.workData.timeNames+(1000/EPoverview.workData.Fs))));
        
        tempData=ep_selectData(EPoverview.workData,{[],[1:length(EPoverview.workData.timeNames)-trimSamples],[],[],[],[]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed ending time points using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);        
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'halfRate'
        
        if mod(length(EPoverview.workData.timeNames),2) ~= 0
            msg{1}='The total number of samples must be an even number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        newtimeNames=EPoverview.workData.timeNames(1:2:end);
        
        tempData=ep_interpTime(EPoverview.workData,newtimeNames);
        ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Sampling rate halved using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);     
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'twiceRate'
        %interpolate between timepoints to double the sampling rate.  The final interpolated time point will be at the very end of the epoch
        %and will therefore only have a real timepoint in front of it.
        
        sampleSize=median(diff(EPoverview.workData.timeNames))/2;
        
        newtimeNames=[EPoverview.workData.timeNames(1):sampleSize:EPoverview.workData.timeNames(end)+sampleSize]';
        
        tempData=ep_interpTime(EPoverview.workData,newtimeNames);
        ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Sampling rate doubled using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);      
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'ResampleData'
        %interpolate between timepoints to change the sampling rate.  The final interpolated time point will be at the very end of the epoch
        %and will therefore only have a real timepoint in front of it.
        
        newRate=str2double(get(EPoverview.handles.samples.FsResample,'String'));
        
        sampleSize=median(diff(EPoverview.workData.timeNames))*(EPoverview.workData.Fs/newRate);
        
        newtimeNames=[EPoverview.workData.timeNames(1):sampleSize:EPoverview.workData.timeNames(end)+sampleSize]';
        newNum=floor((newRate/EPoverview.workData.Fs)*length(EPoverview.workData.timeNames));
        newtimeNames=newtimeNames(1:newNum);
        
        tempData=ep_interpTime(EPoverview.workData,newtimeNames);
        ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Sampling rate changed using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);        
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'appendSamples'
        
        
        disp('Making assumption that file format is same as that of the original file.');
        importFormat=EPoverview.workData.fileFormat;
        dataType=EPoverview.workData.dataType;
        
        textPrefs.firstRow=EPmain.preferences.general.firstRow;
        textPrefs.lastRow=EPmain.preferences.general.lastRow;
        textPrefs.firstCol=EPmain.preferences.general.firstCol;
        textPrefs.lastCol=EPmain.preferences.general.lastCol;
        textPrefs.orientation=EPmain.preferences.general.orientation;
        textPrefs.sampleRate=EPmain.preferences.general.sampleRate;
        
        [fileNames, activeDirectory]=ep_getFilesUI(importFormat);
        if isempty(fileNames)
            return
        end
        if isempty(fileNames) || ((length(fileNames{1})==1) && (fileNames{1}==0))
            msg{1}='No filenames selected. You have to click on a name.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        ep_tictoc('begin');
        
        numOldSamps=length(EPoverview.workData.timeNames);
        ced=EPoverview.workData.ced;
        montage=EPoverview.workData.montage;
        newSamps=EPoverview.workData.timeNames;
        workData=EPoverview.workData;
        for iFile=1:size(fileNames,2)
            ep_tictoc;
            inArg=[];
            inArg{1}='file';
            inArg{2}=[activeDirectory fileNames{iFile}];
            inArg{3}='format';
            inArg{4}=importFormat;
            inArg{5}='screenSize';
            inArg{6}=EPmain.scrsz;
            inArg{7}='FontSize';
            inArg{8}=EPmain.fontsize;
            if ~strcmp(importFormat,'ep_mat')
                inArg{9}='type';
                inArg{10}=dataType;
            end
            inArg{end+1}='textPrefs';
            inArg{end+1}=textPrefs;
            inArg{end+1}='ced';
            inArg{end+1}=ced;
            inArg{end+1}='montage';
            inArg{end+1}=montage;
            SMIsuffix=EPmain.preferences.general.SMIsuffix;
            if ~isempty(SMIsuffix)
                inArg{end+1}='SMIsuffix';
                inArg{end+1}=SMIsuffix;
            end
            specSuffix=EPmain.preferences.general.specSuffix;
            if ~isempty(specSuffix)
                inArg{end+1}='specSuffix';
                inArg{end+1}=specSuffix;
            end
            if strcmp(importFormat,'matlab_mat') && (iFile>1)
                inArg{end+1}='matlabDims';
                inArg{end+1}=outInfo.matlabDims;
            end
            [newData, origEloc, outInfo]=ep_readData(inArg);
            errorFlag=0;
            if isempty(newData) || isempty(newData.data)
                errorFlag=1;
                disp(['Error: Was unable to read ' inArg{2}]);
            else
                if ~strcmp(dataType,newData.dataType)
                    errorFlag=1;
                    disp(['Error: Mismatched data type for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.cellNames) ~= length(newData.cellNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of cells for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.chanNames) ~= length(newData.chanNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of channels for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.subNames) ~= length(newData.subNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of subjects for ' inArg{2}]);
                end
                
                if length(EPoverview.workData.facNames) ~= length(newData.facNames)
                    errorFlag=1;
                    disp(['Error: Mismatched number of factors for ' inArg{2}]);
                end
                
                if size(EPoverview.workData.subjectSpecs,2) ~= size(newData.subjectSpecs,2)
                    errorFlag=1;
                    disp(['Error: Mismatched number of subject specs for ' inArg{2}]);
                end
                
                if errorFlag
                    beep();
                else
                    workData=ep_addData(workData,newData,'points');
                end
            end
        end
        
        if isempty(workData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(EPoverview.workData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=workData;
                
                numEvents=0;
                for iSub=1:length(newData.subNames)
                    ep_tictoc;
                    for iWave=1:length(newData.cellNames)
                        priorEvents=numEvents;
                        eventTrials=length(newData.events{iSub,iWave});
                        numEvents=numEvents+eventTrials;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,1)=iSub;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,2)=iWave;
                    end
                end
                EPoverview.workMeta.events.select=[EPoverview.workMeta.events.select; repmat(false,numEvents,1)];
                EPoverview.workMeta.events.eventIndex=[EPoverview.workMeta.events.eventIndex; newEventIndex];
                
                if length(fileNames)==1
                    theDescription=['Time points appended from ' fileNames{1} ' using Samples Pane of the Edit Function.'];
                else
                    theDescription=['Time points appended using Samples Pane of the Edit Function.'];
                end
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,fileNames);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_tictoc('end');
        ep_editData('start');
        
    case 'changeStartBin'
        
        newStartBin=str2double(get(EPoverview.handles.freqs.startBin,'string'));
        if isnan(newStartBin)
            set(EPoverview.handles.freqs.startBin,'string',sprintf('%d', 1))
            msg{1}='The new start frequency bin must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartBin < 1
            set(EPoverview.handles.freqs.startBin,'string',sprintf('%d', 1))
            msg{1}='The new start frequency bin cannot be earlier than the existing start frequency bin.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartBin == 1
            msg{1}='The start frequency bin was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartBin > length(EPoverview.workData.freqNames)
            msg{1}='The new start frequency bin cannot be larger than the largest frequency bin.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimFreqs=newStartBin-1;
        
        tempData=ep_selectData(EPoverview.workData,{[],[],[],[],[],[1+trimFreqs:length(EPoverview.workData.freqNames)]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed initial frequency bins using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);  
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'changeEndBin'
        
        newEndBin=str2double(get(EPoverview.handles.freqs.endBin,'string'));
        if isnan(newEndBin)
            set(EPoverview.handles.freqs.endBin,'string',sprintf('%d', (length(EPoverview.workData.freqNames))))
            msg{1}='The new end frequency bin must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndBin > length(EPoverview.workData.freqNames)
            set(EPoverview.handles.freqs.endBin,'string',sprintf('%d', (length(EPoverview.workData.freqNames))))
            msg{1}='The new end frequency bin cannot be later than the existing end frequency bin.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndBin == length(EPoverview.workData.freqNames)
            msg{1}='The end frequency bin was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndBin < 1
            msg{1}='The new end frequency bin cannot be smaller than one.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimFreqs=length(EPoverview.workData.freqNames)-newEndBin;
        
        tempData=ep_selectData(EPoverview.workData,{[],[],[],[],[],[1:length(EPoverview.workData.freqNames)-trimFreqs]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed ending frequency bins using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);         
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'changeStartFreq'
        
        newStartFreq=str2double(get(EPoverview.handles.freqs.startFreq,'string'));
        if isnan(newStartFreq)
            set(EPoverview.handles.freqs.startFreq,'string',sprintf('%d', EPoverview.workData.freqNames(1)))
            msg{1}='The new start frequency must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartFreq < EPoverview.workData.freqNames(1)
            set(EPoverview.handles.freqs.startFreq,'string',sprintf('%d', EPoverview.workData.freqNames(1)))
            msg{1}='The new start frequency cannot be earlier than the existing start frequency.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartFreq == EPoverview.workData.freqNames(1)
            msg{1}='The start frequency bin was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newStartFreq > EPoverview.workData.freqNames(end)
            msg{1}='The new start frequency cannot be larger than the largest frequency.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimFreqs=length(find(newStartFreq > EPoverview.workData.freqNames));
        
        tempData=ep_selectData(EPoverview.workData,{[],[],[],[],[],[1+trimFreqs:length(EPoverview.workData.freqNames)]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed initial frequencies using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);                
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'changeEndFreq'
        
        newEndFreq=str2double(get(EPoverview.handles.freqs.endFreq,'string'));
        if isnan(newEndFreq)
            set(EPoverview.handles.freqs.endFreq,'string',sprintf('%d', (EPoverview.workData.freqNames(end))))
            msg{1}='The new end frequency must be a number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndFreq > EPoverview.workData.freqNames(end)
            set(EPoverview.handles.freqs.endFreq,'string',sprintf('%d', EPoverview.workData.freqNames(end)))
            msg{1}='The new end frequency cannot be later than the existing end frequency.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndFreq == EPoverview.workData.freqNames(end)
            msg{1}='The end frequency was not changed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if newEndFreq < EPoverview.workData.freqNames(1)
            msg{1}='The new end frequency cannot be smaller than the first one.';
            set(EPoverview.handles.freqs.endFreq,'string',sprintf('%d', EPoverview.workData.freqNames(end)))
            [msg]=ep_errorMsg(msg);
            return
        end
        
        trimFreqs=length(find(newEndFreq < EPoverview.workData.freqNames));
        
        tempData=ep_selectData(EPoverview.workData,{[],[],[],[],[],[1:length(EPoverview.workData.freqNames)-trimFreqs]});

        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                theDescription=['Trimmed ending frequencies using Samples Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);    
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'halfBinning'
        
        if mod(length(EPoverview.workData.freqNames),2) ~= 0
            msg{1}='The total number of frequency bins must be an even number.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        tempData=EPoverview.workData;
        
        tempData.freqNames=tempData.freqNames(1:2:end);
        
        if ~isempty(tempData.facVecF)
            newFacVecF=zeros(numFreqs/2,numFacs);
            for iFreq=1:length(tempData.freqNames)
                newFacVecF(iFreq,:)=(tempData.facVecF((iFreq-1)*2+1,:)+tempData.facVecF(iFreq*2,:))./2;
            end
        else
            newData=zeros(numChans,numPoints,numWaves,numSubs,numFacs,numFreqs/2,numRels);
            for iFreq=1:length(tempData.freqNames)
                %while the data are not spectral density internally, the data amplitude needs to be adjusted
                %for what it would have been if the Hz bin size was originally larger, so summing the merged bins
                %rather than taking the mean of the merged bins.
                newData(:,:,:,:,:,iFreq,:)=(tempData.data(:,:,:,:,:,(iFreq-1)*2+1,:)+tempData.data(:,:,:,:,:,iFreq*2,:));
            end
        end
        
        tempData.data=newData;
        
        if ~isempty(tempData.facData)
            newData=zeros(numChans,numPoints,numWaves,numSubs,numFacs,numFreqs/2,numRels);
            for iFreq=1:length(tempData.freqNames)
                newData(:,:,:,:,:,iFreq,:)=(tempData.facData(:,:,:,:,:,(iFreq-1)*2+1,:)+tempData.facData(:,:,:,:,:,iFreq*2,:))./2;
            end
            
            tempData.facData=newData;
        end
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Frequency binning halved using Samples Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'Binning'
        
        tempData=EPoverview.workData;
        newBinning=str2double(get(EPoverview.handles.freqs.binning,'String'));
        oldBinning=EPoverview.workData.freqNames(2)-EPoverview.workData.freqNames(1);
        tempData.freqNames=(EPoverview.workData.freqNames/oldBinning)*newBinning;
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Nominal binning changed using Samples Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);    
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');
        
    case 'deleteEvents'
        if sum(EPoverview.workMeta.events.select) ==0
            msg{1}='No events specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        tempData=EPoverview.workData;
        
        keepEvents=not(EPoverview.workMeta.events.select);
        
        eventCounter=0;
        for subject=1:numSubs
            for wave=1:numWaves
                eventList=[];
                for event=1:length(tempData.events{subject,wave})
                    eventCounter=eventCounter+1;
                    if keepEvents(eventCounter)
                        eventList=[eventList event];
                    end
                end
                tempData.events{subject,wave}=tempData.events{subject,wave}(eventList);
            end
        end
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            EPoverview.workMeta.events.select=EPoverview.workMeta.events.select(keepEvents);
            EPoverview.workMeta.events.eventIndex=EPoverview.workMeta.events.eventIndex(keepEvents,:);
            
            theDescription=['Events deleted using Events Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'clearEventWeights'
        
        EPoverview.workMeta.events.weights=repmat(0,numEvents,1);
        EPoverview.workMeta.events.select=repmat(false,numEvents,1);
        
        ep_editData('start');
        
    case 'allEvents'
        
        EPoverview.workMeta.events.weights=repmat(1,numEvents,1);
        EPoverview.workMeta.events.select=repmat(true,numEvents,1);
        
        ep_editData('start');
        
    case 'exportEvents'
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Events',[EPoverview.workData.dataName EPmain.preferences.general.specSuffix]);
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        ep_writeEventText(EPoverview.workData, [PathName filesep FileName]);
        
        ep_editData('start');
        
    case 'importEvents'
        
        [FileName,PathName,FilterIndex] = uigetfile('*.txt','Import Events',[EPoverview.workData.dataName EPmain.preferences.general.specSuffix]);
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        tempData= ep_readEventText(EPoverview.workData, [PathName filesep FileName]);
        if ~isempty(tempData)
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                numEvents=0;
                for iSub=1:length(tempData.subNames)
                    for iWave=1:length(tempData.cellNames)
                        priorEvents=numEvents;
                        eventTrials=length(EPoverview.workData.events{iSub,iWave});
                        numEvents=numEvents+eventTrials;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,1)=iSub;
                        newEventIndex(priorEvents+1:priorEvents+eventTrials,2)=iWave;
                    end
                end
                
                EPoverview.workMeta.events.select=repmat(false,numEvents,1);
                EPoverview.workMeta.events.eventIndex=newEventIndex;
                
                theDescription=['Events imported using Events Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,{FileName});
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        ep_editData('start');
        
    case 'deleteFacs'
        if sum(EPoverview.workMeta.factors.select) ==0
            msg{1}='No factors specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if sum(EPoverview.workMeta.factors.select) ==numFacs
            msg{1}='There would be nothing left.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        
        keepFactors=find(not(EPoverview.workMeta.factors.select));
        
        tempData=ep_selectData(EPoverview.workData,{[],[],[],[],keepFactors,[]});
        if ~isempty(tempData)
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                EPoverview.workMeta.factors.select=false(length(EPoverview.workData.facNames),1);
                
                theDescription=['Factors deleted using Factors Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        
        ep_editData('start');
        
    case 'addFacs'
        
        tableData=get(EPoverview.handles.factors.dataTable,'Data');
        facList=find(cell2mat(tableData(:,2)) & (cell2mat(tableData(:,3))~=0));
        weights=cell2mat(tableData(facList,3));

        if ~any(weights)
            msg{1}='No weights specified for forming new factor average.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if isscalar(find(weights))
            msg{1}='Need to specify at least two factors to combine.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        %make sure new channel doesn't duplicate existing channel names
        comb=1;
        while any(strcmp(['combined' num2str(comb)], EPoverview.workData.facNames))
            comb=comb+1;
        end
        
        tempData=ep_combineData(EPoverview.workData,'factors',{[],[],[],[],facList,[]},weights,['combined' num2str(comb)]);
        if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        if ~isempty(tempData)
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                
                EPoverview.workMeta.factors.weights=zeros(length(EPoverview.workData.facNames),1);
                EPoverview.workMeta.factors.select=false(length(EPoverview.workData.facNames),1);
                
                theDescription=['Factors added using Factors Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
            
            
        end
        
        ep_editData('start');
        
    case 'clearFacWeights'
        
        EPoverview.workMeta.factors.weights=repmat(0,numFacs,1);
        EPoverview.workMeta.factors.select=repmat(false,numFacs,1);
        
        ep_editData('start');
        
    case 'allFacs'
        
        EPoverview.workMeta.factors.weights=repmat(1,numFacs,1);
        EPoverview.workMeta.factors.select=repmat(true,numFacs,1);
        
        ep_editData('start');
        
    case 'appendFacs'
        
        ep_tictoc('begin');
        disp('Making assumption that file format is same as that of the original file.');
        importFormat=EPoverview.workData.fileFormat;
        fileType=EPoverview.workData.dataType;
        
        textPrefs.firstRow=EPmain.preferences.general.firstRow;
        textPrefs.lastRow=EPmain.preferences.general.lastRow;
        textPrefs.firstCol=EPmain.preferences.general.firstCol;
        textPrefs.lastCol=EPmain.preferences.general.lastCol;
        textPrefs.orientation=EPmain.preferences.general.orientation;
        textPrefs.sampleRate=EPmain.preferences.general.sampleRate;
        
        inArg{1}='format';
        inArg{2}=importFormat;
        inArg{3}='type';
        inArg{4}=fileType;
        inArg{7}='textPrefs';
        inArg{8}=textPrefs;
        inArg{9}='screenSize';
        inArg{10}=EPmain.scrsz;
        inArg{11}='FontSize';
        inArg{12}=EPmain.fontsize;
        
        [newData]=ep_readData(inArg);
        
        if isempty(newData) || isempty(newData.data)
            return
        end
        
        if ~strcmp(fileType,newData.dataType)
            msg{1}='The file types do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.cellNames) ~= length(newData.cellNames)
            msg{1}='The numbers of cells do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.chanNames) ~= length(newData.chanNames)
            msg{1}='The numbers of channels do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.timeNames) ~= length(newData.timeNames)
            msg{1}='The numbers of time points do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if length(EPoverview.workData.subames) ~= length(newData.subNames)
            msg{1}='The numbers of subjects do not match.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if size(EPoverview.workData.facVecS,2) ~= size(newData.facVecS,2)
            msg{1}='The two datasets are not equally factor compressed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        if size(EPoverview.workData.facVecT,2) ~= size(newData.facVecT,2)
            msg{1}='The two datasets are not equally factor compressed.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        tempData=ep_addData(EPoverview.workData,newData,'factors');
        
        if isempty(tempData)
            disp('Error: no data.');
        else
            [err]=ep_checkEPfile(EPoverview.workData);
            if ~err
                EPoverview.lastData=EPoverview.workData;
                EPoverview.lastMeta=EPoverview.workMeta;
                EPoverview.workData=tempData;
                EPoverview.workMeta.factors.select=[EPoverview.workMeta.factors.select repmat(false,length(newData.facNames),1)];
                EPoverview.workMeta.factors.weights=[EPoverview.workMeta.factors.weights repmat(0,length(newData.facNames),1)];
                
                theDescription=['Appended factors using Factors Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        ep_tictoc('end');
        ep_editData('start');
        
    case 'exportFacs'
        
        tableData=get(EPoverview.handles.factors.dataTable,'Data');
        tableData=tableData(:,4:end);
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Table');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [pathstr, name, ext] = fileparts(FileName);
        if ~strcmp(ext,'.txt')
            FileName=[FileName '.txt'];
        end
        
        fid=fopen([PathName FileName],'w');
        
        for i=1:size(tableData,1)
            for j=1:size(tableData,2)
                theCell=tableData{i,j};
                if isnumeric(theCell)
                    fprintf(fid,'%d', theCell);
                else
                    fprintf(fid,'%s', theCell);
                end
                if j < size(tableData,2)
                    fprintf(fid,'\t');
                end
            end
            if i < size(tableData,1)
                fprintf(fid,'\r');
            end
        end
        
        ep_editData('start');
        
    case 'exportQC'
        
        tableData=get(EPoverview.handles.QC.dataTable,'Data');
        tableNames=get(EPoverview.handles.QC.dataTable,'ColumnName');
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Table');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [pathstr, name, ext] = fileparts(FileName);
        if ~strcmp(ext,'.txt')
            FileName=[FileName '.txt'];
        end
        
        fid=fopen([PathName FileName],'w');
        
        for iName=1:length(tableNames)
            fprintf(fid,'%s', tableNames{iName});
            if iName < length(tableNames)
                fprintf(fid,'\t');
            end
        end
        fprintf(fid,'\r');
        
        for iRow=1:size(tableData,1)
            for iCol=1:size(tableData,2)
                theCell=tableData{iRow,iCol};
                if isnumeric(theCell)
                    fprintf(fid,'%d', theCell);
                else
                    fprintf(fid,'%s', theCell);
                end
                if iCol < size(tableData,2)
                    fprintf(fid,'\t');
                end
            end
            if iRow < size(tableData,1)
                fprintf(fid,'\r');
            end
        end
        
        ep_editData('start');
        
    case 'exportPCA'
        
        tableData=get(EPoverview.handles.PCA.dataTable,'Data');
        
        [FileName,PathName,FilterIndex] = uiputfile('*.txt','Export Table');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [pathstr, name, ext] = fileparts(FileName);
        if ~strcmp(ext,'.txt')
            FileName=[FileName '.txt'];
        end
        
        fid=fopen([PathName FileName],'w');
        
        for iRow=1:size(tableData,1)
            for iCol=1:size(tableData,2)
                theCell=tableData{iRow,iCol};
                if isnumeric(theCell)
                    fprintf(fid,'%d', theCell);
                else
                    fprintf(fid,'%s', theCell);
                end
                if iCol < size(tableData,2)
                    fprintf(fid,'\t');
                end
            end
            if iRow < size(tableData,1)
                fprintf(fid,'\r');
            end
        end
        
        ep_editData('start');
        
    case 'importTrials'
        
        [FileName,PathName,FilterIndex] = uigetfile({'*.txt';'*.epoc';'*.csv'},'Cell Names');
        
        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end
        
        [theHeader, theData, delim] = ep_textScan([PathName FileName]); % it is assumed that there are no column headers
        ep_tictoc;if EPtictoc.stop;EPtictoc.stop=0;ep_editData('start');return;end
        
        if size(theData,1) ~= numWaves
            msg{1}='Number of names in text file does not match number of trials in dataset.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if ~isempty(theData)
            tempData=EPoverview.workData;
            tempData.cellNames=theData;
            
            %rename the combined trial names
            uniqueCells=unique(tempData.cellNames,'first');
            numCells=length(uniqueCells);
            trialCount=ones(numCells,1);
            for wave=1:length(tempData.cellNames)
                theCell=strcmp(tempData.cellNames(wave),uniqueCells);
                tempData.trialNames(wave)=trialCount(theCell);
                trialCount(theCell)=trialCount(theCell)+1;
            end
            %group the trials by cell
            [uniqueCellNames m cellIDs]=unique(tempData.cellNames); %get number of trials in each cell
            cellNums=hist(cellIDs,unique(cellIDs));
            trialCounter=zeros(numCells,1);
            cellNames2=cell(size(tempData.cellNames));
            cellTypes2=cell(size(tempData.cellTypes));
            trialNames2=zeros(size(tempData.trialNames));
            trialSpecs2=cell(size(tempData.trialSpecs));
            events2=cell(size(tempData.events));
            avgNum2=zeros(size(tempData.avgNum));
            covNum2=zeros(size(tempData.covNum));
            subNum2=zeros(size(tempData.subNum));
            data2=zeros(size(tempData.data));
            if ~isempty(tempData.facData)
                facData2=zeros(size(tempData.facData));
            end
            if ~isempty(tempData.noise)
                noise2=zeros(size(tempData.noise));
            end
            if ~isempty(tempData.covAVE)
                covAVE2=zeros(size(tempData.covAVE));
            end
            
            blinkTrial2=zeros(size(tempData.analysis.blinkTrial));
            saccadeTrial2=zeros(size(tempData.analysis.saccadeTrial));
            saccadeOnset2=zeros(size(tempData.analysis.saccadeOnset));
            moveTrial2=zeros(size(tempData.analysis.moveTrial));
            badTrials2=zeros(size(tempData.analysis.badTrials));
            badChans2=zeros(size(tempData.analysis.badChans));
            
            for theTrial = 1:length(cellIDs)
                newCell=cellIDs(theTrial);
                trialCounter(newCell)=trialCounter(newCell)+1;
                data2(:,:,sum(cellNums(1:newCell-1))+trialCounter(newCell),:,:,:)=tempData.data(:,:,theTrial,:,:,:,:);
                if ~isempty(tempData.facData)
                    facData2(:,:,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.facData(:,:,theTrial,:,:,:,:);
                end
                if ~isempty(tempData.noise)
                    noise2(:,:,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.noise(:,:,theTrial,:,:);
                end
                if ~isempty(tempData.covAVE)
                    covAVE2(:,:,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.covAVE(:,:,theTrial,:,:,:);
                end
                
                cellNames2(sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.cellNames(theTrial);
                cellTypes2(sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.cellTypes(theTrial);
                trialNames2(sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.trialNames(theTrial);
                trialSpecs2(sum(cellNums(1:newCell-1))+trialCounter(newCell),:)=tempData.trialSpecs(theTrial,:);
                events2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.events(1,theTrial);
                avgNum2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.avgNum(1,theTrial);
                covNum2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.covNum(1,theTrial);
                subNum2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))=tempData.subNum(1,theTrial);
                blinkTrial2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))= tempData.analysis.blinkTrial(1,theTrial);
                saccadeTrial2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))= tempData.analysis.saccadeTrial(1,theTrial);
                saccadeOnset2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))= tempData.analysis.saccadeOnset(1,theTrial);
                moveTrial2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))= tempData.analysis.moveTrial(1,theTrial);
                badTrials2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell))= tempData.analysis.badTrials(1,theTrial);
                badChans2(1,sum(cellNums(1:newCell-1))+trialCounter(newCell),:)= tempData.analysis.badChans(1,theTrial,:);
            end
            
            tempData.cellNames=cellNames2;
            tempData.cellTypes=cellTypes2;
            tempData.trialNames=trialNames2;
            tempData.trialSpecs=trialSpecs2;
            tempData.events=events2;
            tempData.avgNum=avgNum2;
            tempData.covNum=covNum2;
            tempData.subNum=subNum2;
            tempData.data=data2;
            if ~isempty(tempData.facData)
                tempData.data=facData2;
            end
            if ~isempty(tempData.noise)
                tempData.noise=noise2;
            end
            if ~isempty(tempData.covAVE)
                tempData.covAVE=covAVE2;
            end
            tempData.analysis.blinkTrial=blinkTrial2;
            tempData.analysis.saccadeTrial=saccadeTrial2;
            tempData.analysis.saccadeOnset=saccadeOnset2;
            tempData.analysis.moveTrial=moveTrial2;
            tempData.analysis.badTrials=badTrials2;
            tempData.analysis.badChans=badChans2;
            
            [err]=ep_checkEPfile(tempData);
            if ~err
                EPoverview.workMeta.cells.select=repmat(false,numCells,1);
                EPoverview.workMeta.cells.weights=repmat(0,numCells,1);
                EPoverview.workData=tempData;
                
                theDescription=['Imported trials file ' PathName FileName ' using Trials Pane of the Edit Function.'];
                EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver,{FileName});
                EPoverview.workMeta.history.select(end+1)=0;
            end
        end
        ep_editData('start');
        
    case 'deleteSess'
        if sum(EPoverview.workMeta.sessions.select) ==0
            msg{1}='No Sessions specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        if EPoverview.workMeta.sessions.select(1) ==1
            msg{1}='The n/a category cannot be specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        tempData=EPoverview.workData;
        deleteSessions=find(EPoverview.workMeta.sessions.select)-1;
        
        tempData.sessNames(deleteSessions)=[];
        tempData.sessNums(ismember(EPoverview.workData.sessNums,deleteSessions))=0;
        [err]=ep_checkEPfile(EPoverview.workData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.workData=tempData;
            
            theDescription=['Deleted sessions using Sessions Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'addSess'
        
        tempData=EPoverview.workData;
        tempData.sessNames{end+1,1}=['session ' num2str(length(EPoverview.workData.sessNames)+1)];
        [err]=ep_checkEPfile(EPoverview.workData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            EPoverview.workMeta.sessions.select=[EPoverview.workMeta.sessions.select; false];
            
            theDescription=['Added session using Sessions Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
        
    case 'clearSessWeights'
        
        EPoverview.workMeta.sessions.select=repmat(false,length(EPoverview.workMeta.sessions.select),1);
        
        ep_editData('start');
        
    case 'allSess'
        
        EPoverview.workMeta.sessions.select=repmat(true,length(EPoverview.workMeta.sessions.select),1);
        
        ep_editData('start');
        
    case 'saveCED'

        %canonical .ced field order from pop_chanedit.m file
        listcolformat = fieldnames(EPoverview.workData.eloc);

        [FileName,PathName,FilterIndex] = uiputfile({'*.ced';'*.sfp'},'CED file');

        if isnumeric(FileName)
            if FileName == 0
                msg{1}='No file name specified.';
                [msg]=ep_errorMsg(msg);
                return
            end
        end

        [pathstr, name, ext] = fileparts(FileName);

        switch ext
            case '.sfp'
                fidOut=fopen([PathName FileName],'w');
                if fidOut==-1
                    disp('Problem with writing SFP file.')
                    return
                end

                %for CED Y is +left -right, Z is anterior+ posterior-, X is dorsal+ ventral -.  The sfp file needs to map X to Y, Y to X, and Z to Z.
                %convention, at least, seems to be fiducial points first.
                sfpLoc=[EPoverview.workData.implicit, EPoverview.workData.eloc];
                sfpLoc2=sfpLoc;
                for iRow=1:length(sfpLoc)
                    sfpLoc(iRow).X=sfpLoc2(iRow).Y;
                    sfpLoc(iRow).Y=sfpLoc2(iRow).X;
                end

                for iRow=1:length(sfpLoc)
                    if any(strcmp(sfpLoc(iRow).type,{'EEG';'REF';'FID'}))
                        fprintf(fidOut, '%s\t%d\t%d\t%d\t\n',sfpLoc(iRow).labels,sfpLoc(iRow).X,sfpLoc(iRow).Y,sfpLoc(iRow).Z);
                    end
                end
                fclose(fidOut);

                fidOut=fopen([PathName pathstr name '.ela'],'w');
                if fidOut==-1
                    disp('Problem with writing SFP file.')
                    return
                end

                for iRow=1:length(sfpLoc)
                    if any(strcmp(sfpLoc(iRow).type,{'EEG';'REF'}))
                        fprintf(fidOut, 'EEG\t%s\n',sfpLoc(iRow).labels);
                    end
                end
                fclose(fidOut);
            case '.ced'
                fidOut=fopen([PathName FileName],'w');
                if fidOut==-1
                    disp('Problem with writing CED file.')
                    return
                end

                fprintf(fidOut, 'Number\t');
                for iField=1:length(listcolformat)
                    fprintf(fidOut, '%s\t',  listcolformat{iField}); %field labels
                end
                fprintf(fidOut, '\n');
                for iRow=1:length(EPoverview.workData.eloc)
                    fprintf(fidOut, '%d\t',  iRow);
                    for iField = 1:length(listcolformat)
                        evalc(['theVal=EPoverview.workData.eloc(iRow).' listcolformat{iField} ';']);
                        if strcmp(listcolformat{iField},'labels')
                            theVal=EPoverview.workData.chanNames{iRow};
                        else
                            if isempty(theVal)
                                if strcmp(listcolformat{iField},'type')
                                    theVal='EEG';
                                else
                                    theVal=' ';
                                end
                            end
                        end
                        if isnumeric(theVal)
                            fprintf(fidOut, '%3.3g\t',  theVal);
                        else
                            fprintf(fidOut, '%s\t',  theVal);
                        end
                    end
                    fprintf(fidOut, '\n');
                end
                for iRow=1:length(EPoverview.workData.implicit)
                    fprintf(fidOut, '%d\t',  iRow+length(EPoverview.workData.eloc));
                    for iField = 1:length(listcolformat)
                        evalc(['theVal=EPoverview.workData.implicit(iRow).' listcolformat{iField} ';']);
                        if isempty(theVal)
                            if strcmp(listcolformat{iField},'labels')
                                theVal=['FID' num2str(iRow)];
                            elseif strcmp(listcolformat{iField},'type')
                                theVal='EEG';
                            else
                                theVal=' ';
                            end
                        end
                        if isnumeric(theVal)
                            fprintf(fidOut, '%3.3g\t',  theVal);
                        else
                            fprintf(fidOut, '%s\t',  theVal);
                        end
                    end
                    fprintf(fidOut, '\n');
                end
                fclose(fidOut);
            otherwise
                msg{1}='File name did not have a recognized suffix.';
                [msg]=ep_errorMsg(msg);
                return
        end


        
    case 'headCED'
        
        disp('Using EEGlab function headplot to perform 3D head display.');
        
        EEGnum=length(EPoverview.workData.eloc);
        FIDnum=length(EPoverview.workData.implicit);
        [EPdir, ~, ~] = fileparts(which('ep.m'));
        sfpEloc = ep_readlocsWrapper([EPdir filesep 'templates' filesep 'Standard-10-5-Cap385-VEOG.ced'],'filetype','chanedit');
        if EPtictoc.stop;EPtictoc.stop=0;return;end
        spfNum=length(sfpEloc);
        
        %         dataEloc2 = ep_transformEloc(EPoverview.workData.eloc, EPoverview.workData.implicit, sfpEloc, [], EPoverview.workData.chanNames, [], EPoverview.workData.ced, '');
        %         if isempty(dataEloc2)
        %             return
        %         end
        cEloc=ep_elocFormat('initialize');
        for iChan=1:EEGnum
            cEloc(iChan).labels=EPoverview.workData.eloc(iChan).labels;
            cEloc(iChan).X=EPoverview.workData.eloc(iChan).cX;
            cEloc(iChan).Y=EPoverview.workData.eloc(iChan).cY;
            cEloc(iChan).Z=EPoverview.workData.eloc(iChan).cZ;
            cEloc(iChan).cX=EPoverview.workData.eloc(iChan).cX;
            cEloc(iChan).cY=EPoverview.workData.eloc(iChan).cY;
            cEloc(iChan).cZ=EPoverview.workData.eloc(iChan).cZ;
        end
        for iChan=1:FIDnum
            cEloc(iChan+EEGnum).labels=EPoverview.workData.implicit(iChan).labels;
            cEloc(iChan+EEGnum).X=EPoverview.workData.implicit(iChan).cX;
            cEloc(iChan+EEGnum).Y=EPoverview.workData.implicit(iChan).cY;
            cEloc(iChan+EEGnum).Z=EPoverview.workData.implicit(iChan).cZ;
            cEloc(iChan+EEGnum).cX=EPoverview.workData.implicit(iChan).cX;
            cEloc(iChan+EEGnum).cY=EPoverview.workData.implicit(iChan).cY;
            cEloc(iChan+EEGnum).cZ=EPoverview.workData.implicit(iChan).cZ;
        end
        if all(isempty([cEloc(:).cX]))
            disp('Data lacks the canonical electrode coordinates required for this function.')
            return
        end
        cEloc=convertlocs(cEloc,'cart2all');
        cEloc=ep_elocFormat(cEloc);
        
        EEGlocList=zeros(EEGnum,1);
        FIDlocList=zeros(FIDnum,1);
        for iChan=1:length(cEloc)
            if ~isempty(cEloc(iChan).X)
                if iChan <= EEGnum
                    EEGlocList(iChan)=1;
                    cEloc(iChan).labels=EPoverview.workData.chanNames{iChan}; %head should display chanNames, not eloc labels.
                else
                    FIDlocList(iChan-EEGnum)=1;
                end
                sfpEloc(end+1).labels=cEloc(iChan).labels;
                sfpEloc(end).theta=cEloc(iChan).theta;
                sfpEloc(end).radius=cEloc(iChan).radius;
                sfpEloc(end).X=cEloc(iChan).X;
                sfpEloc(end).Y=cEloc(iChan).Y;
                sfpEloc(end).Z=cEloc(iChan).Z;
                sfpEloc(end).sph_theta=cEloc(iChan).sph_theta;
                sfpEloc(end).sph_phi=cEloc(iChan).sph_phi;
                sfpEloc(end).sph_radius=cEloc(iChan).sph_radius;
                sfpEloc(end).type='';
            end
        end
        EEGlocNum=sum(EEGlocList);
        FIDlocNum=sum(FIDlocList);

        fidnames = { 'nz' 'lpa' 'rpa' 'nasion' 'left' 'right' 'nazion' 'fidnz' 'fidt9' 'fidt10' 'cms' 'drl' 'nas' 'lht' 'rht' 'lhj' 'rhj' }; %fiducial names recognized by read_locs
        for iChan=1:length(sfpEloc)
            if any(strcmpi(sfpEloc(iChan).labels,fidnames))
                sfpEloc(iChan).labels=[' ' sfpEloc(iChan).labels];
            end
        end
        eColor=cell(length(sfpEloc),1);
        [eColor{1:spfNum}]=deal('k');
        [eColor{spfNum+1:spfNum+EEGlocNum}]=deal('r');
        [eColor{end-FIDlocNum+1:end}]=deal('g');
        
        theMesh=which('mheadnew.mat');
        figure
        ep_headplot('setup', sfpEloc, 'temp-sfp.spl','meshfile',theMesh);
        ep_headplot(zeros(length(sfpEloc),1),'temp-sfp.spl','labels',2,'labelColors', eColor,'meshfile',which('mheadnew.mat'),'colormap',[.8 .55 .35]*1.1);
        delete('temp-sfp.spl')
        
    case 'changeSpec'
        EPoverview.theSpec=get(EPoverview.handles.specs.theSpec,'Value');
        ep_editData('start');
        
    case 'highlightSpec'
        %does not work in Matlab 2021a
        
        signList=get(EPoverview.handles.specs.highSign,'String');
        EPoverview.highSign=signList{get(EPoverview.handles.specs.highSign,'Value')};
        EPoverview.highValue=get(EPoverview.handles.specs.highValue,'String');
        
%         removeStyle(EPoverview.handles.specs.dataTable);
        if ~isempty(EPoverview.highValue) 
            s2 = uistyle;
            s2.FontColor = 'red';
            s2.FontWeight = 'bold';
            
            tableData=get(EPoverview.handles.specs.dataTable,'Data');
            
            for iRow=1:size(tableData,1)
                for iCol=3:size(tableData,2)
                    theNum=str2double(EPoverview.highValue);
                    highFlag=0;
                    if ~isnan(theNum)
                        theSpec=tableData{iRow,iCol};
                        if ~isnumeric(theSpec)
                            theSpec=str2double(tableData{iRow,iCol});
                        end
                        switch EPoverview.highSign
                            case '='
                                if theNum == theSpec
                                    highFlag=1;
                                end
                            case '~='
                                if theNum ~= theSpec
                                    highFlag=1;
                                end
                            case '<'
                                if theNum < theSpec
                                    highFlag=1;
                                end
                            case '>'
                                if theNum > theSpec
                                    highFlag=1;
                                end
                            case '<='
                                if theNum <= theSpec
                                    highFlag=1;
                                end
                            case '>='
                                if theNum >= theSpec
                                    highFlag=1;
                                end
                            otherwise
                                disp('Oops - programming error.')
                                return
                        end
                    else
                        theNum=EPoverview.highValue;
                        theSpec=tableData{iRow,iCol};
                        switch EPoverview.highSign
                            case '='
                                if strcmp(theNum,theSpec)
                                    highFlag=1;
                                end
                            case '~='
                                if ~strcmp(theNum,theSpec)
                                    highFlag=1;
                                end
                            case '<'
                                if theNum < theSpec
                                    highFlag=1;
                                end
                            case '>'
                                if theNum > theSpec
                                    highFlag=1;
                                end
                            case '<='
                                if theNum <= theSpec
                                    highFlag=1;
                                end
                            case '>='
                                if theNum >= theSpec
                                    highFlag=1;
                                end
                            otherwise
                                disp('Oops - programming error.')
                                return
                        end
                    end
                    if highFlag
                        addStyle(EPoverview.handles.specs.dataTable,s2,'cell',[iRow,iCol])
                    end
                end
            end
        end
        
    case 'deleteHistory'
        if sum(EPoverview.workMeta.history.select) ==0
            msg{1}='No Changes specified for deletion.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        EPoverview.lastData=EPoverview.workData;

        EPoverview.lastMeta=EPoverview.workMeta; 
        
        deleteChanges=find(EPoverview.workMeta.history.select);

        EPoverview.workData.history(deleteChanges,:)=[];
        
        EPoverview.workMeta.history.select=repmat(false,size(EPoverview.workData.history,1),1);
        
        [err]=ep_checkEPfile(EPoverview.workData);
        
        ep_editData('start');
        
    case 'addHistory'
        
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        EPoverview.workData.history{end+1,1}=cell(1,4);
        EPoverview.workData.history{end,1}=struct('time','','EPversion','','user','','lab','','institution','','project','','experiment','');
        EPoverview.workData.history{end,3}=struct('name','','position','','children',[]);
        EPoverview.workMeta.history.select=[EPoverview.workMeta.history.select; false];
        
        ep_editData('start');

    case 'startMemory'
          
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.data: %s', theByteSize(EPoverview.workData.data)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-180 150 20],'Tag','data');
          
        EPoverview.handles.memory.noiseX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-200 20 20],'Tag','noiseX','Callback', {@nullMemory,'noise'});
         if isempty(EPoverview.workData.noise)
            set(EPoverview.handles.memory.noiseX,'enable','off');
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.noise: %s', theByteSize(EPoverview.workData.noise)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-200 150 20],'Tag','noise');
        
        EPoverview.handles.memory.covAVEX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-220 20 20],'Tag','covAVEX','Callback', {@nullMemory,'covAVE'});
         if isempty(EPoverview.workData.covAVE)
            set(EPoverview.handles.memory.covAVEX,'enable','off');
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.covAVE: %s', theByteSize(EPoverview.workData.covAVE)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-220 150 20],'Tag','covAVE');
       
        EPoverview.handles.memory.trialSpecsX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-240 20 20],'Tag','trialSpecsX','Callback', {@nullMemory,'trialSpecs'});
         if isempty(EPoverview.workData.trialSpecs)
            set(EPoverview.handles.memory.trialSpecsX,'enable','off');
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.trialSpecs: %s', theByteSize(EPoverview.workData.trialSpecs)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-240 150 20],'Tag','trialSpecs');

        EPoverview.handles.memory.eventsX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-260 20 20],'Tag','eventsX','Callback', {@nullMemory,'events'});
        if all(cellfun(@isempty,EPoverview.workData.events),'all')
            set(EPoverview.handles.memory.eventsX,'enable','off');
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.events: %s', theByteSize(EPoverview.workData.events)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-260 150 20],'Tag','events');

%          EPoverview.handles.memory.historyX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-280 20 20],'Tag','historyX','Callback', {@nullMemory,'history'});
%         if isempty(EPoverview.workData.history)
%             set(EPoverview.handles.memory.historyX,'enable','off');
%         end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.history: %s', theByteSize(EPoverview.workData.history)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-280 150 20],'Tag','history');

       EPoverview.handles.memory.stimsX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-300 20 20],'Tag','stimsX','Callback', {@nullMemory,'stims'});
        if isempty(EPoverview.workData.stims)
            set(EPoverview.handles.memory.stimsX,'enable','off');
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.stims: %s', theByteSize(EPoverview.workData.stims)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-300 150 20],'Tag','stims');

        EPoverview.handles.memory.videoX=uicontrol('Style','pushbutton','String','X','Position',[180 windowHeight-320 20 20],'Tag','videoX','Callback', {@nullMemory,'video'});
        if isempty(EPoverview.workData.video)
            set(EPoverview.handles.memory.videoX,'enable','off');
        end
        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('.video: %s', theByteSize(EPoverview.workData.video)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-320 150 20],'Tag','video');

        uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('Total: %s', theByteSize(EPoverview.workData)),'FontSize',EPmain.fontsize,...
            'Position',[200 windowHeight-340 150 20],'Tag','total');
%         EPoverview.handles.overview.dataName = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.dataName),'FontSize',EPmain.fontsize,...
%             'Tag','dataName',...
%             'Position',[100 windowHeight-140 150 20],'Callback', ['ep_editData(''renameDataName'');']);
% 
%         uicontrol('Style','text','HorizontalAlignment','left','String', sprintf('%s', 'Experiment Name'),'FontSize',EPmain.fontsize,...
%             'Position',[100 windowHeight-170 150 20]);
%         EPoverview.handles.overview.ename = uicontrol('Style','edit','HorizontalAlignment','left','String', sprintf('%s', EPoverview.workData.ename),'FontSize',EPmain.fontsize,...
%             'Tag','ename',...
%             'Position',[100 windowHeight-190 150 20],'Callback', ['ep_editData(''renameExp'');']);

        
        
    case 'done'
        EPmain.edit.handleList=ep_disableGUI(EPoverview.handles.hEditWindow);
        drawnow;
        
        try
            EPver=ver('EP_Toolkit');
        catch
            EPver='unavailable'; %workaround for bug in earlier version of Matlab
        end
        EPoverview.workData.EPver=EPver;
        EPoverview.workData.ver=ver;
        EPoverview.workData.date=date;
        
        EPdata=EPoverview.workData;

        if ~isempty(EPoverview.workMeta.GAVsubs)
            %if there are virtual grand averages, convert them back to virtual form
            [EPdata]=ep_selectData(EPdata,{[],[],[1:numRcells],[1:numRsubs],[],[]});
            if ~isscalar(EPoverview.workMeta.GAVsubs)
                %make sure none of the GAVsubs entries reference other virtual entries.
                EPdata.GAVsubs=EPoverview.workMeta.GAVsubs;
                %virtual cells
                doneFlag=0;
                while ~doneFlag
                    doneFlag=1;
                    for iCell=2:size(EPdata.GAVsubs,2)
                        deleteList=[];
                        inSumCellList=EPdata.GAVsubs{1,iCell,1};
                        outSumCellList=inSumCellList;
                        for iRow=1:size(inSumCellList,1)
                            if inSumCellList(iRow,1)>numRcells
                                doneFlag=0;
                                deleteList=[deleteList;iRow];
                                addList=EPdata.GAVsubs{1,inSumCellList(iRow,1)-numRcells+1,1};
                                addList(:,2)=addList(:,2)*inSumCellList(iRow,2);
                                outSumCellList=[outSumCellList;addList];
                            end
                        end
                        if ~isempty(deleteList)
                            outSumCellList(deleteList,:)=[];
                            numList=unique(outSumCellList(:,1));
                            newList=zeros(length(numList),2);
                            for iNum=1:length(numList)
                                newList(iNum,1)=numList(iNum);
                                newList(iNum,2)=sum(outSumCellList(outSumCellList(:,1)==numList(iNum),2));
                            end
                            newList(newList(:,2)==0,:)=[];
                            EPdata.GAVsubs{1,iCell,1}=newList;
                        end
                    end
                end
                %virtual subjects
                doneFlag=0;
                while ~doneFlag
                    doneFlag=1;
                    for iSub=2:size(EPdata.GAVsubs,1)
                        for iCell=1:size(EPdata.GAVsubs,2)
                            for iFac=1:size(EPdata.GAVsubs,3)
                                deleteList=[];
                                inSumSubList=EPdata.GAVsubs{iSub,iCell,iFac};
                                outSumSubList=inSumSubList;
                                for iRow=1:size(inSumSubList,1)
                                    if inSumSubList(iRow,1)>numRsubs
                                        doneFlag=0;
                                        deleteList=[deleteList;iRow];
                                        addList=EPdata.GAVsubs{iSub,inSumSubList(iRow,1)-numRsubs+1,iFac};
                                        addList(:,2)=addList(:,2)*inSumSubList(iRow,2);
                                        outSumSubList=[outSumSubList;];
                                    end
                                end
                                if ~isempty(deleteList)
                                    outSumSubList(deleteList,:)=[];
                                    numList=unique(outSumSubList(:,1));
                                    newList=zeros(length(numList),2);
                                    for iNum=1:length(numList)
                                        newList(iNum,1)=numList(iNum);
                                        newList(iNum,2)=sum(outSumSubList(outSumSubList(:,1)==numList(iNum),2));
                                    end
                                    newList(newList(:,2)==0,:)=[];
                                    EPdata.GAVsubs{iSub,iCell,iFac}=newList;
                                end
                            end
                        end
                    end
                end
            else
                EPdata.GAVsubs=[];
            end
            EPdata.subNames=EPoverview.workData.subNames;
            EPdata.subTypes=EPoverview.workData.subTypes;
            EPdata.cellNames=EPoverview.workData.cellNames;
            EPdata.cellTypes=EPoverview.workData.cellTypes;
        end

        [err]=ep_checkEPfile(EPdata);
        if err
            ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
            return
        end
        
        if ~exist([EPdataset.EPwork filesep 'EPwork'],'dir')
            msg{1}='The work directory cannot be found.';
            [msg]=ep_errorMsg(msg);
            ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
            return
        end
        
        if ~strcmp(EPoverview.workData.dataName,EPdataset.dataset(EPoverview.dataset).dataName)
            button = questdlg('Did you want this to be a new separate dataset, leaving the original unchanged?','Duplicate dataset?','New','Rename','New');
            if strcmp(button,'New')
                sameName=1;
                suffix=0;
                nameSuffix=EPoverview.workData.dataName;
                while sameName
                    sameName=0;
                    for iDataset=1:length(EPdataset.dataset)
                        if strcmp(EPdataset.dataset(iDataset).dataName,nameSuffix)
                            sameName=1;
                        end
                    end
                    if sameName
                        suffix=suffix+1;
                        nameSuffix=[EPoverview.workData.dataName '-' num2str(suffix)];
                    end
                end
                EPoverview.workData.dataName=nameSuffix;
                try
                    ep_saveEPdataset(EPdata,length(EPdataset.dataset)+1,'no');
                catch ME
                    msg{1}=['Edited dataset failed to save due to error:' ME.identifier];
                    msg{2}=ME.message;
                    msg{3}='Please report error to developer.';
                    [msg]=ep_errorMsg(msg);
                end
            else
                theEEG=EPdataset.dataset(EPoverview.dataset).inMemory;
                if ~theEEG
                    EPeeg{theEEG}=[];
                    EPdataset.dataset(EPdataset.dataset.inMemory>theEEG).inMemory=EPdataset.dataset(EPdataset.dataset.inMemory>theEEG).inMemory-1;
                end
                try
                    ep_saveEPdataset(EPdata,EPoverview.dataset,'no');
                catch ME
                    msg{1}=['Edited dataset failed to save due to error:' ME.identifier];
                    msg{2}=ME.message;
                    msg{3}='Please report error to developer.';
                    [msg]=ep_errorMsg(msg);
                end
            end
        else
            theEEG=EPdataset.dataset(EPoverview.dataset).inMemory;
            if ~theEEG
                EPeeg{theEEG}=[];
                EPdataset.dataset(EPdataset.dataset.inMemory>theEEG).inMemory=EPdataset.dataset(EPdataset.dataset.inMemory>theEEG).inMemory-1;
            end
            try
                ep_saveEPdataset(EPdata,EPoverview.dataset,'no');
            catch ME
                msg{1}=['Edited dataset failed to save due to error:' ME.identifier];
                msg{2}=ME.message;
                msg{3}='Please report error to developer.';
                [msg]=ep_errorMsg(msg);
            end
        end

        if ~isempty(EPoverview.workData.facNames)
            disp('Note: edits made to a PCA file will not be reflected in the follow-up PCA in a two-step PCA procedure as the PCA information is kept separate from the edited information.');
        end

        ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
        
        EPoverview.done=1;
        close('EditData');
        
    case 'undo'
        
        if isempty(EPoverview.lastData)
            msg{1}='Nothing to undo.';
            [msg]=ep_errorMsg(msg);
            return
        end
        
        tempData=EPoverview.workData;
        tempMeta=EPoverview.workMeta;
        EPoverview.workData=EPoverview.lastData;
        EPoverview.workMeta=EPoverview.lastMeta;
        EPoverview.lastData=tempData;
        EPoverview.lastMeta=tempMeta;
        tempSpec=EPoverview.theSpec;
        EPoverview.theSpec=EPoverview.theLastSpec;
        EPoverview.theLastSpec=tempSpec;
        ep_editData('start');

    case 'cancel'
        EPoverview.done=1;
        if ~isempty(findobj('name','EditData'))
            close('EditData');
        else
            closeEdit
        end

    case 'new'

        EPmain.edit.handleList=ep_disableGUI(EPoverview.handles.hEditWindow);

        try
            EPver=ver('EP_Toolkit');
        catch
            EPver='unavailable'; %workaround for bug in earlier version of Matlab
        end
        EPoverview.workData.EPver=EPver;
        EPoverview.workData.ver=ver;
        EPoverview.workData.date=date;
        
        EPdata=EPoverview.workData;

        if ~isempty(EPoverview.workMeta.GAVsubs)
            %if there are virtual grand averages, convert them back to virtual form
            [EPdata]=ep_selectData(EPdata,{[],[],[1:numRcells],[1:numRsubs],[],[]});
            if ~isscalar(EPoverview.workMeta.GAVsubs)
                %make sure none of the GAVsubs entries reference other virtual entries.
                EPdata.GAVsubs=EPoverview.workMeta.GAVsubs;
                %virtual cells
                doneFlag=0;
                while ~doneFlag
                    doneFlag=1;
                    for iCell=2:size(EPdata.GAVsubs,2)
                        deleteList=[];
                        inSumCellList=EPdata.GAVsubs{1,iCell,1};
                        outSumCellList=inSumCellList;
                        for iRow=1:size(inSumCellList,1)
                            if inSumCellList(iRow,1)>numRcells
                                doneFlag=0;
                                deleteList=[deleteList;iRow];
                                addList=EPdata.GAVsubs{1,inSumCellList(iRow,1)-numRcells+1,1};
                                addList(:,2)=addList(:,2)*inSumCellList(iRow,2);
                                outSumCellList=[outSumCellList;addList];
                            end
                        end
                        if ~isempty(deleteList)
                            outSumCellList(deleteList,:)=[];
                            numList=unique(outSumCellList(:,1));
                            newList=zeros(length(numList),2);
                            for iNum=1:length(numList)
                                newList(iNum,1)=numList(iNum);
                                newList(iNum,2)=sum(outSumCellList(outSumCellList(:,1)==numList(iNum),2));
                            end
                            newList(newList(:,2)==0,:)=[];
                            EPdata.GAVsubs{1,iCell,1}=newList;
                        end
                    end
                end
                %virtual subjects
                doneFlag=0;
                while ~doneFlag
                    doneFlag=1;
                    for iSub=2:size(EPdata.GAVsubs,1)
                        for iCell=1:size(EPdata.GAVsubs,2)
                            for iFac=1:size(EPdata.GAVsubs,3)
                                deleteList=[];
                                inSumSubList=EPdata.GAVsubs{iSub,iCell,iFac};
                                outSumSubList=inSumSubList;
                                for iRow=1:size(inSumSubList,1)
                                    if inSumSubList(iRow,1)>numRsubs
                                        doneFlag=0;
                                        deleteList=[deleteList;iRow];
                                        addList=EPdata.GAVsubs{iSub,inSumSubList(iRow,1)-numRsubs+1,iFac};
                                        addList(:,2)=addList(:,2)*inSumSubList(iRow,2);
                                        outSumSubList=[outSumSubList;];
                                    end
                                end
                                if ~isempty(deleteList)
                                    outSumSubList(deleteList,:)=[];
                                    numList=unique(outSumSubList(:,1));
                                    newList=zeros(length(numList),2);
                                    for iNum=1:length(numList)
                                        newList(iNum,1)=numList(iNum);
                                        newList(iNum,2)=sum(outSumSubList(outSumSubList(:,1)==numList(iNum),2));
                                    end
                                    newList(newList(:,2)==0,:)=[];
                                    EPdata.GAVsubs{iSub,iCell,iFac}=newList;
                                end
                            end
                        end
                    end
                end
            else
                EPdata.GAVsubs=[];
            end
            EPdata.subNames=EPoverview.workData.subNames;
            EPdata.subTypes=EPoverview.workData.subTypes;
            EPdata.cellNames=EPoverview.workData.cellNames;
            EPdata.cellTypes=EPoverview.workData.cellTypes;
        end
        [err]=ep_checkEPfile(EPdata);
        if err
            ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
            return
        end
        
        if ~exist([EPdataset.EPwork filesep 'EPwork'],'dir')
            msg{1}='The work directory cannot be found.';
            [msg]=ep_errorMsg(msg);
            ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
            return
        end
        
        set(EPoverview.handles.pane.new,'enable','off');
        drawnow;
        
        sameName=1;
        suffix=0;
        nameSuffix=EPoverview.workData.dataName;
        while sameName
            sameName=0;
            for i=1:length(EPdataset.dataset)
                if strcmp(EPdataset.dataset(i).dataName,nameSuffix)
                    sameName=1;
                end
            end
            if sameName
                suffix=suffix+1;
                nameSuffix=[EPoverview.workData.dataName '-' num2str(suffix)];
            end
        end
        EPoverview.workData.dataName=nameSuffix;
        
        ep_saveEPdataset(EPdata,length(EPdataset.dataset)+1,'no');
        
        if ~isempty(EPoverview.workData.facNames)
            disp('Note: edits made to a PCA file will not be reflected in the follow-up PCA in a two-step PCA procedure as the PCA information is kept separate from the edited information.');
        end
        
        ep_disableGUI(EPoverview.handles.hEditWindow,EPmain.edit.handleList);
        EPoverview.done=1;
        close('EditData');

    case 'swapChans'

        if sum(EPoverview.workMeta.channels.select) ~=2
            disp('To swap channels, exactly two must be selected.');
            ep_editData('start');
            return
        end

        chans=find(EPoverview.workMeta.channels.select);
        chan1=chans(1);
        chan2=chans(2);

        tempData=EPoverview.workData;

        tempChan=tempData.data(chan1,:,:,:,:,:,:,:);
        tempData.data(chan1,:,:,:,:,:,:,:)=tempData.data(chan2,:,:,:,:,:,:,:);
        tempData.data(chan2,:,:,:,:,:,:,:)=tempChan;

        if ~isempty(tempData.facVecS)
            tempChan=tempData.facVecS(chan1,:);
            tempData.facVecS(chan1,:)=tempData.facVecS(chan2,:);
            tempData.facVecS(chan2,:)=tempChan;
        end

        if ~isempty(tempData.noise)
            tempChan=tempData.noise(chan1,:,:,:,:);
            tempData.noise(chan1,:,:,:,:)=tempData.noise(chan2,:,:,:,:);
            tempData.noise(chan2,:,:,:,:)=tempChan;
        end

        if ~isempty(tempData.cov)
            tempChan=tempData.cov.covMatrix(:,chan1,chan1);
            tempData.cov.covMatrix(:,chan1,chan1)=tempData.cov.covMatrix(:,chan2,chan2);
            tempData.cov.covMatrix(:,chan2,chan2)=tempChan;
        end

        if ~isempty(tempData.covAVE)
            if size(tempData.covAVE,7)==1
                tempChan=tempData.covAVE(chan1,:,:,:,:,:,1);
                tempData.covAVE(chan1,:,:,:,:,:,1)=tempData.covAVE(chan2,:,:,:,:,:,1);
                tempData.covAVE(chan2,:,:,:,:,:,1)=tempChan;
            else
                tempChan=tempData.covAVE(chan1,:,:,:,:,:,:);
                tempData.covAVE(chan1,:,:,:,:,:,:)=tempData.covAVE(chan2,:,:,:,:,:,:);
                tempData.covAVE(chan2,:,:,:,:,:,:)=tempChan;
                tempChan=tempData.covAVE(:,:,:,:,:,:,chan1);
                tempData.covAVE(:,:,:,:,:,:,chan1)=tempData.covAVE(:,:,:,:,:,:,chan2);
                tempData.covAVE(:,:,:,:,:,:,chan2)=tempChan;
            end
        end

        if ~isempty(tempData.facData)
            tempChan=tempData.facData(chan1,:,:,:,:,:,:);
            tempData.facData(chan1,:,:,:,:,:,:)=tempData.facData(chan2,:,:,:,:,:,:);
            tempData.facData(chan2,:,:,:,:,:,:)=tempChan;
        end

        if ~isempty(tempData.analysis.badChans)
            tempChan=tempData.analysis.badChans(:,:,chan1);
            tempData.analysis.badChans(:,:,chan1)=tempData.analysis.badChans(:,:,chan2);
            tempData.analysis.badChans(:,:,chan2)=tempChan;
        end

        if ~isempty(tempData.impedances.channels)
            tempChan=tempData.impedances.channels(chan1,:);
            tempData.impedances.channels(chan1,:)=tempData.impedances.channels(chan2,:);
            tempData.impedances.channels(chan2,:)=tempChan;
        end

        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            EPoverview.workMeta.channels.weights=zeros(length(EPoverview.workMeta.channels.weights),1);
            EPoverview.workMeta.channels.select=false(length(EPoverview.workMeta.channels.select),1);

            theDescription=['Swapped two channels using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

        ep_editData('start');

    otherwise
        disp(['Don''t recognize the task ' varargin{1}]);
        
end

if ~strcmp(varargin{1},{'cancel','done'})
    refresh;
    drawnow;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editCells(src,eventdata)
%change the contents of the Cells table

global EPoverview EPmain

tableData=get(EPoverview.handles.cells.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);
numCells=length(EPoverview.workData.cellNames);
numVcells=max(0,size(EPoverview.workMeta.GAVsubs,2)-1);
numRcells=numCells-numVcells;

switch theCol
    case 1 %reorder cells (not for single-trial data)
        [~,sortOrder] = sortrows(tableData,1);
        if ~isempty(EPoverview.workMeta.GAVsubs)
            if any(sortOrder(1:numRcells)>numRcells) || any(sortOrder(numRcells+1:end)<=numRcells)
                %if any of the virtual cells are moved from the end or vice versa
                disp('Error: Virtual cells must be at the end of the cell slots.')
                ep_editData('start');
                return
            end
        end
        [tempData]=ep_reorderData(EPoverview.workData,'cells',sortOrder);
        if ~isempty(tempData)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            if ~isempty(EPoverview.workMeta.GAVsubs) && ~isequal(sortOrder(numRcells+1:numCells),[numRcells+1:numCells]')
                EPoverview.workMeta.GAVsubs=EPoverview.workMeta.GAVsubs(:,sortOrder(numRcells+1:numCells)-numRcells,:);
                if any(sortOrder<=numRcells)
                    %convert cell indices to reflect the new order
                    for iCell=2:size(EPoverview.workMeta.GAVsubs,2)
                        for iRow=1:size(EPoverview.workMeta.GAVsubs{1,iCell,1},1)
                            newCell=sortOrder(EPoverview.workMeta.GAVsubs{1,iCell,1}(iRow,1));
                            EPoverview.workMeta.GAVsubs{1,iCell,1}(iRow,1)=newCell;
                        end
                    end
                end
            end
            EPoverview.workMeta.cells.select=EPoverview.workMeta.cells.select(sortOrder);
            EPoverview.workMeta.cells.weights=EPoverview.workMeta.cells.weights(sortOrder);
            newEventsSelect=zeros(size(EPoverview.workMeta.events.select));
            newEventsIndex=zeros(size(EPoverview.workMeta.events.select));
            counter=0;
            for iEvent=1:length(sortOrder)
                trialIndex=find(EPoverview.workMeta.events.eventIndex(:,2)==iEvent);
                numEvents=length(trialIndex);
                newEventsSelect(counter+1:counter+numEvents)=EPoverview.workMeta.events.select(trialIndex);
                newEventsIndex(counter+1:counter+numEvents,:)=EPoverview.workMeta.events.eventIndex(trialIndex,:);
            end
            EPoverview.workMeta.events.select=newEventsSelect;
            EPoverview.workMeta.events.eventIndex=newEventsIndex;

            theDescription=['Reordered cells using Cells Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');
        
    case 2 %select checked
        EPoverview.workMeta.cells.select(theRow)=tableData{theRow,2};
        newTrials=find(strcmp(tableData{theRow,4},EPoverview.workData.cellNames));
        if ~isempty(EPoverview.workData.trialNames)
            EPoverview.workMeta.trials.select(newTrials)=EPoverview.workMeta.cells.select(theRow);
        end
        if ~isempty(EPoverview.workMeta.events.select)
            EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,2),newTrials))=EPoverview.workMeta.cells.select(theRow);
        end
        EPoverview.workMeta.cells.weights(theRow)=EPoverview.workMeta.cells.select(theRow);
        if theRow > numRcells
            if eventdata.NewData
                %if virtual cell selected, also add weights of constituent cells.
                EPoverview.workMeta.cells.weights(EPoverview.workMeta.GAVsubs{1,theRow-numRcells+1,1}(:,1))=EPoverview.workMeta.GAVsubs{1,theRow-numRcells+1,1}(:,2);
            else
                EPoverview.workMeta.cells.weights(EPoverview.workMeta.GAVsubs{1,theRow-numRcells+1,1}(:,1))=0;
            end
        end
        ep_editData('start');
        
    case 3 %weight set
        if isnan(tableData{theRow,theCol})
            tableData{theRow,theCol}=0;
            set(EPoverview.handles.cells.dataTable,'Data',tableData);
        end
        EPoverview.workMeta.cells.weights(theRow)=cell2mat(tableData(theRow,3));
        EPoverview.workMeta.cells.select(theRow)=eventdata.NewData;
        if ~isempty(EPoverview.workMeta.events.select)
            EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,2),theRow))=eventdata.NewData;
        end
        if theRow > numRcells
            if eventdata.NewData
                %if virtual cell selected, also add weights of constituent cells.
                EPoverview.workMeta.cells.weights(EPoverview.workMeta.GAVsubs{1,theRow-numRcells+1,1}(:,1))=EPoverview.workMeta.GAVsubs{1,theRow-numRcells+1,1}(:,2);
            else
                EPoverview.workMeta.cells.weights(EPoverview.workMeta.GAVsubs{1,theRow-numRcells+1,1}(:,1))=0;
            end
        end
        ep_editData('start');
        
    case 4 %cell name changed
        newCellName=eventdata.NewData;
        oldCellName=eventdata.PreviousData;
        if isempty(newCellName)
            disp('Cell names cannot be empty.');
            ep_editData('start');
            return
        end
        if ((length(unique(EPoverview.workData.cellNames)) ~= length(EPoverview.workData.cellNames))) && strcmp(EPoverview.workData.dataType,'average')
            disp('Cell names cannot be duplicated except in single trial data.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        if strcmp(tempData.dataType,'single_trial')
            cellIndex=find(strcmp(oldCellName,tempData.cellNames));
            tempData.trialNames(cellIndex)=tempData.trialNames(cellIndex)+length(find(strcmp(newCellName,tempData.cellNames)));
            [tempData.cellNames{cellIndex}]=deal(newCellName);
        else
            tempData.cellNames{theRow}=newCellName;
        end
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed cell using Cells Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 5 %cell type changed
        newCellType=eventdata.NewData;
        %oldCellType=eventdata.PreviousData;
        if isempty(newCellType)
            disp('Cell types cannot be empty.');
            ep_editData('start');
            return
        end

        if theRow > numRcells
            disp('Error: May not change cell type for virtual cells.');
            ep_editData('start');
            return
        end

        tempData=EPoverview.workData;
        tempData.cellTypes{theRow}=newCellType;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed cell type using Cells Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editTrials(src,eventdata)
%change the contents of the Trials table

global EPoverview EPmain

tableData=get(EPoverview.handles.trials.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);
numCells=unique(length(EPoverview.workData.cellNames));
numVcells=max(0,size(EPoverview.workMeta.GAVsubs,2)-1);
numRcells=numCells-numVcells;
numWaves=length(EPoverview.workData.timeNames);
numRwaves=numWaves-numVcells;

switch theCol
    case 1 %reorder trials
        sortOrder = [tableData{:,1}];
        [~,sortOrder] = sortrows(sortOrder(:),1);
        if ~isempty(EPoverview.workMeta.GAVsubs)
            if any(sortOrder(1:numRwaves)>numRwaves) || any(sortOrder(numRwaves+1:end)<=numRwaves)
                %if any of the virtual cells are moved from the end or vice versa
                disp('Error: Virtual cells must be at the end of the trial slots.')
                ep_editData('start');
                return
            end
        end
        [tempData]=ep_reorderData(EPoverview.workData,'cells',sortOrder);
        if ~isempty(tempData)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            if ~isempty(EPoverview.workMeta.GAVsubs) && ~isequal(sortOrder(numRwaves+1:numWaves),[numRwaves+1:numWaves]')
                EPoverview.workMeta.GAVsubs=EPoverview.workMeta.GAVsubs(:,sortOrder(numRwaves+1:numWaves)-numRwaves,:);
            end
            EPoverview.workMeta.trials.select=EPoverview.workMeta.trials.select(sortOrder);
            newEventsSelect=zeros(size(EPoverview.workMeta.events.select));
            newEventsIndex=zeros(size(EPoverview.workMeta.events.eventIndex));
            counter=0;
            for iTrial=1:length(sortOrder)
                trialIndex=find(EPoverview.workMeta.events.eventIndex(:,2)==iTrial);
                numEvents=length(trialIndex);
                newEventsSelect(counter+1:counter+numEvents)=EPoverview.workMeta.events.select(trialIndex);
                newEventsIndex(counter+1:counter+numEvents,:)=EPoverview.workMeta.events.eventIndex(trialIndex,:);
            end
            EPoverview.workMeta.events.select=newEventsSelect;
            EPoverview.workMeta.events.eventIndex=newEventsIndex;
            
            theDescription=['Reordered  trials using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');
        
    case 2 %select checked
        newSelect=cell2mat(tableData(:,2));
        EPoverview.workMeta.events.select(EPoverview.workMeta.events.eventIndex(:,2)==theRow)=newSelect(theRow);
        [uniqueCells waveOrder m]=unique(EPoverview.workData.cellNames,'stable');
        EPoverview.workMeta.cells.select(find(strcmp(tableData{theRow,3},uniqueCells)))=tableData{theRow,2};
        EPoverview.workMeta.subjects.select(find(strcmp('RAW',EPoverview.workData.subTypes)))=tableData{theRow,1};
        EPoverview.workMeta.trials.select=newSelect;
        if theRow > numRwaves
            if eventdata.NewData
                %if virtual cell selected, also add weights of constituent trials.
                EPoverview.workMeta.cells.weights(EPoverview.workMeta.GAVsubs{1,theRow-numRwaves+1,1}(:,1))=EPoverview.workMeta.GAVsubs{1,theRow-numRwaves+1,1}(:,2);
            else
                EPoverview.workMeta.cells.weights(EPoverview.workMeta.GAVsubs{1,theRow-numRwaves+1,1}(:,1))=0;
            end
        end
        ep_editData('start');
        
    case 3 %trial name changed
        newCellName=eventdata.NewData;
        if isempty(newCellName)
            disp('Cell names cannot be empty.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        if ~strcmp(newCellName,tempData.cellNames)
            EPoverview.workMeta.cells.select(end+1)=0;
        end
        oldCellName=tempData.cellNames{theRow};
        if ~isempty(EPoverview.workMeta.GAVsubs)
            %update trial membership of virtual averaged cells
            for iGAVcell=2:size(EPoverview.workMeta.GAVsubs,2)
                theGAVrow=find(EPoverview.workMeta.GAVsubs{1,iGAVcell,1}(:,1)==theRow);
                if ~isempty(theGAVrow)
                    EPoverview.workMeta.GAVsubs{1,iGAVcell,1}(theGAVrow,:)=[];
                elseif all(ismember(EPoverview.workMeta.GAVsubs{1,iGAVcell,1}(:,1),find(strcmp(newCellName,tempData.cellNames{1:numRwaves}))))
                    %if all other instances of the new cell name are in this cell, add this trial to it as well.
                    EPoverview.workMeta.GAVsubs{1,iGAVcell,1}(end+1,1)=theRow;
                    EPoverview.workMeta.GAVsubs{1,iGAVcell,1}(end,2)=1;
                end
            end
        end
        tempData.cellNames{theRow}=newCellName;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed cell using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    case 4 %trial name changed
        newTrialName=eventdata.NewData;
        if isempty(newTrialName)
            disp('Trial names cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newTrialName)
            newTrialName=str2double(newTrialName);
        end
        if isnan(newTrialName)
            disp('Trial names must be numbers.');
            ep_editData('start');
            return
        end

        tempData=EPoverview.workData;
        tempData.trialNames(theRow)=newTrialName;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed trial name using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    case 5 %recTime changed
        newRecTime=eventdata.NewData;
        if isempty(newRecTime)
            disp('Recording times cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newTrialName)
            newTrialName=str2double(newTrialName);
        end
        if isnan(newRecTime)
            disp('Recording times must be numbers.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.recTime(theRow)=newRecTime;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed recording time using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
    
    case 6 %blinkTrial changed
        newBlinkTrial=eventdata.NewData;
        if isempty(newBlinkTrial)
            disp('Blink Trial codes cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newBlinkTrial)
            newBlinkTrial=str2double(newBlinkTrial);
        end
        if isnan(newBlinkTrial)
            disp('Blink Trial codes must be numbers.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.analysis.blinkTrial(1,theRow)=newBlinkTrial;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed Blink Trial code using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    case 7 %saccadeTrial changed
        newSaccadeTrial=eventdata.NewData;
        if isempty(newSaccadeTrial)
            disp('Saccade Trial codes cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newSaccadeTrial)
            newSaccadeTrial=str2double(newSaccadeTrial);
        end
        if isnan(newSaccadeTrial)
            disp('Saccade Trial codes must be numbers.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.analysis.saccadeTrial(1,theRow)=newSaccadeTrial;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed Saccade Trial code using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    case 8 %saccadeOnset changed
        newSaccadeOnsetTrial=eventdata.NewData;
        if isempty(newSaccadeOnsetTrial)
            disp('Saccade Onset Trial codes cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newSaccadeOnsetTrial)
            newSaccadeOnsetTrial=str2double(newSaccadeOnsetTrial);
        end
        if isnan(newSaccadeOnsetTrial)
            disp('Saccade Onset codes must be numbers.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.analysis.saccadeOnset(1,theRow)=newSaccadeOnsetTrial;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed Saccade Onset code using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    case 9 %moveTrial changed
        newMoveTrial=eventdata.NewData;
        if isempty(newMoveTrial)
            disp('Move Trial codes cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newMoveTrial)
            newMoveTrial=str2double(newMoveTrial);
        end
        if isnan(newMoveTrial)
            disp('Move Trial codes must be numbers.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.analysis.moveTrial(1,theRow)=newMoveTrial;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed Move Trial code using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    case 10 %badTrials changed
        newBadTrial=eventdata.NewData;
        if isempty(newBadTrial)
            disp('Bad Trial codes cannot be empty.');
            ep_editData('start');
            return
        end
        if ~isnumeric(newBadTrial)
            newBadTrial=str2double(newBadTrial);
        end
        if isnan(newBadTrial)
            disp('Bad Trial codes must be numbers.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.analysis.badTrials(1,theRow)=newBadTrial;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed Bad Trial code using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

    otherwise
        tempData=EPoverview.workData;
        tempData.trialSpecs(theRow,theCol-10,find(strcmp('RAW',tempData.subTypes)))=tableData(theRow,theCol);
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed trial specs using Trials Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editChannels(src,eventdata)
%change the contents of the Channels table

global EPoverview EPmain EPtictoc

numChans=length(EPoverview.workData.chanNames);

tableData=get(EPoverview.handles.channels.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

tempData=EPoverview.workData;

if ismember(theCol,[6:8])
    EPoverview.lastData=EPoverview.workData;
    EPoverview.lastMeta=EPoverview.workMeta;
    if isempty(tempData.eloc)
        tempData.eloc=ep_elocFormat('initialize');
        for iChan=1:numChans
            tempData.eloc(iChan).labels=tempData.chanNames{iChan};
            tempData.eloc(iChan).type=tempData.chanTypes{iChan};
        end
    end
    
    newLoc=eventdata.NewData;
    if ~isnumeric(newLoc)
        newLoc=str2double(eventdata.NewData);
    end
    if isnan(newLoc)
        newLoc=[];
    end
    if isempty(newLoc)
        %zero out the entire eloc entry if X,Y. or Z were deleted
        if theRow <= numChans
            tempData.eloc(theRow).theta=[];
            tempData.eloc(theRow).radius=[];
            tempData.eloc(theRow).X=[];
            tempData.eloc(theRow).Y=[];
            tempData.eloc(theRow).Z=[];
            tempData.eloc(theRow).sph_theta=[];
            tempData.eloc(theRow).sph_phi=[];
            tempData.eloc(theRow).sph_radius=[];
            tempData.eloc(theRow).cX=[];
            tempData.eloc(theRow).cY=[];
            tempData.eloc(theRow).cZ=[];
        else
            tempData.implicit(theRow-numChans).theta=[];
            tempData.implicit(theRow-numChans).radius=[];
            tempData.implicit(theRow-numChans).X=[];
            tempData.implicit(theRow-numChans).Y=[];
            tempData.implicit(theRow-numChans).Z=[];
            tempData.implicit(theRow-numChans).sph_theta=[];
            tempData.implicit(theRow-numChans).sph_phi=[];
            tempData.implicit(theRow-numChans).sph_radius=[];
            tempData.implicit(theRow-numChans).cX=[];
            tempData.implicit(theRow-numChans).cY=[];
            tempData.implicit(theRow-numChans).cZ=[];
        end
    end
end

switch theCol
    case 1 %reorder channels
        [tableData2,sortOrder] = sortrows(tableData,1);
        [tempData]=ep_reorderData(tempData,'channels',sortOrder);
        if ~isempty(tempData)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            EPoverview.workMeta.channels.select(1:numChans)=EPoverview.workMeta.channels.select(sortOrder);
            EPoverview.workMeta.channels.weights(1:numChans)=EPoverview.workMeta.channels.weights(sortOrder);
            
            theDescription=['Reordered channels using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');
        
    case 2 %select checked
        EPoverview.workMeta.channels.select(theRow)=eventdata.NewData;
        EPoverview.workMeta.channels.weights(theRow)=eventdata.NewData;
        ep_editData('start');
        
    case 3 %weight set
        if isnan(tableData{theRow,theCol})
            tableData{theRow,theCol}=0;
            set(EPoverview.handles.channels.dataTable,'Data',tableData);
        end
        EPoverview.workMeta.channels.weights=cell2mat(tableData(:,3));
        ep_editData('start');
        
    case 4 %channel name changed
        newChanName=eventdata.NewData;
        %oldChanName=eventdata.PreviousData;
        if isempty(newChanName)
            disp('Channel names cannot be empty.');
            ep_editData('start');
            return
        end
        if (length(unique(tempData.chanNames)) ~= length(tempData.chanNames))
            disp('Channel names cannot be duplicated.');
            ep_editData('start');
            return
        end
        if theRow <= length(tempData.chanNames)
            tempData.chanNames{theRow}=newChanName;
        else
            tempData.implicit(theRow-length(tempData.chanNames)).labels=newChanName;
        end
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed channel using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 5 %chan type changed
        newChantype=eventdata.NewData;
        %oldChanType=eventdata.PreviousData;
        if isempty(newChantype)
            disp('Channel types cannot be empty.');
            ep_editData('start');
            return
        end
        [chanTypes, chanModes, chanRegs]=ep_chanTypes;
        tempData.chanTypes{theRow}=newChantype;
        if (theRow > numChans) && any(strcmp(newChantype,chanTypes))
            %changing fiducial to normal channel
            EPadd=[];
            EPadd.chanNames{1}=tempData.implicit(theRow-numChans).labels;
            EPadd.eloc=tempData.implicit(theRow-numChans);
            EPadd.eloc(1).type=newChantype;
            ep_tictoc('begin');
            tempData=ep_addData(EPoverview.workData,EPadd,'channels');
            tempData.implicit(theRow-numChans)=[];

        elseif (any(strcmp(newChantype,chanTypes)) && any(strcmp(chanModes{strcmp(newChantype,chanTypes)},{'EEG','MEG'}))) || (any(strcmp(newChantype,chanRegs)) && any(strcmp(chanModes{strcmp(newChantype,chanRegs)},{'EEG','MEG'})))
            tempData.eloc(theRow).theta=[];
            tempData.eloc(theRow).radius=[];
            tempData.eloc(theRow).X=[];
            tempData.eloc(theRow).Y=[];
            tempData.eloc(theRow).Z=[];
            tempData.eloc(theRow).sph_theta=[];
            tempData.eloc(theRow).sph_phi=[];
            tempData.eloc(theRow).sph_radius=[];
        elseif strcmp(newChantype,'FID') && (theRow <= numChans)
            %changing normal channel to fiducial
            tempData.implicit=[tempData.implicit tempData.eloc(theRow)];
            tempData.implicit(end).type='FID';
            tempData=ep_selectData(tempData,{find(setdiff([1:numChans],theRow)),[],[],[],[],[]});
        end
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;

            theDescription=['Changed channel type using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
    case 6 %elocX changed
        if ~isempty(newLoc)
            if theRow > numChans
                tempData.implicit(theRow-numChans).X=newLoc;
                try
                    newEloc = convertlocs(tempData.eloc(theRow), 'cart2all');
                    tempData.eloc(theRow)=newEloc;
                    tempData.eloc(theRow).type=tempData.chanTypes{theRow};
                end
            else
                tempData.eloc(theRow).X=newLoc;
                try
                    newEloc = convertlocs(tempData.implicit(theRow), 'cart2all');
                    tempData.implicit(theRow)=newEloc;
                    tempData.implicit(theRow).type=tempData.chanTypes{theRow};
                end
            end
        end
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed x-coordinate of channel using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
    case 7 %elocY changed
        if ~isempty(newLoc)
            if theRow > numChans
                tempData.implicit(theRow-numChans).Y=newLoc;
                try
                    newEloc = convertlocs(tempData.eloc(theRow), 'cart2all');
                    tempData.eloc(theRow)=newEloc;
                    tempData.eloc(theRow).type=tempData.chanTypes{theRow};
                end
            else
                tempData.eloc(theRow).Y=newLoc;
                try
                    newEloc = convertlocs(tempData.implicit(theRow), 'cart2all');
                    tempData.implicit(theRow)=newEloc;
                    tempData.implicit(theRow).type=tempData.chanTypes{theRow};
                end
            end
        end
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed y-coordinate of channel using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 8 %elocZ changed
        if ~isempty(newLoc)
            if theRow > numChans
                tempData.implicit(theRow-numChans).Z=newLoc;
                try
                    newEloc = convertlocs(tempData.eloc(theRow), 'cart2all');
                    tempData.eloc(theRow)=newEloc;
                    tempData.eloc(theRow).type=tempData.chanTypes{theRow};
                end
            else
                tempData.eloc(theRow).Z=newLoc;
                try
                    newEloc = convertlocs(tempData.implicit(theRow), 'cart2all');
                    tempData.implicit(theRow)=newEloc;
                    tempData.implicit(theRow).type=tempData.chanTypes{theRow};
                end
            end
        end
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed z-coordinate of channel using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 9 %eloc changed via 10-05 defaults
        if strcmp(eventdata.NewData,'--')
            return
        end
        if isempty(tempData.eloc)
            tempData.eloc=ep_elocFormat('initialize');
            for iChan=1:numChans
                tempData.eloc(iChan).labels=tempData.chanNames{iChan};
                tempData.eloc(iChan).type=tempData.chanTypes{iChan};
            end
        end
        %for CED Y is +left -right, Z is anterior+ posterior-, X is dorsal+ ventral -.  The sfp file needs to map X to Y, Y to X, and Z to Z.
        %         if isempty(tempData.implicit)
        %             chanNames=tempData.chanNames;
        %         else
        %             chanNames=[tempData.chanNames; {tempData.implicit.labels}'];
        %         end
        
        sfpEloc = ep_transformEloc([], [], tempData.eloc, tempData.implicit, [], tempData.chanNames, [], tempData.montage);
        if isempty(sfpEloc)
            ep_editData('start');
            return
        end
        sfpNames={sfpEloc.labels};

        switch eventdata.NewData
            case 'LHEOG'
                theEloc=find(strcmp('AFp9',sfpNames));
            case 'RHEOG'
                theEloc=find(strcmp('AFp10',sfpNames));
                %             case 'LUVEOG'
                %                 theEloc=find(strcmp('Fp1',sfpNames));
                %             case 'RUVEOG'
                %                 theEloc=find(strcmp('Fp2',sfpNames));
                %             case 'LVLEOG'
                %                 theEloc=find(strcmp('LVEOG',sfpNames));
                %             case 'RLVEOG'
                %                 theEloc=find(strcmp('RVEOG',sfpNames));
            otherwise
                theEloc=find(strcmp(eventdata.NewData,sfpNames));
        end
        if theRow <= numChans
            tempData.eloc(theRow)=sfpEloc(theEloc);
        else
            tempData.implicit(theRow-numChans)=sfpEloc(theEloc);
        end
        [EPdir, ~, ~] = fileparts(which('ep.m'));
        cEloc = ep_readlocsWrapper([EPdir filesep 'templates' filesep 'Standard-10-5-Cap385-VEOG.ced'],'filetype','chanedit');
        if EPtictoc.stop;EPtictoc.stop=0;return;end
        sfpEloc(theRow).cX=cEloc(theEloc).X;
        sfpEloc(theRow).cY=cEloc(theEloc).Y;
        sfpEloc(theRow).cZ=cEloc(theEloc).Z;

        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed coordinates of channel using Channels Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

end
ep_editData('start');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editEvents(src,eventdata)
%change the contents of the Events table

global EPoverview EPmain

tableData=get(EPoverview.handles.events.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

trialCol=0;
if strcmp(EPoverview.workData.dataType,'single_trial')
    trialCol=1;
end

theSub=EPoverview.workMeta.events.eventIndex(theRow,1);
theTrial=EPoverview.workMeta.events.eventIndex(theRow,2);
theEvent=tableData{theRow,4+trialCol};

switch theCol
    case 1 %select checked
        if ~isempty(EPoverview.workData.trialNames)
            EPoverview.workMeta.trials.select(tableData{theRow,3})=eventdata.NewData;
        end
        [uniqueCells waveOrder m]=unique(EPoverview.workData.cellNames,'stable');
        EPoverview.workMeta.cells.select(find(strcmp(tableData{theEvent,2},uniqueCells)))=eventdata.NewData;
        EPoverview.workMeta.subjects.select(theSub)=eventdata.NewData;
        EPoverview.workMeta.events.select(theRow)=eventdata.NewData;
        
    case 5+trialCol
        tempData=EPoverview.workData;
        tempData.events{theSub,theTrial}(theEvent).type=eventdata.NewData;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed event type using Events Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 6+trialCol
        tempData=EPoverview.workData;
        tempData.events{theSub,theTrial}(theEvent).sample=eventdata.NewData;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed event sample using Events Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 7+trialCol
        tempData=EPoverview.workData;
        tempData.events{theSub,theTrial}(theEvent).value=eventdata.NewData;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed event value using Events Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 8+trialCol
        tempData=EPoverview.workData;
        tempData.events{theSub,theTrial}(theEvent).duration=eventdata.NewData;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed event duration using Events Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    otherwise
        theKey=theCol-8-trialCol;
        tempData=EPoverview.workData;
        tempData.events{theSub,theTrial}(theEvent).keys(theKey).code=eventdata.NewData;
        tempData.events{theSub,theTrial}(theEvent).keys(theKey).data=eventdata.NewData;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed event key using Events Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editSubs(src,eventdata)
%change the contents of the Subjects table

global EPoverview EPmain

tableData=get(EPoverview.handles.subjects.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

numTaskNames=length(EPoverview.workData.taskNames);
numSubSpecs=length(EPoverview.workData.subjectSpecNames);
numSubs=length(EPoverview.workData.subNames);
numVsubs=max(0,size(EPoverview.workMeta.GAVsubs,1)-1);
numRsubs=numSubs-numVsubs;
tempData=EPoverview.workData;

switch theCol
    case 1 %reorder subjects
        [~,sortOrder] = sortrows(tableData,1);
        if ~isempty(EPoverview.workMeta.GAVsubs)
            if any(sortOrder(1:numRsubs)>numRsubs) || any(sortOrder(numRsubs+1:end)<=numRsubs)
                %if any of the virtual grand averages are moved from the end or vice versa
                disp('Error: Virtual grand averages must be at the end of the subjects slots.')
                ep_editData('start');
                return
            end
        end
        [tempData]=ep_reorderData(EPoverview.workData,'subjects',sortOrder);
        if ~isempty(tempData)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            if ~isempty(EPoverview.workMeta.GAVsubs) && ~isequal(sortOrder(numRsubs+1:numSubs),[numRsubs+1:numSubs]')
                EPoverview.workMeta.GAVsubs(2:end)=EPoverview.workMeta.GAVsubs(sortOrder(numRsubs+1:numSubs)-numRsubs+1,:,:);
            end
            EPoverview.workMeta.subjects.select=EPoverview.workMeta.subjects.select(sortOrder);
            EPoverview.workMeta.subjects.weights=EPoverview.workMeta.subjects.weights(sortOrder);
            newEventsSelect=zeros(size(EPoverview.workMeta.events.select));
            newEventsIndex=zeros(size(EPoverview.workMeta.events.select));
            counter=0;
            for iEvent=1:length(sortOrder)
                subIndex=find(EPoverview.workMeta.events.eventIndex(:,1)==iEvent);
                numEvents=length(subIndex);
                newEventsSelect(counter+1:counter+numEvents)=EPoverview.workMeta.events.select(subIndex);
                newEventsIndex(counter+1:counter+numEvents,:)=EPoverview.workMeta.events.eventIndex(subIndex,:);
            end
            EPoverview.workMeta.events.select=newEventsSelect;
            EPoverview.workMeta.events.eventIndex=newEventsIndex;
            
            theDescription=['Reordered subjects using Subjects Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');

    case 2 %select checked
        EPoverview.workMeta.subjects.select(theRow)=eventdata.NewData;
        EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,1),theRow))=eventdata.NewData;
        EPoverview.workMeta.subjects.weights(theRow)=EPoverview.workMeta.subjects.select(theRow);
        if theRow > numRsubs
            if eventdata.NewData
                %if virtual subject selected, also add weights of constituent subjects.
                EPoverview.workMeta.subjects.weights(EPoverview.workMeta.GAVsubs{theRow-numRsubs+1,1,1}(:,1))=EPoverview.workMeta.GAVsubs{theRow-numRsubs+1,1,1}(:,2);
            else
                EPoverview.workMeta.subjects.weights(EPoverview.workMeta.GAVsubs{theRow-numRsubs+1,1,1}(:,1))=0;
            end
        end
        ep_editData('start');

    case 3 %weight set
        if isnan(tableData{theRow,theCol})
            tableData{theRow,theCol}=0;
            set(EPoverview.handles.subjects.dataTable,'Data',tableData);
        end
        EPoverview.workMeta.subjects.weights(theRow)=cell2mat(tableData(theRow,3));
        EPoverview.workMeta.subjects.select(theRow)=eventdata.NewData;
        EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,1),theRow))=eventdata.NewData;
        if theRow > numRsubs
            if eventdata.NewData
                EPoverview.workMeta.subjects.weights(EPoverview.workMeta.GAVsubs{theRow-numRsubs+1,1,1}(:,1))=EPoverview.workMeta.GAVsubs{theRow-numRsubs+1,1,1}(:,2);
            else
                EPoverview.workMeta.subjects.weights(EPoverview.workMeta.GAVsubs{theRow-numRsubs+1,1,1}(:,1))=0;
            end
        end
        ep_editData('start');
        
    case 4 %sub name changed
        newSubName=eventdata.NewData;
        %oldSubName=eventdata.PreviousData;
        if isempty(newSubName)
            disp('Subject names cannot be empty.');
            ep_editData('start');
            return
        end
        
        tempData.subNames{theRow}=newSubName;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed subject using Subjects Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 5 %session changed
        newSession=eventdata.NewData;
        %oldSubType=eventdata.PreviousData;
        if isempty(newSession)
            disp('Error: Sessions cannot be empty.');
            ep_editData('start');
            return
        end

        if theRow > numRsubs 
            disp('Error: May not change session info for virtual grand averages.');
            ep_editData('start');
            return
        end
        
        if isempty(tempData.sessNums)
            tempData.sessNums=zeros(length(tempData.subNames),1);
        end
        tempData.sessNums(theRow)=find(strcmp(newSession,tempData.sessNames));
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed session using Subjects Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 6 %sub type changed
        newSubType=eventdata.NewData;
        %oldSubType=eventdata.PreviousData;
        if isempty(newSubType)
            disp('Error: Subject types cannot be empty.');
            ep_editData('start');
            return
        end

        if theRow > numRsubs 
            disp('Error: May not change subject type for virtual grand averages.');
            ep_editData('start');
            return
        end
        
        tempData.subTypes{theRow}=newSubType;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed subject type using Subjects Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end        
    otherwise

        if theRow > numRsubs 
            disp('Error: May not change subject info for virtual grand averages.');
            ep_editData('start');
            return
        end

        if theCol-6 <= numSubSpecs
            tempData.subjectSpecs{theRow,theCol-6}=eventdata.NewData;
        else
            theTask=floor((theCol-6-numSubSpecs-1)/numTaskNames)+1;
            theMeas=mod((theCol-6-numSubSpecs-1)/numTaskNames)+1;
            tempData.taskSpecs{theRow,theTask,theMeas}=eventdata.NewData;
        end
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed subject spec using Subjects Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end        
        
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editFacs(src,eventdata)
%change the contents of the Factors table

global EPoverview EPmain

tableData=get(EPoverview.handles.factors.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

switch theCol
    case 1 %reorder factors
        [~,sortOrder] = sortrows(tableData,1);
        [tempData]=ep_reorderData(EPoverview.workData,'factors',sortOrder);
        if ~isempty(tempData)
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Reordered factors using Factors Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        ep_editData('start');
        
    case 2 %select checked
        EPoverview.workMeta.factors.select(theRow)=eventdata.NewData;
        EPoverview.workMeta.factors.weights(theRow)=eventdata.NewData;
        ep_editData('start');
        
    case 3 %weight set
        if isnan(tableData{theRow,theCol})
            tableData{theRow,theCol}=0;
            set(EPoverview.handles.factors.dataTable,'Data',tableData);
        end
        EPoverview.workMeta.factors.weights=cell2mat(tableData(:,3));
        ep_editData('start');
        
    case 4 %factor name changed
        newFacName=eventdata.NewData;
        %oldFacName=eventdata.PreviousData;
        if isempty(newFacName)
            disp('Factor names cannot be empty.');
            ep_editData('start');
            return
        end
        if (length(unique(EPoverview.workData.facNames)) ~= length(EPoverview.workData.facNames))
            disp('Factor names cannot be duplicated.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.facNames{theRow}=newFacName;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed factor using Factors Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
    case 5 %factor type changed
        newFacType=eventdata.NewData;
        %oldFacType=eventdata.PreviousData;
        if isempty(newChantype)
            disp('Factor types cannot be empty.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.facTypes{theRow}=newFacType;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Changed factor type using Factors Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editQC(src,eventdata)
%change the contents of the QC table

global EPoverview

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

if theCol ==1
    %select checked
    EPoverview.workMeta.subjects.select(theRow)=eventdata.NewData;
    EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,1),theRow))=eventdata.NewData;
    EPoverview.workMeta.subjects.weights(theRow)=EPoverview.workMeta.subjects.select(theRow);
    ep_editData('start');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function editSess(src,eventdata)
%change the contents of the Sessions table

global EPoverview EPmain

tableData=get(EPoverview.handles.sessions.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

switch theCol
    case 1 %reorder sessions
        if theRow==1
            disp('The n/a session category cannot be changed.');
            ep_editData('start');
            return
        end
        [tableData2,sortOrder] = sortrows(tableData,1);
        tempData=EPoverview.workData;
        tempData.sessNames=tempData.sessNames(sortOrder);
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            EPoverview.workMeta.sessions.select=EPoverview.workMeta.sessions.select(sortOrder);
            
            theDescription=['Reordered sessions using Sessions Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end

        ep_editData('start');
        
    case 2 %select checked
        EPoverview.workMeta.sessions.select(theRow)=eventdata.NewData;
        if ~isempty(EPoverview.workData.sessNums)
            subList=find((theRow-1)==EPoverview.workData.sessNums);
        else
            subList=[1:length(EPoverview.workMeta.subjects.select)];
        end
        EPoverview.workMeta.subjects.select(subList)=eventdata.NewData;
        EPoverview.workMeta.subjects.weights(subList)=eventdata.NewData;
        EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,1),subList))=eventdata.NewData;
        ep_editData('start');
        
    case 3 %session name changed
        if theRow==1
            disp('The n/a session category cannot be changed.');
            ep_editData('start');
            return
        end
        newSessName=eventdata.NewData;
        %oldSubName=eventdata.PreviousData;
        if isempty(newSessName)
            disp('Session names cannot be empty.');
            ep_editData('start');
            return
        end
        
        tempData=EPoverview.workData;
        tempData.sessNames{theRow-1}=newSessName;
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Renamed session using Sessions Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function editSpecs(src,eventdata)
%change the contents of the Events table

global EPoverview EPmain

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);

theSub=theRow;
if theCol ==2
    %select checked
    EPoverview.workMeta.subjects.select(theRow)=eventdata.NewData;
    EPoverview.workMeta.events.select(ismember(EPoverview.workMeta.events.eventIndex(:,1),theRow))=eventdata.NewData;
    EPoverview.workMeta.subjects.weights(theRow)=EPoverview.workMeta.subjects.select(theRow);
    ep_editData('start');
else
    theCell=theCol-3;

    tempData=EPoverview.workData;
    tempData.trialSpecs{theCell,EPoverview.theSpec,theSub}=eventdata.NewData;
    [err]=ep_checkEPfile(tempData);
    if ~err
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        EPoverview.workData=tempData;

        theDescription=['Changed trial spec using Specs Pane of the Edit Function.'];
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function editHistory(src,eventdata)
%change the contents of the History table

global EPoverview EPmain

tableData=get(EPoverview.handles.history.dataTable,'Data');

theRow=eventdata.Indices(1);
theCol=eventdata.Indices(2);
theChange=theRow;
tempData=EPoverview.workData;
theDescription='';

switch theCol
    case 1 %reorder changes
        [tableData,sortOrder] = sortrows(tableData,1);
        tempData.history(sortOrder,:)=EPoverview.workData.history;
        
        [err]=ep_checkEPfile(tempData);
        if ~err
            EPoverview.lastData=EPoverview.workData;
            EPoverview.lastMeta=EPoverview.workMeta;
            EPoverview.workData=tempData;
            
            theDescription=['Reordered history using History Pane of the Edit Function.'];
            EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
            EPoverview.workMeta.history.select(end+1)=0;
        end
        
        ep_editData('start');
    case 2 %select checked
        EPoverview.workMeta.history.select(:)=0;
        EPoverview.workMeta.history.select(theRow)=eventdata.NewData;
        if eventdata.NewData==1
            EPoverview.history.fileNames=EPoverview.workData.history{theChange,5};
        else
            EPoverview.history.fileNames=cell(0);
        end
        
        if ishandle(EPmain.handles.playback)
            close(EPmain.handles.playback);
        end
        if (eventdata.NewData==1) && ~isempty(EPoverview.workData.history{theChange,3}.children)
            thePosition=EPoverview.workData.history{theChange,3}.position;
            thePosition(1)=0;
            thePosition(2)=0;
            EPmain.handles.playback = figure('Name', 'Playback', 'NumberTitle', 'off', 'Position',thePosition, 'MenuBar', 'none');
            for iChildren=length(EPoverview.workData.history{theChange,3}.children):-1:1
                colFormat=[];
                if ~isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Style') || ~strcmp(EPoverview.workData.history{theChange,3}.children(iChildren).Style,'frame')
                    theControl=[EPoverview.workData.history{theChange,3}.children(iChildren).Type '('];
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Style') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Style)
                        theControl=[theControl '''Style'',''' EPoverview.workData.history{theChange,3}.children(iChildren).Style ''','];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Units') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Units)
                        theControl=[theControl '''Units'',''' EPoverview.workData.history{theChange,3}.children(iChildren).Units ''','];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Tag') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Tag)
                        theControl=[theControl '''Tag'',''' EPoverview.workData.history{theChange,3}.children(iChildren).Tag ''','];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Enable') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Enable)
                        theControl=[theControl '''Enable'',''' EPoverview.workData.history{theChange,3}.children(iChildren).Enable ''','];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'HorizontalAlignment') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).HorizontalAlignment)
                        theControl=[theControl '''HorizontalAlignment'',''' EPoverview.workData.history{theChange,3}.children(iChildren).HorizontalAlignment ''','];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'FontSize') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).FontSize)
                        theControl=[theControl '''FontSize'',' num2str(EPoverview.workData.history{theChange,3}.children(iChildren).FontSize) ','];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Position') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Position)
                        theControl=[theControl '''Position'',[' num2str(EPoverview.workData.history{theChange,3}.children(iChildren).Position) '],'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'String') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).String)
                        if ~iscell(EPoverview.workData.history{theChange,3}.children(iChildren).String)
                            theString=['''' EPoverview.workData.history{theChange,3}.children(iChildren).String ''''];
                        else
                            theString='';
                            for iRow=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).String,1)
                                for iCol=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).String,2)
                                    theString=[theString '''' EPoverview.workData.history{theChange,3}.children(iChildren).String{iRow,iCol} ''','];
                                end
                                theString=[theString(1:end-1) ';'];
                            end
                            theString=theString(1:end-1);
                        end
                        theControl=[theControl '''String'',{' theString '},'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Value') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Value)
                        theControl=[theControl '''Value'',[' num2str(EPoverview.workData.history{theChange,3}.children(iChildren).Value) '],'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'BackgroundColor') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).BackgroundColor)
                        if size(EPoverview.workData.history{theChange,3}.children(iChildren).BackgroundColor,1)==1
                            theBackground=num2str(EPoverview.workData.history{theChange,3}.children(iChildren).BackgroundColor);
                        else
                            theBackground='';
                            for iRow=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).BackgroundColor,1)
                                theBackground=[theBackground num2str(EPoverview.workData.history{theChange,3}.children(iChildren).BackgroundColor(iRow,:)) ';'];
                            end
                            theBackground=theBackground(1:end-1);
                        end
                        theControl=[theControl '''BackgroundColor'',[' theBackground '],'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'ColumnFormat') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnFormat)
                        if ~iscell(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnFormat)
                            theColFormat=['''' EPoverview.workData.history{theChange,3}.children(iChildren).ColumnFormat ''''];
                        else
                            theColFormat='';
                            colCount=0;
                            for iRow=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnFormat,1)
                                for iCol=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnFormat,2)
                                    theCell=EPoverview.workData.history{theChange,3}.children(iChildren).ColumnFormat{iRow,iCol};
                                    colCount=colCount+1;
                                    colFormat(colCount)=0;
                                    if iscell(theCell)
                                        theFlatCell='{';
                                            for subCell=1:length(theCell)
                                                theFlatCell=[theFlatCell '''' theCell{subCell} ''','];
                                            end
                                        theFlatCell=[theFlatCell(1:end-1) '}'];
                                        theColFormat=[theColFormat theFlatCell ','];
                                    else
                                        theColFormat=[theColFormat '''' theCell ''','];
                                        if strcmp(theCell,'logical')
                                            colFormat(colCount)=1;
                                        end
                                    end
                                end
                                theColFormat=[theColFormat(1:end-1) ';'];
                            end
                            theColFormat=theColFormat(1:end-1);
                        end
                        theControl=[theControl '''ColumnFormat'',{' theColFormat '},'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'Data') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).Data)
                        if ~iscell(EPoverview.workData.history{theChange,3}.children(iChildren).Data)
                            theData=['''' EPoverview.workData.history{theChange,3}.children(iChildren).Data ''''];
                        else
                            theData='';
                            for iRow=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).Data,1)
                                for iCol=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).Data,2)
                                    theCell=EPoverview.workData.history{theChange,3}.children(iChildren).Data{iRow,iCol};
                                    if ~ischar(theCell)
                                        if ~isempty(colFormat) && colFormat(iCol) && theCell
                                            theCell='true';
                                        else
                                            theCell=num2str(theCell);
                                        end
                                    end
                                    theData=[theData '''' theCell ''','];
                                end
                                theData=[theData(1:end-1) ';'];
                            end
                            theData=theData(1:end-1);
                        end
                        theControl=[theControl '''Data'',{' theData '},'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'ColumnName') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnName)
                        if ~iscell(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnName)
                            theName=['''' EPoverview.workData.history{theChange,3}.children(iChildren).ColumnName ''''];
                        else
                            theName='';
                            for iRow=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnName,1)
                                for iCol=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnName,2)
                                    theCell=EPoverview.workData.history{theChange,3}.children(iChildren).ColumnName{iRow,iCol};
                                    if ~ischar(theCell)
                                        theCell=num2str(theCell);
                                    end
                                    theName=[theName '''' theCell ''','];
                                end
                                theName=[theName(1:end-1) ';'];
                            end
                            theName=theName(1:end-1);
                        end
                        theControl=[theControl '''ColumnName'',{' theName '},'];
                    end
                    if isfield(EPoverview.workData.history{theChange,3}.children(iChildren),'ColumnWidth') && ~isempty(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnWidth)
                        if ~iscell(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnWidth)
                            theName=['''' EPoverview.workData.history{theChange,3}.children(iChildren).ColumnWidth ''''];
                        else
                            theName='';
                            for iRow=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnWidth,1)
                                for iCol=1:size(EPoverview.workData.history{theChange,3}.children(iChildren).ColumnWidth,2)
                                    theCell=EPoverview.workData.history{theChange,3}.children(iChildren).ColumnWidth{iRow,iCol};
                                    if ~ischar(theCell)
                                        theCell=num2str(theCell);
                                        theName=[theName theCell ','];
                                    else
                                        theName=[theName '''' theCell ''','];
                                    end
                                    
                                end
                                theName=[theName(1:end-1) ';'];
                            end
                            theName=theName(1:end-1);
                        end
                        theControl=[theControl '''ColumnWidth'',{' theName '},'];
                    end
                    theControl=[theControl(1:end-1) ');'];
                    figure(EPmain.handles.playback);
                    %                 uicontrol('Style','pushbutton','Units','pixels','Position',[0,0,100,40],'String','Main');
                    eval(theControl);
                end
            end
        end
        ep_editData('start');
    case 3
        tempData.history{theChange,2}=eventdata.NewData;
        theDescription=['Changed history description using History Pane of the Edit Function.'];
    case 4
        tempData.history{theChange,1}.time=eventdata.NewData;
        theDescription=['Changed history time using History Pane of the Edit Function.'];
    case 5
        tempData.history{theChange,1}.EPversion=eventdata.NewData;
        theDescription=['Changed history version using History Pane of the Edit Function.'];
    case 6
        tempData.history{theChange,1}.user=eventdata.NewData;
        theDescription=['Changed history user using History Pane of the Edit Function.'];
    case 7
        tempData.history{theChange,1}.lab=eventdata.NewData;
        theDescription=['Changed history lab using History Pane of the Edit Function.'];
    case 8
        tempData.history{theChange,1}.institution=eventdata.NewData;
        theDescription=['Changed history institution using History Pane of the Edit Function.'];
    case 9
        tempData.history{theChange,1}.project=eventdata.NewData;
        theDescription=['Changed history project using History Pane of the Edit Function.'];
    case 10
        tempData.history{theChange,1}.experiment=eventdata.NewData;
        theDescription=['Changed history experiment using History Pane of the Edit Function.'];
    otherwise
        disp('oops - programmer error')
end

if ~isempty(theDescription)
    [err]=ep_checkEPfile(tempData);
    if ~err
        EPoverview.lastData=EPoverview.workData;
        EPoverview.lastMeta=EPoverview.workMeta;
        EPoverview.workData=tempData;
        
        EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
        EPoverview.workMeta.history.select(end+1)=0;
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%redraws Edit Window after size change
function resizeEdit(src, eventdata)
global EPoverview

% set(EPoverview.handles.hEditWindow,'Resize',0)
% set(EPoverview.handles.hEditWindow,'SizeChangedFcn',[])
coords=get(EPoverview.handles.hEditWindow,'Position');
% if (coords(3) >=600) && (coords(4) >=600)
if any(coords-EPoverview.coords)
        EPoverview.coords=coords;
    ep_editData('start');
end
% else
%     EPoverview.coords(3)=max(coords(3),600);
%     EPoverview.coords(4)=max(coords(4),600);
%     set(EPoverview.handles.hEditWindow,'Position',EPoverview.coords)
% end

% set(EPoverview.handles.hEditWindow,'Resize',1)
% set(EPoverview.handles.hEditWindow,'SizeChangedFcn',@resizeEdit)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%outputs size of a variable with appropriate byte denomination.
function outputBytes=theByteSize(inputVar)

if isempty(inputVar)
    outputBytes='0 B';
else
    memWhos=whos('inputVar');
    memSize=memWhos.bytes;

    if  memSize > 1024^4
        outputBytes=[num2str(floor(memSize/(1024^4))) ' TB'];
    elseif memSize > 1024^3
        outputBytes=[num2str(floor(memSize/(1024^3))) ' GB'];
    elseif memSize > 1024^2
        outputBytes=[num2str(floor(memSize/(1024^2))) ' MB'];
    elseif memSize > 1024
        outputBytes=[num2str(floor(memSize/1024)) ' KB'];
    else
        outputBytes=[num2str(memSize) ' B'];
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Deletes a field to save on memory.
function nullMemory(src, eventdata, theField)
global EPoverview EPmain

tempData=EPoverview.workData;

if strcmp(theField,'events')
    tempData.events=cell(length(tempData.subNames),length(tempData.cellNames));
elseif strcmp(theField,'trialSpecs')
    tempData.trialSpecs=[];
    tempData.trialSpecNames=cell(0);
else
    evalc(['tempData.' theField '=[];']);
end

[err]=ep_checkEPfile(tempData);
if ~err
    EPoverview.lastData=EPoverview.workData;
    EPoverview.lastMeta=EPoverview.workMeta;
    EPoverview.workData=tempData;

    theDescription=['Deleted the ' theField ' field using Memory Pane of the Edit Function.'];
    EPoverview.workData.history=ep_addHistory(EPoverview.workData.history, EPmain.preferences.records, theDescription, EPoverview.handles.hEditWindow, EPmain.preferences, EPmain.preferences.EPver);
    EPoverview.workMeta.history.select(end+1)=0;
    ep_editData('start');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Confirms closing of the Edit pane.
function closeEdit(src,event)

global EPoverview EPmain

if isempty(EPoverview) || (~EPoverview.done && ~isempty(EPoverview.lastChange) && ~isempty(EPoverview.workData) && ~strcmp(EPoverview.lastChange,EPoverview.workData.history{end,1}.time))
    selection = questdlg('Close The Edit Window Without Saving Changes?', ...
        'Confirm Closure', ...
        'Yes','No','Yes');
    switch selection
        case 'Yes'
            delete(gcf)
        case 'No'
            return
    end
    EPoverview.done=1;
else
    if ~isempty(findobj('name','EditData'))
        delete(gcf)
    end
end

%enable the main pane
ep_disableGUI(EPmain.handles.hMainWindow,EPmain.handleList);
ep_tictoc('done');

%deselect cell in the dataset table
temp = get(EPmain.handles.edit.editTable,'Data');
set(EPmain.handles.edit.editTable,'Data',{ 'dummy' });
set(EPmain.handles.edit.editTable,'Data', temp );

ep('startEdit')
